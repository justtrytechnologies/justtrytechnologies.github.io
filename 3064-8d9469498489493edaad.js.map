{"version":3,"file":"3064-8d9469498489493edaad.js","mappings":"yMAiGA,UA1FoBA,KAClB,MAAM,EAACC,EAAa,EAACC,IAAmBC,EAAAA,EAAAA,UACtCC,EAAAA,GAAgBC,KAAKC,GAAWC,OAAAC,OAAA,GAAWF,EAAY,CAACG,MAAO,QAE3D,EAACC,EAAW,EAACC,IAAiBR,EAAAA,EAAAA,WAAS,GACvCS,GAAiBC,EAAAA,EAAAA,QAAO,MAExBC,GAAgBC,EAAAA,EAAAA,cAAY,KAChCX,EAAAA,GAAgBY,SAAQ,CAACV,EAAaW,KACpC,MAAMC,EAAWC,aAAY,KAC3BjB,GAAiBkB,IACf,MAAMC,GAAmBC,EAAAA,EAAAA,GAAOF,GAC1BG,EAAqBF,EAAoBJ,GAK/C,OAHIM,EAAmBd,MAAQc,EAAmBC,eAChDD,EAAmBd,OAAS,GAEvBY,CAAmB,IAGxBpB,EAAagB,GAAOR,OAASH,EAAYkB,cAC3CC,cAAcP,EAChB,GACC,GAAG,GACN,GACD,CAACjB,IA0BJ,OAxBAyB,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAW,IAAIC,sBAClBC,IACCA,EAAQb,SAASc,IACXA,EAAMC,iBAAmBrB,IAC3BC,GAAc,GACdG,IACF,GACA,GAEJ,CAAEkB,UAAW,KAEf,IAAIC,EAAkBrB,EAAesB,QAKrC,OAJID,GACFN,EAASQ,QAAQF,GAGZ,KACDA,GACFN,EAASS,UAAUH,EACrB,CACD,GACA,CAACvB,EAAYI,IAGduB,EAAAA,cAACC,EAAAA,EAAS,CAACC,UAAU,MAAMC,OAAK,EAACC,IAAK7B,GACpCyB,EAAAA,cAACK,EAAAA,EAAG,KACFL,EAAAA,cAACM,EAAAA,EAAG,CAACC,GAAI,IACPP,EAAAA,cAAA,OAAKE,UAAU,uBACbF,EAAAA,cAAA,OAAKE,UAAU,wBAEbF,EAAAA,cAACQ,EAAAA,EAAW,CACVC,IAAI,6DACJC,IAAI,UAASC,YAAAC,EAAA,SAEfZ,EAAAA,cAAA,QAAME,UAAU,8BAElBF,EAAAA,cAACK,EAAAA,EAAG,CAACH,UAAU,2BACZtC,aAAY,EAAZA,EAAcI,KAAI,CAAC6C,EAAKC,IACvBd,EAAAA,cAACM,EAAAA,EAAG,CAACS,GAAI,GAAIR,GAAI,EAAGS,GAAI,EAAGC,IAAKH,GAC9Bd,EAAAA,cAAA,OAAKE,UAAU,uBACbF,EAAAA,cAAA,OAAKE,UAAU,4BAA4BW,aAAG,EAAHA,EAAKK,MAChDlB,EAAAA,cAAA,WAAQa,aAAG,EAAHA,EAAKzC,OAAK,KAClB4B,EAAAA,cAAA,SAAIa,aAAG,EAAHA,EAAKM,YAKjBnB,EAAAA,cAAA,OAAKE,UAAU,yBAEbF,EAAAA,cAACQ,EAAAA,EAAW,CACVC,IAAI,8DACJC,IAAI,WAAUC,YAAAC,EAAA,SAEhBZ,EAAAA,cAAA,QAAME,UAAU,kCAKd,C","sources":["webpack://justtry-app/./src/screens/main/main_v2/achievement.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from \"react\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport { achievementData } from \"../../../core/const\";\r\nimport { StaticImage } from \"gatsby-plugin-image\";\r\n// import acheivementLeftImg from \"../../../styles/assets/images/landing/acheivement-left.png\";\r\n// import acheivementRightImg from \"../../../styles/assets/images/landing/acheivement-right.png\";\r\n\r\nconst Achievement = () => {\r\n  const [achievements, setAchievements] = useState(\r\n    achievementData.map((achievement) => ({ ...achievement, count: 0 }))\r\n  );\r\n  const [hasStarted, setHasStarted] = useState(false);\r\n  const achievementRef = useRef(null);\r\n\r\n  const StartCounting = useCallback(() => {\r\n    achievementData.forEach((achievement, index) => {\r\n      const interval = setInterval(() => {\r\n        setAchievements((prevAchievements) => {\r\n          const updatedAchievements = [...prevAchievements];\r\n          const currentAchievement = updatedAchievements[index];\r\n          // If the count is less than the targetNumber, increment it\r\n          if (currentAchievement.count < currentAchievement.targetNumber) {\r\n            currentAchievement.count += 1;\r\n          }\r\n          return updatedAchievements;\r\n        });\r\n        // Clear interval when the count reaches the targetNumber\r\n        if (achievements[index].count >= achievement.targetNumber) {\r\n          clearInterval(interval);\r\n        }\r\n      }, 40); // Adjust speed here (50ms per increment)\r\n    });\r\n  }, [achievements]);\r\n\r\n  useEffect(() => {\r\n    const observer = new IntersectionObserver(\r\n      (entries) => {\r\n        entries.forEach((entry) => {\r\n          if (entry.isIntersecting && !hasStarted) {\r\n            setHasStarted(true); // Ensure it only starts once\r\n            StartCounting();\r\n          }\r\n        });\r\n      },\r\n      { threshold: 0.5 } // Trigger when 50% of the section is visible\r\n    );\r\n    let achievementCurr = achievementRef.current;\r\n    if (achievementCurr) {\r\n      observer.observe(achievementCurr);\r\n    }\r\n    // Clean up the observer when the component unmounts\r\n    return () => {\r\n      if (achievementCurr) {\r\n        observer.unobserve(achievementCurr);\r\n      }\r\n    };\r\n  }, [hasStarted, StartCounting]);\r\n\r\n  return (\r\n    <Container className=\"p-0\" fluid ref={achievementRef}>\r\n      <Row>\r\n        <Col md={12}>\r\n          <div className=\"achievement_section\">\r\n            <div className=\"achieve_left_animate\">\r\n              {/* <img src={acheivementLeftImg} /> */}\r\n              <StaticImage\r\n                src=\"../../../styles/assets/images/landing/acheivement-left.png\"\r\n                alt=\"left-bg\"\r\n              />\r\n              <span className=\"achieve_left_animate_dot\"></span>\r\n            </div>\r\n            <Row className=\"achievement_section_row\">\r\n              {achievements?.map((ele, ind) => (\r\n                <Col sm={12} md={6} lg={3} key={ind}>\r\n                  <div className=\"achieve_content_sec\">\r\n                    <div className=\"achieve_content_logo_sec\">{ele?.logo}</div>\r\n                    <h3>{`${ele?.count}+`}</h3>\r\n                    <p>{ele?.label}</p>\r\n                  </div>\r\n                </Col>\r\n              ))}\r\n            </Row>\r\n            <div className=\"achieve_right_animate\">\r\n              {/* <img src={acheivementRightImg} /> */}\r\n              <StaticImage\r\n                src=\"../../../styles/assets/images/landing/acheivement-right.png\"\r\n                alt=\"right-bg\"\r\n              />\r\n              <span className=\"achieve_right_animate_dot\"></span>\r\n            </div>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Achievement;\r\n"],"names":["Achievement","achievements","setAchievements","useState","achievementData","map","achievement","Object","assign","count","hasStarted","setHasStarted","achievementRef","useRef","StartCounting","useCallback","forEach","index","interval","setInterval","prevAchievements","updatedAchievements","_toConsumableArray","currentAchievement","targetNumber","clearInterval","useEffect","observer","IntersectionObserver","entries","entry","isIntersecting","threshold","achievementCurr","current","observe","unobserve","React","Container","className","fluid","ref","Row","Col","md","StaticImage","src","alt","__imageData","require","ele","ind","sm","lg","key","logo","label"],"sourceRoot":""}