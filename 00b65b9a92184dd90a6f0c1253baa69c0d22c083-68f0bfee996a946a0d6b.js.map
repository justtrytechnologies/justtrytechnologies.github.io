{"version":3,"file":"00b65b9a92184dd90a6f0c1253baa69c0d22c083-68f0bfee996a946a0d6b.js","mappings":"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","sources":["webpack://justtry-app/./src/components/common/faq.js","webpack://justtry-app/./src/components/common/consult.js","webpack://justtry-app/./src/components/common/move-forward.js","webpack://justtry-app/./src/components/common/talk-to-us-new.js","webpack://justtry-app/./src/components/common/talk-to-us-popup.js","webpack://justtry-app/./node_modules/react-bootstrap/esm/AccordionContext.js","webpack://justtry-app/./node_modules/react-bootstrap/esm/AccordionCollapse.js","webpack://justtry-app/./node_modules/react-bootstrap/esm/AccordionItemContext.js","webpack://justtry-app/./node_modules/react-bootstrap/esm/AccordionBody.js","webpack://justtry-app/./node_modules/react-bootstrap/esm/AccordionButton.js","webpack://justtry-app/./node_modules/react-bootstrap/esm/AccordionHeader.js","webpack://justtry-app/./node_modules/react-bootstrap/esm/AccordionItem.js","webpack://justtry-app/./node_modules/react-bootstrap/esm/Accordion.js"],"sourcesContent":["import React from \"react\";\r\nimport { Container, Row, Col, Accordion } from \"react-bootstrap\";\r\n\r\nconst Faq = ({ faqData }) => {\r\n  return (\r\n    <div className=\"faq_outline\">\r\n      <Container>\r\n        <Row className=\"faq_row\">\r\n         \r\n\r\n\r\n          <Col xxl={12} xl={12} lg={12} md={12} sm={12} className=\"p-lg-0\">\r\n            <div className=\"faq_rhs\">\r\n              <h2 className=\"faq_title\">\r\n                Resolve your unanswered queries effortlessly\r\n              </h2>\r\n              <div className=\"faq_acc_wrapper\">\r\n                <Accordion>\r\n                  {faqData.map((item, index) => (\r\n                    <Accordion.Item key={index} eventKey={index.toString()}>\r\n                      <Accordion.Header>\r\n                        <div>\r\n                        {index + 1}.\r\n                        </div>\r\n                        <div>\r\n                        {item.question}\r\n                        </div>\r\n                         </Accordion.Header>\r\n                      <Accordion.Body>{item.answer}</Accordion.Body>\r\n                    </Accordion.Item>\r\n                  ))}\r\n                </Accordion>\r\n              </div>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Faq;\r\n","import React, { useState } from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport addToMailchimp from \"gatsby-plugin-mailchimp\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as Yup from \"yup\";\r\nimport { utils } from \"../../core/helper\";\r\nimport Loading from \"./loading\";\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  email: Yup.string().email(\"Please Enter a Email\").label(\"Email\").required(),\r\n});\r\n\r\nconst FormModal = (props) => {\r\n  const [loading, setLoading] = useState(false);\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n    reset,\r\n  } = useForm({\r\n    resolver: yupResolver(validationSchema),\r\n  });\r\n\r\n  const handleSubscribe = async (values) => {\r\n    setLoading(true);\r\n    const { email } = values;\r\n    const resp = await addToMailchimp(email);\r\n    if (resp.result === \"success\") {\r\n      utils.showSuccssMsg(resp?.msg);\r\n      setLoading(false);\r\n      reset();\r\n    } else {\r\n      utils.showErrMsg(resp?.msg);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal {...props} size=\"md\" className=\"form_modal_layout\">\r\n        <div className=\"form_modal_wrapper\">\r\n          <Modal.Header>\r\n            <Modal.Title>\r\n              <span className=\"clr_text\">Free </span>\r\n              Consult\r\n            </Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <p>\r\n              Secure a cost-free consultation for expert insights and\r\n              personalized advice tailored to your needs. No charges, just{\" \"}\r\n              <span className=\"bold_txt\">valuable guidance.</span>\r\n            </p>\r\n            <form autoComplete=\"on\" onSubmit={handleSubmit(handleSubscribe)}>\r\n              <input\r\n                {...register(\"email\")}\r\n                className=\"form_modal_input\"\r\n                placeholder=\"Enter your mail\"\r\n                id=\"email\"\r\n                type=\"email\"\r\n                maxLength={50}\r\n              />\r\n              <p\r\n                style={{\r\n                  fontSize: \"12px\",\r\n                  color: \"#FF0000\",\r\n                  fontFamily: \"Poppins\",\r\n                  fontStyle: \"normal\",\r\n                  fontWeight: 400,\r\n                  lineHeight: \"20px\",\r\n                }}\r\n              >\r\n                {errors.email?.message}\r\n              </p>\r\n              <button\r\n                disabled={loading}\r\n                className=\"form_modal_btn\"\r\n                type=\"submit\"\r\n              >\r\n                Submit Now {loading && <Loading />}\r\n              </button>\r\n            </form>\r\n          </Modal.Body>\r\n        </div>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FormModal;\r\n","import React, { useState } from \"react\";\r\nimport { Country } from \"country-state-city\";\r\nimport { collection, addDoc } from \"firebase/firestore/lite\";\r\nimport { utils } from \"../../core/helper\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as Yup from \"yup\";\r\nimport Loading from \"./loading\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport FormModal from \"./consult\";\r\n\r\nconst emailRegex = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i;\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  name: Yup.string().label(\"Name\").required(),\r\n  contact: Yup.string().label(\"Contact\").required(),\r\n  email: Yup.string()\r\n    .matches(emailRegex, \"Invalid email address\")\r\n    .label(\"Email\")\r\n    .required(),\r\n  country: Yup.string().label(\"Country\").required(),\r\n  mobile: Yup.string().when(\"contact\", ([contactVal], schema) => {\r\n    if (contactVal === \"mobileNum\" && contactVal !== \"\") {\r\n      return schema.label(\"Mobile number\").required();\r\n    }\r\n    if (contactVal === \"whatsapp\" && contactVal !== \"\") {\r\n      return schema.label(\"Whatsapp no\").required();\r\n    }\r\n    if (contactVal === \"telegram\" && contactVal !== \"\") {\r\n      return schema.label(\"Telegram no\").required();\r\n    }\r\n    if (contactVal === \"skype\" && contactVal !== \"\") {\r\n      return schema.label(\"Skype link\").url(\"Invalid Skype link\").required();\r\n    }\r\n  }),\r\n  service: Yup.string().label(\"Service\").required(),\r\n  content: Yup.string().label(\"Content\").required(),\r\n});\r\n\r\nconst MoveForward = (props) => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [consultantShow, setConsultantShow] = React.useState(false);\r\n  const [contactVal, setContactVal] = useState(\"\");\r\n\r\n  const countries = Country.getAllCountries();\r\n\r\n  const handleConsultantTogg = () => {\r\n    setConsultantShow(!consultantShow);\r\n  };\r\n\r\n  const { db } = props;\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n    reset,\r\n    setValue,\r\n    getValues,\r\n    trigger,\r\n  } = useForm({\r\n    resolver: yupResolver(validationSchema),\r\n    mode: \"onChange\",\r\n    criteriaMode: \"firstError\",\r\n  });\r\n  const contactValue = getValues(\"contact\");\r\n\r\n  const handlecontactChange = (e) => {\r\n    const { value } = e.target;\r\n    setValue(\"contact\", value, { shouldValidate: true });\r\n    trigger(\"mobile\");\r\n  };\r\n\r\n  const handleMobileNoChange = (e) => {\r\n    console.log(\"contactValue::\", contactValue);\r\n    const { value } = e.target;\r\n    if (contactValue === (\"telegram\" || \"whatsapp\" || \"mobileNum\")) {\r\n      const regex = /^[0-9\\b]+$/;\r\n      if (value === \"\" || regex.test(value)) {\r\n        setValue(\"mobile\", value, { shouldValidate: true });\r\n        setContactVal(value);\r\n      }\r\n    } else {\r\n      setValue(\"mobile\", value, { shouldValidate: true });\r\n      setContactVal(value);\r\n    }\r\n  };\r\n\r\n  const handleOnSubmit = async (values) => {\r\n    values.date = new Date();\r\n    delete values.contact;\r\n    setLoading(true);\r\n    try {\r\n      // return false\r\n      const clients = collection(db, \"clients\");\r\n      await addDoc(clients, values);\r\n      utils.showSuccssMsg(\"We will contact/talk to you soon\");\r\n      reset();\r\n      setContactVal(\"\");\r\n      setLoading(false);\r\n    } catch (e) {\r\n      utils.showErrMsg(\"Error adding document\");\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <section className=\"justtry_cta_sec\">\r\n      <Container>\r\n        <div className=\"d-flex align-items-center justify-content-center\">\r\n          <Row className=\"justtry_cta_form_wrapper\">\r\n            <Col\r\n              xxl={7}\r\n              xl={6}\r\n              lg={6}\r\n              md={12}\r\n              className=\"d-flex align-items-center justify-content-center\"\r\n            >\r\n              <div className=\"justtry_cta_form_sec\">\r\n                <h2 className=\"text-dark\">\r\n                  Get in <span style={{ color: \"#7534fc\" }}>Touch</span>\r\n                </h2>\r\n                <p>\r\n                  We're available to assist and address any inquiries you may\r\n                  have. We eagerly anticipate receiving your communication.\r\n                </p>\r\n                <form\r\n                  onSubmit={handleSubmit(handleOnSubmit)}\r\n                  className=\"justtry_cta_form\"\r\n                >\r\n                  <div className=\"justtry_cta_form_content\">\r\n                    <div className=\"justtry_cta_form_lhs\">\r\n                      <input\r\n                        placeholder=\"Enter your name\"\r\n                        id=\"full-name\"\r\n                        type=\"text\"\r\n                        {...register(\"name\")}\r\n                        maxLength={30}\r\n                      />\r\n                      <span className=\"error_msg_text\">\r\n                        {errors.name?.message}\r\n                      </span>\r\n                    </div>\r\n                    <div className=\"justtry_cta_form_rhs\">\r\n                      <input\r\n                        placeholder=\"Enter your mail\"\r\n                        id=\"email\"\r\n                        type=\"email\"\r\n                        {...register(\"email\")}\r\n                        maxLength={50}\r\n                      />\r\n                      <span className=\"error_msg_text\">\r\n                        {errors.email?.message}\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"justtry_cta_form_content\">\r\n                    <div className=\"justtry_cta_form_lhs\">\r\n                      <div className=\"justtry_input_grp\">\r\n                        <input\r\n                          className=\"cta_inputs\"\r\n                          {...register(\"mobile\")}\r\n                          placeholder=\"Enter Number\"\r\n                          onChange={(e) => handleMobileNoChange(e)}\r\n                          value={contactVal}\r\n                          type=\"text\"\r\n                          disabled={\r\n                            !contactValue ||\r\n                            contactValue === undefined ||\r\n                            contactValue === \"undefined\"\r\n                          }\r\n                        />\r\n                        <select\r\n                          {...register(\"contact\")}\r\n                          onChange={handlecontactChange}\r\n                          className=\"cta_input_select\"\r\n                        >\r\n                          <option value=\"\" selected disabled>\r\n                            Select\r\n                          </option>\r\n                          <option value={\"mobileNum\"}>Mobile No</option>\r\n                          <option value={\"whatsapp\"}>Whatsapp</option>\r\n                          <option value={\"telegram\"}>Telegram</option>\r\n                          <option value={\"skype\"}>Skype</option>\r\n                        </select>\r\n                      </div>\r\n                      <span className=\"error_msg_text\">\r\n                        {errors.mobile?.message}\r\n                      </span>\r\n                      <span className=\"error_msg_text\">\r\n                        {errors.contact?.message}\r\n                      </span>\r\n                    </div>\r\n                    <div className=\"justtry_cta_form_rhs\">\r\n                      <select id=\"select-where\" {...register(\"country\")}>\r\n                        <option value=\"\">Select your Country</option>\r\n                        {countries.map((ele, ind) => {\r\n                          return (\r\n                            <option key={ind} value={ele.isoCode}>\r\n                              {ele.name}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </select>\r\n                      <span className=\"error_msg_text\">\r\n                        {errors.country?.message}\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"justtry_cta_form_service\">\r\n                    <select {...register(\"service\")}>\r\n                      <option value=\"\">Select your services</option>\r\n                      <option value=\"crypto exchange development\">\r\n                        Crypto Exchange Development\r\n                      </option>\r\n                      <option value=\"nft marketplace development\">\r\n                        NFT Marketplace Development\r\n                      </option>\r\n                      <option value=\"defi development\">DeFi Development</option>\r\n                      <option value=\"metaverse development\">\r\n                        Metaverse Development\r\n                      </option>\r\n                      <option value=\"blockchain solutions\">\r\n                        Blockchain Solutions\r\n                      </option>\r\n                      <option value=\"web 3.0 development\">\r\n                        Web 3.0 Development\r\n                      </option>\r\n                      <option value=\"crypto wallet development\">\r\n                        Crypto Wallet Development\r\n                      </option>\r\n                      <option value=\"custom software development\">\r\n                        Custom Software Development\r\n                      </option>\r\n                      <option value=\"mobile app development services\">\r\n                        Mobile App Development Services\r\n                      </option>\r\n                      <option value=\"artificial intelligence solutions\">\r\n                        Artificial Intelligence Solutions\r\n                      </option>\r\n                      <option value=\"others\"> Others</option>\r\n                    </select>\r\n                    <span className=\"error_msg_text\">\r\n                      {errors.service?.message}\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"justtry_cta_textarea\">\r\n                    <textarea\r\n                      placeholder=\"Text your message here...\"\r\n                      id=\"content\"\r\n                      rows={5}\r\n                      {...register(\"content\")}\r\n                      maxLength={200}\r\n                    />\r\n                    <span className=\"error_msg_text\">\r\n                      {errors.content?.message}\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"justtry_cta_sumbit\">\r\n                    <button\r\n                      className=\"form_submit_btn\"\r\n                      disabled={loading}\r\n                      type=\"submit\"\r\n                    >\r\n                      Submit Now {loading && <Loading />}\r\n                    </button>\r\n                    <button\r\n                      className=\"form_consult_btn\"\r\n                      onClick={handleConsultantTogg}\r\n                      type=\"button\"\r\n                    >\r\n                      Free consult\r\n                    </button>\r\n                  </div>\r\n                </form>\r\n                <FormModal\r\n                  onAddProps={props}\r\n                  show={consultantShow}\r\n                  onHide={handleConsultantTogg}\r\n                />\r\n              </div>\r\n            </Col>\r\n            <Col\r\n              xxl={5}\r\n              xl={6}\r\n              lg={6}\r\n              md={12}\r\n              className=\"d-flex align-items-center justify-content-center\"\r\n            >\r\n              <div className=\"justtry_cta_map_sec\">\r\n                <iframe\r\n                  title=\"Justtry Office\"\r\n                  src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3930.2126470840517!2d78.1340045741623!3d9.916240074472167!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x3b00c539e6118b11%3A0x6c3891e5d1526c93!2sJusttry%20Technologies!5e0!3m2!1sen!2sin!4v1694181975876!5m2!1sen!2sin\"\r\n                  className=\"map_frame\"\r\n                  allowFullScreen=\"\"\r\n                  loading=\"lazy\"\r\n                  referrerPolicy=\"no-referrer-when-downgrade\"\r\n                ></iframe>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </Container>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default MoveForward;\r\n","import React, { Fragment, useState } from \"react\";\r\nimport TalkToUsPopup from \"./talk-to-us-popup\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as Yup from \"yup\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { Country } from \"country-state-city\";\r\nimport { collection, addDoc } from \"firebase/firestore/lite\";\r\nimport { utils } from \"../../core/helper\";\r\nimport Loading from \"./loading\";\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  name: Yup.string().label(\"Name\").required(),\r\n  email: Yup.string().label(\"Email\").required(),\r\n  country: Yup.string().label(\"Country\").required(),\r\n  mobile: Yup.string().label(\"Contact\").required(),\r\n  content: Yup.string().label(\"Content\").required(),\r\n  service: Yup.string().label(\"Service\").required(),\r\n});\r\n\r\nconst TalkToUsNew = (props) => {\r\n  const { db, label = \"TALK TO US\", isFor } = props;\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [talkToUsShow, setTalkToUsShow] = useState(false);\r\n\r\n  const countries = Country.getAllCountries();\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n    reset,\r\n  } = useForm({\r\n    resolver: yupResolver(validationSchema),\r\n  });\r\n\r\n  // useEffect(() => {\r\n  //   handleToggleTalkToUs(); //children function of interest\r\n  // }, [props.togglePopup]);\r\n\r\n  const handleToggleTalkToUs = () => {\r\n    console.log(\"handleToggleTalkToUs\");\r\n    setTalkToUsShow(!talkToUsShow);\r\n    reset();\r\n  };\r\n\r\n  const handleOnSubmit = async (values) => {\r\n    const { name, email, country, content, mobile, service } = values;\r\n    const payload = {\r\n      name,\r\n      email,\r\n      country,\r\n      content,\r\n      mobile,\r\n      service,\r\n      date: new Date(),\r\n    };\r\n    setLoading(true);\r\n    try {\r\n      const clients = collection(db, \"clients\");\r\n      await addDoc(clients, payload);\r\n      utils.showSuccssMsg(\"We will contact/talk to you soon\");\r\n      reset();\r\n      setLoading(false);\r\n      setTimeout(() => {\r\n        handleToggleTalkToUs();\r\n      }, 1000);\r\n    } catch (e) {\r\n      utils.showErrMsg(\"Error adding document\");\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getButtonFor = (isFor) => {\r\n    switch (isFor) {\r\n      case \"banner\":\r\n        return (\r\n          <span className=\"primary_btn\" onClick={handleToggleTalkToUs}>\r\n            {label}\r\n          </span>\r\n        );\r\n      case \"about\":\r\n        return (\r\n          <span className=\"about_rhs_btn\" onClick={handleToggleTalkToUs}>\r\n            {label}\r\n          </span>\r\n        );\r\n      case \"cta\":\r\n        return (\r\n          <span className=\"cta_btn_div\" onClick={handleToggleTalkToUs}>\r\n            {label}\r\n          </span>\r\n        );\r\n      default:\r\n        return (\r\n          <span className=\"primary_btn\" onClick={handleToggleTalkToUs}>\r\n            {label}\r\n          </span>\r\n        );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      {getButtonFor(isFor)}\r\n      {/* {isFor === \"banner\" ? (\r\n        <button  className=\"primary_btn\" type=\"button\"  onClick={handleToggleTalkToUs}>\r\n          {label}\r\n        </button>\r\n      ) : (\r\n        <button className=\"header_custom_btn\" onClick={handleToggleTalkToUs}>\r\n          {label}\r\n        </button>\r\n      )} */}\r\n      <TalkToUsPopup\r\n        show={talkToUsShow}\r\n        onHide={handleToggleTalkToUs}\r\n        closeButton={true}\r\n        size={\"lg\"}\r\n        backdrop=\"static\"\r\n        keyboard={false}\r\n      >\r\n        <div className=\"screen__content\">\r\n          <form onSubmit={handleSubmit(handleOnSubmit)} className=\"login\">\r\n            <div className=\"login__field\">\r\n              <i className=\"login__icon fas fa-user\"></i>\r\n              <input\r\n                type=\"text\"\r\n                className=\"login__input\"\r\n                {...register(\"name\")}\r\n                placeholder=\"Your Name\"\r\n              />\r\n              <p className=\"text-danger mb-0\">{errors.name?.message}</p>\r\n            </div>\r\n\r\n            <div className=\"login__field\">\r\n              <input\r\n                type=\"email\"\r\n                className=\"login__input\"\r\n                {...register(\"email\")}\r\n                placeholder=\"Email\"\r\n              />\r\n              <p className=\"text-danger mb-0\">{errors.email?.message}</p>\r\n            </div>\r\n            <div className=\"login__field\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"login__input\"\r\n                placeholder=\"Skype / Mobile / Whatsapp\"\r\n                {...register(\"mobile\")}\r\n              />\r\n              <p className=\"text-danger mb-0\">{errors.mobile?.message}</p>\r\n            </div>\r\n            <div className=\"login__field\">\r\n              <select className=\"login__input\" {...register(\"service\")}>\r\n                <option value=\"\">Select your services</option>\r\n                <option value=\"crypto exchange development\">\r\n                  Crypto Exchange Development\r\n                </option>\r\n                <option value=\"nft marketplace development\">\r\n                  NFT Marketplace Development\r\n                </option>\r\n                <option value=\"defi development\">DeFi Development</option>\r\n                <option value=\"metaverse development\">\r\n                  Metaverse Development\r\n                </option>\r\n                <option value=\"blockchain solutions\">\r\n                  Blockchain Solutions\r\n                </option>\r\n                <option value=\"web 3.0 development\">Web 3.0 Development</option>\r\n                <option value=\"crypto wallet development\">\r\n                  Crypto Wallet Development\r\n                </option>\r\n                <option value=\"custom software development\">\r\n                  Custom Software Development\r\n                </option>\r\n                <option value=\"mobile app development services\">\r\n                  Mobile App Development Services\r\n                </option>\r\n                <option value=\"artificial intelligence solutions\">\r\n                  Artificial Intelligence Solutions\r\n                </option>\r\n                <option value=\"others\"> Others</option>\r\n              </select>\r\n              <p className=\"text-danger mb-0\">{errors.service?.message}</p>\r\n            </div>\r\n            <div className=\"login__field\">\r\n              <select className=\"login__input\" {...register(\"country\")}>\r\n                <option value=\"\">Select Country</option>\r\n                {countries.map((ele, ind) => {\r\n                  return (\r\n                    <option key={ind} value={ele.isoCode}>\r\n                      {ele.name}\r\n                    </option>\r\n                  );\r\n                })}\r\n              </select>\r\n              <p className=\"text-danger mb-0\">{errors.country?.message}</p>\r\n            </div>\r\n            <div className=\"login__field\">\r\n              <textarea\r\n                id=\"content\"\r\n                placeholder=\"Type content here\"\r\n                rows={5}\r\n                className=\"login__input\"\r\n                {...register(\"content\")}\r\n                maxLength={500}\r\n              ></textarea>\r\n              <p className=\"text-danger mb-0\">{errors.content?.message}</p>\r\n            </div>\r\n            <button\r\n              type=\"submit\"\r\n              disabled={loading}\r\n              className=\"button login__submit\"\r\n            >\r\n              <span className=\"button__text\">\r\n                {\" \"}\r\n                Submit {loading && <Loading />}\r\n              </span>\r\n              <i className=\"button__icon fas fa-chevron-right\"></i>\r\n            </button>\r\n          </form>\r\n        </div>\r\n        <div className=\"screen__background\">\r\n          <span className=\"screen__background__shape screen__background__shape4\"></span>\r\n          <span className=\"screen__background__shape screen__background__shape3\"></span>\r\n          <span className=\"screen__background__shape screen__background__shape2\"></span>\r\n          <span className=\"screen__background__shape screen__background__shape1\"></span>\r\n        </div>\r\n      </TalkToUsPopup>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default TalkToUsNew;\r\n","import React from \"react\";\r\nimport { Modal } from \"react-bootstrap\";\r\n\r\nconst TalkToUsPopup = (props) => {\r\n  const { show, onHide, closeButton, size, children, backdrop } = props;\r\n\r\n  return (\r\n    <Modal\r\n      scrollable={false}\r\n      size={size}\r\n      centered\r\n      backdrop={backdrop}\r\n      keyboard={false}\r\n      show={show}\r\n      onHide={onHide}\r\n      className=\"custom-modal\"\r\n    >\r\n      <Modal.Header className=\"border-0\" closeButton={closeButton}>\r\n        <Modal.Title className=\"font-weight-normal fs-2\">\r\n          Talk To Us\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>{children}</Modal.Body>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default TalkToUsPopup;\r\n","import * as React from 'react';\nexport function isAccordionItemSelected(activeEventKey, eventKey) {\n  return Array.isArray(activeEventKey) ? activeEventKey.includes(eventKey) : activeEventKey === eventKey;\n}\nconst context = /*#__PURE__*/React.createContext({});\ncontext.displayName = 'AccordionContext';\nexport default context;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport Collapse from './Collapse';\nimport AccordionContext, { isAccordionItemSelected } from './AccordionContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n/**\n * This component accepts all of [`Collapse`'s props](/docs/utilities/transitions#collapse-1).\n */\nconst AccordionCollapse = /*#__PURE__*/React.forwardRef(({\n  as: Component = 'div',\n  bsPrefix,\n  className,\n  children,\n  eventKey,\n  ...props\n}, ref) => {\n  const {\n    activeEventKey\n  } = useContext(AccordionContext);\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'accordion-collapse');\n  return /*#__PURE__*/_jsx(Collapse, {\n    ref: ref,\n    in: isAccordionItemSelected(activeEventKey, eventKey),\n    ...props,\n    className: classNames(className, bsPrefix),\n    children: /*#__PURE__*/_jsx(Component, {\n      children: React.Children.only(children)\n    })\n  });\n});\nAccordionCollapse.displayName = 'AccordionCollapse';\nexport default AccordionCollapse;","import * as React from 'react';\nconst context = /*#__PURE__*/React.createContext({\n  eventKey: ''\n});\ncontext.displayName = 'AccordionItemContext';\nexport default context;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport AccordionCollapse from './AccordionCollapse';\nimport AccordionItemContext from './AccordionItemContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst AccordionBody = /*#__PURE__*/React.forwardRef(({\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  bsPrefix,\n  className,\n  onEnter,\n  onEntering,\n  onEntered,\n  onExit,\n  onExiting,\n  onExited,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'accordion-body');\n  const {\n    eventKey\n  } = useContext(AccordionItemContext);\n  return /*#__PURE__*/_jsx(AccordionCollapse, {\n    eventKey: eventKey,\n    onEnter: onEnter,\n    onEntering: onEntering,\n    onEntered: onEntered,\n    onExit: onExit,\n    onExiting: onExiting,\n    onExited: onExited,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, bsPrefix)\n    })\n  });\n});\nAccordionBody.displayName = 'AccordionBody';\nexport default AccordionBody;","import * as React from 'react';\nimport { useContext } from 'react';\nimport classNames from 'classnames';\nimport AccordionContext, { isAccordionItemSelected } from './AccordionContext';\nimport AccordionItemContext from './AccordionItemContext';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function useAccordionButton(eventKey, onClick) {\n  const {\n    activeEventKey,\n    onSelect,\n    alwaysOpen\n  } = useContext(AccordionContext);\n  return e => {\n    /*\n      Compare the event key in context with the given event key.\n      If they are the same, then collapse the component.\n    */\n    let eventKeyPassed = eventKey === activeEventKey ? null : eventKey;\n    if (alwaysOpen) {\n      if (Array.isArray(activeEventKey)) {\n        if (activeEventKey.includes(eventKey)) {\n          eventKeyPassed = activeEventKey.filter(k => k !== eventKey);\n        } else {\n          eventKeyPassed = [...activeEventKey, eventKey];\n        }\n      } else {\n        // activeEventKey is undefined.\n        eventKeyPassed = [eventKey];\n      }\n    }\n    onSelect == null ? void 0 : onSelect(eventKeyPassed, e);\n    onClick == null ? void 0 : onClick(e);\n  };\n}\nconst AccordionButton = /*#__PURE__*/React.forwardRef(({\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'button',\n  bsPrefix,\n  className,\n  onClick,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'accordion-button');\n  const {\n    eventKey\n  } = useContext(AccordionItemContext);\n  const accordionOnClick = useAccordionButton(eventKey, onClick);\n  const {\n    activeEventKey\n  } = useContext(AccordionContext);\n  if (Component === 'button') {\n    props.type = 'button';\n  }\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    onClick: accordionOnClick,\n    ...props,\n    \"aria-expanded\": Array.isArray(activeEventKey) ? activeEventKey.includes(eventKey) : eventKey === activeEventKey,\n    className: classNames(className, bsPrefix, !isAccordionItemSelected(activeEventKey, eventKey) && 'collapsed')\n  });\n});\nAccordionButton.displayName = 'AccordionButton';\nexport default AccordionButton;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport AccordionButton from './AccordionButton';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst AccordionHeader = /*#__PURE__*/React.forwardRef(({\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'h2',\n  bsPrefix,\n  className,\n  children,\n  onClick,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'accordion-header');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, bsPrefix),\n    children: /*#__PURE__*/_jsx(AccordionButton, {\n      onClick: onClick,\n      children: children\n    })\n  });\n});\nAccordionHeader.displayName = 'AccordionHeader';\nexport default AccordionHeader;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport AccordionItemContext from './AccordionItemContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst AccordionItem = /*#__PURE__*/React.forwardRef(({\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  bsPrefix,\n  className,\n  eventKey,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'accordion-item');\n  const contextValue = useMemo(() => ({\n    eventKey\n  }), [eventKey]);\n  return /*#__PURE__*/_jsx(AccordionItemContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, bsPrefix)\n    })\n  });\n});\nAccordionItem.displayName = 'AccordionItem';\nexport default AccordionItem;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useUncontrolled } from 'uncontrollable';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport AccordionBody from './AccordionBody';\nimport AccordionButton from './AccordionButton';\nimport AccordionCollapse from './AccordionCollapse';\nimport AccordionContext from './AccordionContext';\nimport AccordionHeader from './AccordionHeader';\nimport AccordionItem from './AccordionItem';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Accordion = /*#__PURE__*/React.forwardRef((props, ref) => {\n  const {\n    // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n    as: Component = 'div',\n    activeKey,\n    bsPrefix,\n    className,\n    onSelect,\n    flush,\n    alwaysOpen,\n    ...controlledProps\n  } = useUncontrolled(props, {\n    activeKey: 'onSelect'\n  });\n  const prefix = useBootstrapPrefix(bsPrefix, 'accordion');\n  const contextValue = useMemo(() => ({\n    activeEventKey: activeKey,\n    onSelect,\n    alwaysOpen\n  }), [activeKey, onSelect, alwaysOpen]);\n  return /*#__PURE__*/_jsx(AccordionContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...controlledProps,\n      className: classNames(className, prefix, flush && `${prefix}-flush`)\n    })\n  });\n});\nAccordion.displayName = 'Accordion';\nexport default Object.assign(Accordion, {\n  Button: AccordionButton,\n  Collapse: AccordionCollapse,\n  Item: AccordionItem,\n  Header: AccordionHeader,\n  Body: AccordionBody\n});"],"names":["_ref","faqData","React","className","Container","Row","Col","xxl","xl","lg","md","sm","Accordion","map","item","index","Item","key","eventKey","toString","Header","question","Body","answer","validationSchema","Yup","shape","email","label","required","props","_errors$email","loading","setLoading","useState","register","handleSubmit","formState","errors","reset","useForm","resolver","yupResolver","Modal","Object","assign","size","Title","autoComplete","onSubmit","async","values","resp","addToMailchimp","result","utils","msg","placeholder","id","type","maxLength","style","fontSize","color","fontFamily","fontStyle","fontWeight","lineHeight","message","disabled","Loading","name","contact","matches","country","mobile","when","schema","contactVal","url","service","content","_errors$name","_errors$mobile","_errors$contact","_errors$country","_errors$service","_errors$content","consultantShow","setConsultantShow","setContactVal","countries","Country","getAllCountries","handleConsultantTogg","db","setValue","getValues","trigger","mode","criteriaMode","contactValue","date","Date","clients","collection","addDoc","e","onChange","console","log","value","target","test","shouldValidate","handleMobileNoChange","undefined","selected","ele","ind","isoCode","rows","onClick","FormModal","onAddProps","show","onHide","title","src","allowFullScreen","referrerPolicy","isFor","talkToUsShow","setTalkToUsShow","handleToggleTalkToUs","Fragment","getButtonFor","TalkToUsPopup","closeButton","backdrop","keyboard","payload","setTimeout","children","scrollable","centered","isAccordionItemSelected","activeEventKey","Array","isArray","includes","context","displayName","AccordionCollapse","as","Component","bsPrefix","ref","useContext","AccordionContext","Collapse","in","only","AccordionBody","onEnter","onEntering","onEntered","onExit","onExiting","onExited","AccordionItemContext","AccordionButton","accordionOnClick","onSelect","alwaysOpen","eventKeyPassed","filter","k","useAccordionButton","AccordionHeader","AccordionItem","contextValue","useMemo","Provider","activeKey","flush","controlledProps","prefix","Button"],"sourceRoot":""}