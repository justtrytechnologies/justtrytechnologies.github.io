{"version":3,"file":"589-0d484fc30cf2c0e9a6ff.js","mappings":"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","sources":["webpack://justtry-app/./node_modules/react-bootstrap/esm/AccordionContext.js","webpack://justtry-app/./node_modules/react-bootstrap/esm/AccordionCollapse.js","webpack://justtry-app/./node_modules/react-bootstrap/esm/AccordionItemContext.js","webpack://justtry-app/./node_modules/react-bootstrap/esm/AccordionBody.js","webpack://justtry-app/./node_modules/react-bootstrap/esm/AccordionButton.js","webpack://justtry-app/./node_modules/react-bootstrap/esm/AccordionHeader.js","webpack://justtry-app/./node_modules/react-bootstrap/esm/AccordionItem.js","webpack://justtry-app/./node_modules/react-bootstrap/esm/Accordion.js","webpack://justtry-app/./src/components/common/faq.js"],"sourcesContent":["\"use client\";\n\nimport * as React from 'react';\nexport function isAccordionItemSelected(activeEventKey, eventKey) {\n  return Array.isArray(activeEventKey) ? activeEventKey.includes(eventKey) : activeEventKey === eventKey;\n}\nconst context = /*#__PURE__*/React.createContext({});\ncontext.displayName = 'AccordionContext';\nexport default context;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport Collapse from './Collapse';\nimport AccordionContext, { isAccordionItemSelected } from './AccordionContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n/**\n * This component accepts all of [`Collapse`'s props](/docs/utilities/transitions#collapse-1).\n */\nconst AccordionCollapse = /*#__PURE__*/React.forwardRef(({\n  as: Component = 'div',\n  bsPrefix,\n  className,\n  children,\n  eventKey,\n  ...props\n}, ref) => {\n  const {\n    activeEventKey\n  } = useContext(AccordionContext);\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'accordion-collapse');\n  return /*#__PURE__*/_jsx(Collapse, {\n    ref: ref,\n    in: isAccordionItemSelected(activeEventKey, eventKey),\n    ...props,\n    className: classNames(className, bsPrefix),\n    children: /*#__PURE__*/_jsx(Component, {\n      children: React.Children.only(children)\n    })\n  });\n});\nAccordionCollapse.displayName = 'AccordionCollapse';\nexport default AccordionCollapse;","\"use client\";\n\nimport * as React from 'react';\nconst context = /*#__PURE__*/React.createContext({\n  eventKey: ''\n});\ncontext.displayName = 'AccordionItemContext';\nexport default context;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport AccordionCollapse from './AccordionCollapse';\nimport AccordionItemContext from './AccordionItemContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst AccordionBody = /*#__PURE__*/React.forwardRef(({\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  bsPrefix,\n  className,\n  onEnter,\n  onEntering,\n  onEntered,\n  onExit,\n  onExiting,\n  onExited,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'accordion-body');\n  const {\n    eventKey\n  } = useContext(AccordionItemContext);\n  return /*#__PURE__*/_jsx(AccordionCollapse, {\n    eventKey: eventKey,\n    onEnter: onEnter,\n    onEntering: onEntering,\n    onEntered: onEntered,\n    onExit: onExit,\n    onExiting: onExiting,\n    onExited: onExited,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, bsPrefix)\n    })\n  });\n});\nAccordionBody.displayName = 'AccordionBody';\nexport default AccordionBody;","\"use client\";\n\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport classNames from 'classnames';\nimport AccordionContext, { isAccordionItemSelected } from './AccordionContext';\nimport AccordionItemContext from './AccordionItemContext';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function useAccordionButton(eventKey, onClick) {\n  const {\n    activeEventKey,\n    onSelect,\n    alwaysOpen\n  } = useContext(AccordionContext);\n  return e => {\n    /*\n      Compare the event key in context with the given event key.\n      If they are the same, then collapse the component.\n    */\n    let eventKeyPassed = eventKey === activeEventKey ? null : eventKey;\n    if (alwaysOpen) {\n      if (Array.isArray(activeEventKey)) {\n        if (activeEventKey.includes(eventKey)) {\n          eventKeyPassed = activeEventKey.filter(k => k !== eventKey);\n        } else {\n          eventKeyPassed = [...activeEventKey, eventKey];\n        }\n      } else {\n        // activeEventKey is undefined.\n        eventKeyPassed = [eventKey];\n      }\n    }\n    onSelect == null || onSelect(eventKeyPassed, e);\n    onClick == null || onClick(e);\n  };\n}\nconst AccordionButton = /*#__PURE__*/React.forwardRef(({\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'button',\n  bsPrefix,\n  className,\n  onClick,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'accordion-button');\n  const {\n    eventKey\n  } = useContext(AccordionItemContext);\n  const accordionOnClick = useAccordionButton(eventKey, onClick);\n  const {\n    activeEventKey\n  } = useContext(AccordionContext);\n  if (Component === 'button') {\n    props.type = 'button';\n  }\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    onClick: accordionOnClick,\n    ...props,\n    \"aria-expanded\": Array.isArray(activeEventKey) ? activeEventKey.includes(eventKey) : eventKey === activeEventKey,\n    className: classNames(className, bsPrefix, !isAccordionItemSelected(activeEventKey, eventKey) && 'collapsed')\n  });\n});\nAccordionButton.displayName = 'AccordionButton';\nexport default AccordionButton;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport AccordionButton from './AccordionButton';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst AccordionHeader = /*#__PURE__*/React.forwardRef(({\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'h2',\n  'aria-controls': ariaControls,\n  bsPrefix,\n  className,\n  children,\n  onClick,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'accordion-header');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, bsPrefix),\n    children: /*#__PURE__*/_jsx(AccordionButton, {\n      onClick: onClick,\n      \"aria-controls\": ariaControls,\n      children: children\n    })\n  });\n});\nAccordionHeader.displayName = 'AccordionHeader';\nexport default AccordionHeader;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport AccordionItemContext from './AccordionItemContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst AccordionItem = /*#__PURE__*/React.forwardRef(({\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  bsPrefix,\n  className,\n  eventKey,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'accordion-item');\n  const contextValue = useMemo(() => ({\n    eventKey\n  }), [eventKey]);\n  return /*#__PURE__*/_jsx(AccordionItemContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, bsPrefix)\n    })\n  });\n});\nAccordionItem.displayName = 'AccordionItem';\nexport default AccordionItem;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useUncontrolled } from 'uncontrollable';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport AccordionBody from './AccordionBody';\nimport AccordionButton from './AccordionButton';\nimport AccordionCollapse from './AccordionCollapse';\nimport AccordionContext from './AccordionContext';\nimport AccordionHeader from './AccordionHeader';\nimport AccordionItem from './AccordionItem';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Accordion = /*#__PURE__*/React.forwardRef((props, ref) => {\n  const {\n    // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n    as: Component = 'div',\n    activeKey,\n    bsPrefix,\n    className,\n    onSelect,\n    flush,\n    alwaysOpen,\n    ...controlledProps\n  } = useUncontrolled(props, {\n    activeKey: 'onSelect'\n  });\n  const prefix = useBootstrapPrefix(bsPrefix, 'accordion');\n  const contextValue = useMemo(() => ({\n    activeEventKey: activeKey,\n    onSelect,\n    alwaysOpen\n  }), [activeKey, onSelect, alwaysOpen]);\n  return /*#__PURE__*/_jsx(AccordionContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...controlledProps,\n      className: classNames(className, prefix, flush && `${prefix}-flush`)\n    })\n  });\n});\nAccordion.displayName = 'Accordion';\nexport default Object.assign(Accordion, {\n  Button: AccordionButton,\n  Collapse: AccordionCollapse,\n  Item: AccordionItem,\n  Header: AccordionHeader,\n  Body: AccordionBody\n});","import React, { useState } from \"react\";\nimport { Container, Row, Col, Accordion } from \"react-bootstrap\";\n\nconst Faq = ({ faqData }) => {\n  const [visibleItems, setVisibleItems] = useState(4);\n  const [hasMore, setHasMore] = useState(true);\n\n  const handleLoadMore = () => {\n    setVisibleItems(visibleItems + 4);\n    if (visibleItems + 4 >= faqData?.length) {\n      setHasMore(false);\n    }\n  };\n\n  return (\n    <div className=\"faq_outline\">\n      <Container>\n        <Row className=\"faq_row\">\n          <Col xxl={12} xl={12} lg={12} md={12} sm={12} className=\"p-lg-0\">\n            <div className=\"faq_rhs\">\n              <h2 className=\"faq_title\">\n                Resolve your unanswered queries effortlessly\n              </h2>\n              <div className=\"faq_acc_wrapper\">\n                <Accordion>\n                  {faqData?.length > 0 &&\n                    faqData?.slice(0, visibleItems)?.map((item, index) => (\n                      <Accordion.Item key={index} eventKey={index.toString()}>\n                        <Accordion.Header>\n                          <div>{index + 1}.</div>\n                          <div>{item.question}</div>\n                        </Accordion.Header>\n                        <Accordion.Body>{item.answer}</Accordion.Body>\n                      </Accordion.Item>\n                    ))}\n                  {faqData?.length > 4 && hasMore && (\n                    <div\n                      role=\"button\"\n                      tabIndex=\"0\"\n                      className=\"decenter_hero_sec_btn d-flex justify-content-center\"\n                      onKeyDown={(e) => { }}\n                      onClick={handleLoadMore}\n                    >\n                      <button className=\"demo_btn\" >Load More</button>\n                    </div>\n                  )}\n                </Accordion>\n              </div>\n            </div>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n};\n\nexport default Faq;\n"],"names":["isAccordionItemSelected","activeEventKey","eventKey","Array","isArray","includes","context","displayName","AccordionCollapse","as","Component","bsPrefix","className","children","props","ref","useContext","AccordionContext","Collapse","in","only","AccordionBody","onEnter","onEntering","onEntered","onExit","onExiting","onExited","AccordionItemContext","AccordionButton","onClick","accordionOnClick","onSelect","alwaysOpen","e","eventKeyPassed","filter","k","useAccordionButton","type","AccordionHeader","ariaControls","AccordionItem","contextValue","useMemo","Provider","value","Accordion","activeKey","flush","controlledProps","prefix","Object","assign","Button","Item","Header","Body","_ref","_faqData$slice","faqData","visibleItems","setVisibleItems","useState","hasMore","setHasMore","React","Container","Row","Col","xxl","xl","lg","md","sm","length","slice","map","item","index","key","toString","question","answer","role","tabIndex","onKeyDown","handleLoadMore"],"sourceRoot":""}