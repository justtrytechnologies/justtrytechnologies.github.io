{"version":3,"file":"c97d5db8-b3582e2623c0ac8b146c.js","mappings":"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","sources":["webpack://justtry-app/./node_modules/@firebase/firestore/dist/lite/index.browser.esm2017.js"],"sourcesContent":["import { _registerComponent, registerVersion, _getProvider, getApp, _removeServiceInstance, SDK_VERSION } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { Logger, LogLevel } from '@firebase/logger';\nimport { FirebaseError, getDefaultEmulatorHostnameAndPort, createMockUserToken, getModularInstance, deepEqual } from '@firebase/util';\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Simple wrapper around a nullable UID. Mostly exists to make code more\n * readable.\n */\nclass User {\n    constructor(t) {\n        this.uid = t;\n    }\n    isAuthenticated() {\n        return null != this.uid;\n    }\n    /**\n     * Returns a key representing this user, suitable for inclusion in a\n     * dictionary.\n     */    toKey() {\n        return this.isAuthenticated() ? \"uid:\" + this.uid : \"anonymous-user\";\n    }\n    isEqual(t) {\n        return t.uid === this.uid;\n    }\n}\n\n/** A user with a null UID. */ User.UNAUTHENTICATED = new User(null), \n// TODO(mikelehen): Look into getting a proper uid-equivalent for\n// non-FirebaseAuth providers.\nUser.GOOGLE_CREDENTIALS = new User(\"google-credentials-uid\"), User.FIRST_PARTY = new User(\"first-party-uid\"), \nUser.MOCK_USER = new User(\"mock-user\");\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet d = \"10.3.1\";\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst f = new Logger(\"@firebase/firestore\");\n\n/**\n * Sets the verbosity of Cloud Firestore logs (debug, error, or silent).\n *\n * @param logLevel - The verbosity you set for activity and error logging. Can\n *   be any of the following values:\n *\n *   <ul>\n *     <li>`debug` for the most verbose logging level, primarily for\n *     debugging.</li>\n *     <li>`error` to log errors only.</li>\n *     <li><code>`silent` to turn off logging.</li>\n *   </ul>\n */ function setLogLevel(t) {\n    f.setLogLevel(t);\n}\n\nfunction __PRIVATE_logDebug(t, ...e) {\n    if (f.logLevel <= LogLevel.DEBUG) {\n        const r = e.map(__PRIVATE_argToString);\n        f.debug(`Firestore (${d}): ${t}`, ...r);\n    }\n}\n\nfunction __PRIVATE_logError(t, ...e) {\n    if (f.logLevel <= LogLevel.ERROR) {\n        const r = e.map(__PRIVATE_argToString);\n        f.error(`Firestore (${d}): ${t}`, ...r);\n    }\n}\n\n/**\n * @internal\n */ function __PRIVATE_logWarn(t, ...e) {\n    if (f.logLevel <= LogLevel.WARN) {\n        const r = e.map(__PRIVATE_argToString);\n        f.warn(`Firestore (${d}): ${t}`, ...r);\n    }\n}\n\n/**\n * Converts an additional log parameter to a string representation.\n */ function __PRIVATE_argToString(t) {\n    if (\"string\" == typeof t) return t;\n    try {\n        /**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n        /** Formats an object as a JSON string, suitable for logging. */\n        return function __PRIVATE_formatJSON(t) {\n            return JSON.stringify(t);\n        }(t);\n    } catch (e) {\n        // Converting to JSON failed, just log the object directly\n        return t;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Unconditionally fails, throwing an Error with the given message.\n * Messages are stripped in production builds.\n *\n * Returns `never` and can be used in expressions:\n * @example\n * let futureVar = fail('not implemented yet');\n */ function fail(t = \"Unexpected state\") {\n    // Log the failure in addition to throw an exception, just in case the\n    // exception is swallowed.\n    const e = `FIRESTORE (${d}) INTERNAL ASSERTION FAILED: ` + t;\n    // NOTE: We don't use FirestoreError here because these are internal failures\n    // that cannot be handled by the user. (Also it would create a circular\n    // dependency between the error and assert modules which doesn't work.)\n    throw __PRIVATE_logError(e), new Error(e);\n}\n\n/**\n * Fails if the given assertion condition is false, throwing an Error with the\n * given message if it did.\n *\n * Messages are stripped in production builds.\n */ function __PRIVATE_hardAssert(t, e) {\n    t || fail();\n}\n\n/**\n * Casts `obj` to `T`. In non-production builds, verifies that `obj` is an\n * instance of `T` before casting.\n */ function __PRIVATE_debugCast(t, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ne) {\n    return t;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ const E = \"ok\", m = \"cancelled\", A = \"unknown\", T = \"invalid-argument\", P = \"deadline-exceeded\", R = \"not-found\", I = \"already-exists\", V = \"permission-denied\", p = \"unauthenticated\", y = \"resource-exhausted\", w = \"failed-precondition\", g = \"aborted\", F = \"out-of-range\", v = \"unimplemented\", D = \"internal\", b = \"unavailable\", C = \"data-loss\";\n\n/** An error returned by a Firestore operation. */ class FirestoreError extends FirebaseError {\n    /** @hideconstructor */\n    constructor(\n    /**\n     * The backend error code associated with this error.\n     */\n    t, \n    /**\n     * A custom error description.\n     */\n    e) {\n        super(t, e), this.code = t, this.message = e, \n        // HACK: We write a toString property directly because Error is not a real\n        // class and so inheritance does not work correctly. We could alternatively\n        // do the same \"back-door inheritance\" trick that FirebaseError does.\n        this.toString = () => `${this.name}: [code=${this.code}]: ${this.message}`;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ class __PRIVATE_Deferred {\n    constructor() {\n        this.promise = new Promise(((t, e) => {\n            this.resolve = t, this.reject = e;\n        }));\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ class __PRIVATE_OAuthToken {\n    constructor(t, e) {\n        this.user = e, this.type = \"OAuth\", this.headers = new Map, this.headers.set(\"Authorization\", `Bearer ${t}`);\n    }\n}\n\n/**\n * A CredentialsProvider that always yields an empty token.\n * @internal\n */ class __PRIVATE_EmptyAuthCredentialsProvider {\n    getToken() {\n        return Promise.resolve(null);\n    }\n    invalidateToken() {}\n    start(t, e) {\n        // Fire with initial user.\n        t.enqueueRetryable((() => e(User.UNAUTHENTICATED)));\n    }\n    shutdown() {}\n}\n\n/**\n * A CredentialsProvider that always returns a constant token. Used for\n * emulator token mocking.\n */ class __PRIVATE_EmulatorAuthCredentialsProvider {\n    constructor(t) {\n        this.token = t, \n        /**\n         * Stores the listener registered with setChangeListener()\n         * This isn't actually necessary since the UID never changes, but we use this\n         * to verify the listen contract is adhered to in tests.\n         */\n        this.changeListener = null;\n    }\n    getToken() {\n        return Promise.resolve(this.token);\n    }\n    invalidateToken() {}\n    start(t, e) {\n        this.changeListener = e, \n        // Fire with initial user.\n        t.enqueueRetryable((() => e(this.token.user)));\n    }\n    shutdown() {\n        this.changeListener = null;\n    }\n}\n\n/** Credential provider for the Lite SDK. */ class __PRIVATE_LiteAuthCredentialsProvider {\n    constructor(t) {\n        this.auth = null, t.onInit((t => {\n            this.auth = t;\n        }));\n    }\n    getToken() {\n        return this.auth ? this.auth.getToken().then((t => t ? (__PRIVATE_hardAssert(\"string\" == typeof t.accessToken), \n        new __PRIVATE_OAuthToken(t.accessToken, new User(this.auth.getUid()))) : null)) : Promise.resolve(null);\n    }\n    invalidateToken() {}\n    start(t, e) {}\n    shutdown() {}\n}\n\n/*\n * FirstPartyToken provides a fresh token each time its value\n * is requested, because if the token is too old, requests will be rejected.\n * Technically this may no longer be necessary since the SDK should gracefully\n * recover from unauthenticated errors (see b/33147818 for context), but it's\n * safer to keep the implementation as-is.\n */ class __PRIVATE_FirstPartyToken {\n    constructor(t, e, r) {\n        this.t = t, this.i = e, this.o = r, this.type = \"FirstParty\", this.user = User.FIRST_PARTY, \n        this.u = new Map;\n    }\n    /**\n     * Gets an authorization token, using a provided factory function, or return\n     * null.\n     */    l() {\n        return this.o ? this.o() : null;\n    }\n    get headers() {\n        this.u.set(\"X-Goog-AuthUser\", this.t);\n        // Use array notation to prevent minification\n        const t = this.l();\n        return t && this.u.set(\"Authorization\", t), this.i && this.u.set(\"X-Goog-Iam-Authorization-Token\", this.i), \n        this.u;\n    }\n}\n\n/*\n * Provides user credentials required for the Firestore JavaScript SDK\n * to authenticate the user, using technique that is only available\n * to applications hosted by Google.\n */ class __PRIVATE_FirstPartyAuthCredentialsProvider {\n    constructor(t, e, r) {\n        this.t = t, this.i = e, this.o = r;\n    }\n    getToken() {\n        return Promise.resolve(new __PRIVATE_FirstPartyToken(this.t, this.i, this.o));\n    }\n    start(t, e) {\n        // Fire with initial uid.\n        t.enqueueRetryable((() => e(User.FIRST_PARTY)));\n    }\n    shutdown() {}\n    invalidateToken() {}\n}\n\nclass AppCheckToken {\n    constructor(t) {\n        this.value = t, this.type = \"AppCheck\", this.headers = new Map, t && t.length > 0 && this.headers.set(\"x-firebase-appcheck\", this.value);\n    }\n}\n\n/** AppCheck token provider for the Lite SDK. */ class __PRIVATE_LiteAppCheckTokenProvider {\n    constructor(t) {\n        this.h = t, this.appCheck = null, t.onInit((t => {\n            this.appCheck = t;\n        }));\n    }\n    getToken() {\n        return this.appCheck ? this.appCheck.getToken().then((t => t ? (__PRIVATE_hardAssert(\"string\" == typeof t.token), \n        new AppCheckToken(t.token)) : null)) : Promise.resolve(null);\n    }\n    invalidateToken() {}\n    start(t, e) {}\n    shutdown() {}\n}\n\n/**\n * Builds a CredentialsProvider depending on the type of\n * the credentials passed in.\n */\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass DatabaseInfo {\n    /**\n     * Constructs a DatabaseInfo using the provided host, databaseId and\n     * persistenceKey.\n     *\n     * @param databaseId - The database to use.\n     * @param appId - The Firebase App Id.\n     * @param persistenceKey - A unique identifier for this Firestore's local\n     * storage (used in conjunction with the databaseId).\n     * @param host - The Firestore backend host to connect to.\n     * @param ssl - Whether to use SSL when connecting.\n     * @param forceLongPolling - Whether to use the forceLongPolling option\n     * when using WebChannel as the network transport.\n     * @param autoDetectLongPolling - Whether to use the detectBufferingProxy\n     * option when using WebChannel as the network transport.\n     * @param longPollingOptions Options that configure long-polling.\n     * @param useFetchStreams Whether to use the Fetch API instead of\n     * XMLHTTPRequest\n     */\n    constructor(t, e, r, n, i, s, o, a, u) {\n        this.databaseId = t, this.appId = e, this.persistenceKey = r, this.host = n, this.ssl = i, \n        this.forceLongPolling = s, this.autoDetectLongPolling = o, this.longPollingOptions = a, \n        this.useFetchStreams = u;\n    }\n}\n\n/** The default database name for a project. */\n/**\n * Represents the database ID a Firestore client is associated with.\n * @internal\n */\nclass DatabaseId {\n    constructor(t, e) {\n        this.projectId = t, this.database = e || \"(default)\";\n    }\n    static empty() {\n        return new DatabaseId(\"\", \"\");\n    }\n    get isDefaultDatabase() {\n        return \"(default)\" === this.database;\n    }\n    isEqual(t) {\n        return t instanceof DatabaseId && t.projectId === this.projectId && t.database === this.database;\n    }\n}\n\n/**\n * Path represents an ordered sequence of string segments.\n */\nclass BasePath {\n    constructor(t, e, r) {\n        void 0 === e ? e = 0 : e > t.length && fail(), void 0 === r ? r = t.length - e : r > t.length - e && fail(), \n        this.segments = t, this.offset = e, this.len = r;\n    }\n    get length() {\n        return this.len;\n    }\n    isEqual(t) {\n        return 0 === BasePath.comparator(this, t);\n    }\n    child(t) {\n        const e = this.segments.slice(this.offset, this.limit());\n        return t instanceof BasePath ? t.forEach((t => {\n            e.push(t);\n        })) : e.push(t), this.construct(e);\n    }\n    /** The index of one past the last segment of the path. */    limit() {\n        return this.offset + this.length;\n    }\n    popFirst(t) {\n        return t = void 0 === t ? 1 : t, this.construct(this.segments, this.offset + t, this.length - t);\n    }\n    popLast() {\n        return this.construct(this.segments, this.offset, this.length - 1);\n    }\n    firstSegment() {\n        return this.segments[this.offset];\n    }\n    lastSegment() {\n        return this.get(this.length - 1);\n    }\n    get(t) {\n        return this.segments[this.offset + t];\n    }\n    isEmpty() {\n        return 0 === this.length;\n    }\n    isPrefixOf(t) {\n        if (t.length < this.length) return !1;\n        for (let e = 0; e < this.length; e++) if (this.get(e) !== t.get(e)) return !1;\n        return !0;\n    }\n    isImmediateParentOf(t) {\n        if (this.length + 1 !== t.length) return !1;\n        for (let e = 0; e < this.length; e++) if (this.get(e) !== t.get(e)) return !1;\n        return !0;\n    }\n    forEach(t) {\n        for (let e = this.offset, r = this.limit(); e < r; e++) t(this.segments[e]);\n    }\n    toArray() {\n        return this.segments.slice(this.offset, this.limit());\n    }\n    static comparator(t, e) {\n        const r = Math.min(t.length, e.length);\n        for (let n = 0; n < r; n++) {\n            const r = t.get(n), i = e.get(n);\n            if (r < i) return -1;\n            if (r > i) return 1;\n        }\n        return t.length < e.length ? -1 : t.length > e.length ? 1 : 0;\n    }\n}\n\n/**\n * A slash-separated path for navigating resources (documents and collections)\n * within Firestore.\n *\n * @internal\n */ class ResourcePath extends BasePath {\n    construct(t, e, r) {\n        return new ResourcePath(t, e, r);\n    }\n    canonicalString() {\n        // NOTE: The client is ignorant of any path segments containing escape\n        // sequences (e.g. __id123__) and just passes them through raw (they exist\n        // for legacy reasons and should not be used frequently).\n        return this.toArray().join(\"/\");\n    }\n    toString() {\n        return this.canonicalString();\n    }\n    /**\n     * Creates a resource path from the given slash-delimited string. If multiple\n     * arguments are provided, all components are combined. Leading and trailing\n     * slashes from all components are ignored.\n     */    static fromString(...t) {\n        // NOTE: The client is ignorant of any path segments containing escape\n        // sequences (e.g. __id123__) and just passes them through raw (they exist\n        // for legacy reasons and should not be used frequently).\n        const e = [];\n        for (const r of t) {\n            if (r.indexOf(\"//\") >= 0) throw new FirestoreError(T, `Invalid segment (${r}). Paths must not contain // in them.`);\n            // Strip leading and traling slashed.\n                        e.push(...r.split(\"/\").filter((t => t.length > 0)));\n        }\n        return new ResourcePath(e);\n    }\n    static emptyPath() {\n        return new ResourcePath([]);\n    }\n}\n\nconst S = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\n\n/**\n * A dot-separated path for navigating sub-objects within a document.\n * @internal\n */ class FieldPath$1 extends BasePath {\n    construct(t, e, r) {\n        return new FieldPath$1(t, e, r);\n    }\n    /**\n     * Returns true if the string could be used as a segment in a field path\n     * without escaping.\n     */    static isValidIdentifier(t) {\n        return S.test(t);\n    }\n    canonicalString() {\n        return this.toArray().map((t => (t = t.replace(/\\\\/g, \"\\\\\\\\\").replace(/`/g, \"\\\\`\"), \n        FieldPath$1.isValidIdentifier(t) || (t = \"`\" + t + \"`\"), t))).join(\".\");\n    }\n    toString() {\n        return this.canonicalString();\n    }\n    /**\n     * Returns true if this field references the key of a document.\n     */    isKeyField() {\n        return 1 === this.length && \"__name__\" === this.get(0);\n    }\n    /**\n     * The field designating the key of a document.\n     */    static keyField() {\n        return new FieldPath$1([ \"__name__\" ]);\n    }\n    /**\n     * Parses a field string from the given server-formatted string.\n     *\n     * - Splitting the empty string is not allowed (for now at least).\n     * - Empty segments within the string (e.g. if there are two consecutive\n     *   separators) are not allowed.\n     *\n     * TODO(b/37244157): we should make this more strict. Right now, it allows\n     * non-identifier path components, even if they aren't escaped.\n     */    static fromServerFormat(t) {\n        const e = [];\n        let r = \"\", n = 0;\n        const __PRIVATE_addCurrentSegment = () => {\n            if (0 === r.length) throw new FirestoreError(T, `Invalid field path (${t}). Paths must not be empty, begin with '.', end with '.', or contain '..'`);\n            e.push(r), r = \"\";\n        };\n        let i = !1;\n        for (;n < t.length; ) {\n            const e = t[n];\n            if (\"\\\\\" === e) {\n                if (n + 1 === t.length) throw new FirestoreError(T, \"Path has trailing escape character: \" + t);\n                const e = t[n + 1];\n                if (\"\\\\\" !== e && \".\" !== e && \"`\" !== e) throw new FirestoreError(T, \"Path has invalid escape sequence: \" + t);\n                r += e, n += 2;\n            } else \"`\" === e ? (i = !i, n++) : \".\" !== e || i ? (r += e, n++) : (__PRIVATE_addCurrentSegment(), \n            n++);\n        }\n        if (__PRIVATE_addCurrentSegment(), i) throw new FirestoreError(T, \"Unterminated ` in path: \" + t);\n        return new FieldPath$1(e);\n    }\n    static emptyPath() {\n        return new FieldPath$1([]);\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @internal\n */ class DocumentKey {\n    constructor(t) {\n        this.path = t;\n    }\n    static fromPath(t) {\n        return new DocumentKey(ResourcePath.fromString(t));\n    }\n    static fromName(t) {\n        return new DocumentKey(ResourcePath.fromString(t).popFirst(5));\n    }\n    static empty() {\n        return new DocumentKey(ResourcePath.emptyPath());\n    }\n    get collectionGroup() {\n        return this.path.popLast().lastSegment();\n    }\n    /** Returns true if the document is in the specified collectionId. */    hasCollectionId(t) {\n        return this.path.length >= 2 && this.path.get(this.path.length - 2) === t;\n    }\n    /** Returns the collection group (i.e. the name of the parent collection) for this key. */    getCollectionGroup() {\n        return this.path.get(this.path.length - 2);\n    }\n    /** Returns the fully qualified path to the parent collection. */    getCollectionPath() {\n        return this.path.popLast();\n    }\n    isEqual(t) {\n        return null !== t && 0 === ResourcePath.comparator(this.path, t.path);\n    }\n    toString() {\n        return this.path.toString();\n    }\n    static comparator(t, e) {\n        return ResourcePath.comparator(t.path, e.path);\n    }\n    static isDocumentKey(t) {\n        return t.length % 2 == 0;\n    }\n    /**\n     * Creates and returns a new document key with the given segments.\n     *\n     * @param segments - The segments of the path to the document\n     * @returns A new instance of DocumentKey\n     */    static fromSegments(t) {\n        return new DocumentKey(new ResourcePath(t.slice()));\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ function __PRIVATE_validateNonEmptyArgument(t, e, r) {\n    if (!r) throw new FirestoreError(T, `Function ${t}() cannot be called with an empty ${e}.`);\n}\n\n/**\n * Validates that two boolean options are not set at the same time.\n * @internal\n */\n/**\n * Validates that `path` refers to a document (indicated by the fact it contains\n * an even numbers of segments).\n */\nfunction __PRIVATE_validateDocumentPath(t) {\n    if (!DocumentKey.isDocumentKey(t)) throw new FirestoreError(T, `Invalid document reference. Document references must have an even number of segments, but ${t} has ${t.length}.`);\n}\n\n/**\n * Validates that `path` refers to a collection (indicated by the fact it\n * contains an odd numbers of segments).\n */ function __PRIVATE_validateCollectionPath(t) {\n    if (DocumentKey.isDocumentKey(t)) throw new FirestoreError(T, `Invalid collection reference. Collection references must have an odd number of segments, but ${t} has ${t.length}.`);\n}\n\n/**\n * Returns true if it's a non-null object without a custom prototype\n * (i.e. excludes Array, Date, etc.).\n */\n/** Returns a string describing the type / value of the provided input. */\nfunction __PRIVATE_valueDescription(t) {\n    if (void 0 === t) return \"undefined\";\n    if (null === t) return \"null\";\n    if (\"string\" == typeof t) return t.length > 20 && (t = `${t.substring(0, 20)}...`), \n    JSON.stringify(t);\n    if (\"number\" == typeof t || \"boolean\" == typeof t) return \"\" + t;\n    if (\"object\" == typeof t) {\n        if (t instanceof Array) return \"an array\";\n        {\n            const e = \n            /** try to get the constructor name for an object. */\n            function __PRIVATE_tryGetCustomObjectType(t) {\n                if (t.constructor) return t.constructor.name;\n                return null;\n            }\n            /**\n * Casts `obj` to `T`, optionally unwrapping Compat types to expose the\n * underlying instance. Throws if  `obj` is not an instance of `T`.\n *\n * This cast is used in the Lite and Full SDK to verify instance types for\n * arguments passed to the public API.\n * @internal\n */ (t);\n            return e ? `a custom ${e} object` : \"an object\";\n        }\n    }\n    return \"function\" == typeof t ? \"a function\" : fail();\n}\n\nfunction __PRIVATE_cast(t, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ne) {\n    if (\"_delegate\" in t && (\n    // Unwrap Compat types\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    t = t._delegate), !(t instanceof e)) {\n        if (e.name === t.constructor.name) throw new FirestoreError(T, \"Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?\");\n        {\n            const r = __PRIVATE_valueDescription(t);\n            throw new FirestoreError(T, `Expected type '${e.name}', but it was: ${r}`);\n        }\n    }\n    return t;\n}\n\nfunction __PRIVATE_validatePositiveNumber(t, e) {\n    if (e <= 0) throw new FirestoreError(T, `Function ${t}() requires a positive number, but it was: ${e}.`);\n}\n\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Compares two `ExperimentalLongPollingOptions` objects for equality.\n */\n/**\n * Creates and returns a new `ExperimentalLongPollingOptions` with the same\n * option values as the given instance.\n */\nfunction __PRIVATE_cloneLongPollingOptions(t) {\n    const e = {};\n    return void 0 !== t.timeoutSeconds && (e.timeoutSeconds = t.timeoutSeconds), e;\n}\n\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * The value returned from the most recent invocation of\n * `generateUniqueDebugId()`, or null if it has never been invoked.\n */ let N = null;\n\n/**\n * Generates and returns an initial value for `lastUniqueDebugId`.\n *\n * The returned value is randomly selected from a range of integers that are\n * represented as 8 hexadecimal digits. This means that (within reason) any\n * numbers generated by incrementing the returned number by 1 will also be\n * represented by 8 hexadecimal digits. This leads to all \"IDs\" having the same\n * length when converted to a hexadecimal string, making reading logs containing\n * these IDs easier to follow. And since the return value is randomly selected\n * it will help to differentiate between logs from different executions.\n */\n/**\n * Generates and returns a unique ID as a hexadecimal string.\n *\n * The returned ID is intended to be used in debug logging messages to help\n * correlate log messages that may be spatially separated in the logs, but\n * logically related. For example, a network connection could include the same\n * \"debug ID\" string in all of its log messages to help trace a specific\n * connection over time.\n *\n * @return the 10-character generated ID (e.g. \"0xa1b2c3d4\").\n */\nfunction __PRIVATE_generateUniqueDebugId() {\n    return null === N ? N = function __PRIVATE_generateInitialUniqueDebugId() {\n        return 268435456 + Math.round(2147483648 * Math.random());\n    }() : N++, \"0x\" + N.toString(16);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns whether a variable is either undefined or null.\n */ function __PRIVATE_isNullOrUndefined(t) {\n    return null == t;\n}\n\n/** Returns whether the value represents -0. */ function __PRIVATE_isNegativeZero(t) {\n    // Detect if the value is -0.0. Based on polyfill from\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n    return 0 === t && 1 / t == -1 / 0;\n}\n\n/**\n * Returns whether a value is an integer and in the safe integer range\n * @param value - The value to test for being an integer and in the safe range\n */\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst O = {\n    BatchGetDocuments: \"batchGet\",\n    Commit: \"commit\",\n    RunQuery: \"runQuery\",\n    RunAggregationQuery: \"runAggregationQuery\"\n};\n\n/**\n * Maps RPC names to the corresponding REST endpoint name.\n *\n * We use array notation to avoid mangling.\n */\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Error Codes describing the different ways GRPC can fail. These are copied\n * directly from GRPC's sources here:\n *\n * https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\n *\n * Important! The names of these identifiers matter because the string forms\n * are used for reverse lookups from the webchannel stream. Do NOT change the\n * names of these identifiers or change this into a const enum.\n */\nvar q, B;\n\n/**\n * Converts an HTTP Status Code to the equivalent error code.\n *\n * @param status - An HTTP Status Code, like 200, 404, 503, etc.\n * @returns The equivalent Code. Unknown status codes are mapped to\n *     Code.UNKNOWN.\n */\nfunction __PRIVATE_mapCodeFromHttpStatus(t) {\n    if (void 0 === t) return __PRIVATE_logError(\"RPC_ERROR\", \"HTTP error has no status\"), \n    A;\n    // The canonical error codes for Google APIs [1] specify mapping onto HTTP\n    // status codes but the mapping is not bijective. In each case of ambiguity\n    // this function chooses a primary error.\n    \n    // [1]\n    // https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n        switch (t) {\n      case 200:\n        // OK\n        return E;\n\n      case 400:\n        // Bad Request\n        return w;\n\n        // Other possibilities based on the forward mapping\n        // return Code.INVALID_ARGUMENT;\n        // return Code.OUT_OF_RANGE;\n              case 401:\n        // Unauthorized\n        return p;\n\n      case 403:\n        // Forbidden\n        return V;\n\n      case 404:\n        // Not Found\n        return R;\n\n      case 409:\n        // Conflict\n        return g;\n\n        // Other possibilities:\n        // return Code.ALREADY_EXISTS;\n              case 416:\n        // Range Not Satisfiable\n        return F;\n\n      case 429:\n        // Too Many Requests\n        return y;\n\n      case 499:\n        // Client Closed Request\n        return m;\n\n      case 500:\n        // Internal Server Error\n        return A;\n\n        // Other possibilities:\n        // return Code.INTERNAL;\n        // return Code.DATA_LOSS;\n              case 501:\n        // Unimplemented\n        return v;\n\n      case 503:\n        // Service Unavailable\n        return b;\n\n      case 504:\n        // Gateway Timeout\n        return P;\n\n      default:\n        return t >= 200 && t < 300 ? E : t >= 400 && t < 500 ? w : t >= 500 && t < 600 ? D : A;\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A Rest-based connection that relies on the native HTTP stack\n * (e.g. `fetch` or a polyfill).\n */ (B = q || (q = {}))[B.OK = 0] = \"OK\", B[B.CANCELLED = 1] = \"CANCELLED\", B[B.UNKNOWN = 2] = \"UNKNOWN\", \nB[B.INVALID_ARGUMENT = 3] = \"INVALID_ARGUMENT\", B[B.DEADLINE_EXCEEDED = 4] = \"DEADLINE_EXCEEDED\", \nB[B.NOT_FOUND = 5] = \"NOT_FOUND\", B[B.ALREADY_EXISTS = 6] = \"ALREADY_EXISTS\", B[B.PERMISSION_DENIED = 7] = \"PERMISSION_DENIED\", \nB[B.UNAUTHENTICATED = 16] = \"UNAUTHENTICATED\", B[B.RESOURCE_EXHAUSTED = 8] = \"RESOURCE_EXHAUSTED\", \nB[B.FAILED_PRECONDITION = 9] = \"FAILED_PRECONDITION\", B[B.ABORTED = 10] = \"ABORTED\", \nB[B.OUT_OF_RANGE = 11] = \"OUT_OF_RANGE\", B[B.UNIMPLEMENTED = 12] = \"UNIMPLEMENTED\", \nB[B.INTERNAL = 13] = \"INTERNAL\", B[B.UNAVAILABLE = 14] = \"UNAVAILABLE\", B[B.DATA_LOSS = 15] = \"DATA_LOSS\";\n\nclass __PRIVATE_FetchConnection extends \n/**\n * Base class for all Rest-based connections to the backend (WebChannel and\n * HTTP).\n */\nclass __PRIVATE_RestConnection {\n    constructor(t) {\n        this.databaseInfo = t, this.databaseId = t.databaseId;\n        const e = t.ssl ? \"https\" : \"http\", r = encodeURIComponent(this.databaseId.projectId), n = encodeURIComponent(this.databaseId.database);\n        this.m = e + \"://\" + t.host, this.A = `projects/${r}/databases/${n}`, this.T = \"(default)\" === this.databaseId.database ? `project_id=${r}` : `project_id=${r}&database_id=${n}`;\n    }\n    get P() {\n        // Both `invokeRPC()` and `invokeStreamingRPC()` use their `path` arguments to determine\n        // where to run the query, and expect the `request` to NOT specify the \"path\".\n        return !1;\n    }\n    R(t, e, r, n, i) {\n        const s = __PRIVATE_generateUniqueDebugId(), o = this.I(t, e);\n        __PRIVATE_logDebug(\"RestConnection\", `Sending RPC '${t}' ${s}:`, o, r);\n        const a = {\n            \"google-cloud-resource-prefix\": this.A,\n            \"x-goog-request-params\": this.T\n        };\n        return this.V(a, n, i), this.p(t, o, a, r).then((e => (__PRIVATE_logDebug(\"RestConnection\", `Received RPC '${t}' ${s}: `, e), \n        e)), (e => {\n            throw __PRIVATE_logWarn(\"RestConnection\", `RPC '${t}' ${s} failed with error: `, e, \"url: \", o, \"request:\", r), \n            e;\n        }));\n    }\n    g(t, e, r, n, i, s) {\n        // The REST API automatically aggregates all of the streamed results, so we\n        // can just use the normal invoke() method.\n        return this.R(t, e, r, n, i);\n    }\n    /**\n     * Modifies the headers for a request, adding any authorization token if\n     * present and any additional headers for the request.\n     */    V(t, e, r) {\n        t[\"X-Goog-Api-Client\"] = \n        // SDK_VERSION is updated to different value at runtime depending on the entry point,\n        // so we need to get its value when we need it in a function.\n        function __PRIVATE_getGoogApiClientValue() {\n            return \"gl-js/ fire/\" + d;\n        }(), \n        // Content-Type: text/plain will avoid preflight requests which might\n        // mess with CORS and redirects by proxies. If we add custom headers\n        // we will need to change this code to potentially use the $httpOverwrite\n        // parameter supported by ESF to avoid triggering preflight requests.\n        t[\"Content-Type\"] = \"text/plain\", this.databaseInfo.appId && (t[\"X-Firebase-GMPID\"] = this.databaseInfo.appId), \n        e && e.headers.forEach(((e, r) => t[r] = e)), r && r.headers.forEach(((e, r) => t[r] = e));\n    }\n    I(t, e) {\n        const r = O[t];\n        return `${this.m}/v1/${e}:${r}`;\n    }\n} {\n    /**\n     * @param databaseInfo - The connection info.\n     * @param fetchImpl - `fetch` or a Polyfill that implements the fetch API.\n     */\n    constructor(t, e) {\n        super(t), this.F = e;\n    }\n    v(t, e) {\n        throw new Error(\"Not supported by FetchConnection\");\n    }\n    async p(t, e, r, n) {\n        var i;\n        const s = JSON.stringify(n);\n        let o;\n        try {\n            o = await this.F(e, {\n                method: \"POST\",\n                headers: r,\n                body: s\n            });\n        } catch (t) {\n            const e = t;\n            throw new FirestoreError(__PRIVATE_mapCodeFromHttpStatus(e.status), \"Request failed with error: \" + e.statusText);\n        }\n        if (!o.ok) {\n            let t = await o.json();\n            Array.isArray(t) && (t = t[0]);\n            const e = null === (i = null == t ? void 0 : t.error) || void 0 === i ? void 0 : i.message;\n            throw new FirestoreError(__PRIVATE_mapCodeFromHttpStatus(o.status), `Request failed with error: ${null != e ? e : o.statusText}`);\n        }\n        return o.json();\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Initializes the HTTP connection for the REST API. */\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Concrete implementation of the Aggregate type.\n */\nclass __PRIVATE_AggregateImpl {\n    constructor(t, e, r) {\n        this.alias = t, this.D = e, this.fieldPath = r;\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Generates `nBytes` of random bytes.\n *\n * If `nBytes < 0` , an error will be thrown.\n */ function __PRIVATE_randomBytes(t) {\n    // Polyfills for IE and WebWorker by using `self` and `msCrypto` when `crypto` is not available.\n    const e = \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    \"undefined\" != typeof self && (self.crypto || self.msCrypto), r = new Uint8Array(t);\n    if (e && \"function\" == typeof e.getRandomValues) e.getRandomValues(r); else \n    // Falls back to Math.random\n    for (let e = 0; e < t; e++) r[e] = Math.floor(256 * Math.random());\n    return r;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ class __PRIVATE_AutoId {\n    static C() {\n        // Alphanumeric characters\n        const t = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\", e = Math.floor(256 / t.length) * t.length;\n        // The largest byte value that is a multiple of `char.length`.\n                let r = \"\";\n        for (;r.length < 20; ) {\n            const n = __PRIVATE_randomBytes(40);\n            for (let i = 0; i < n.length; ++i) \n            // Only accept values that are [0, maxMultiple), this ensures they can\n            // be evenly mapped to indices of `chars` via a modulo operation.\n            r.length < 20 && n[i] < e && (r += t.charAt(n[i] % t.length));\n        }\n        return r;\n    }\n}\n\nfunction __PRIVATE_primitiveComparator(t, e) {\n    return t < e ? -1 : t > e ? 1 : 0;\n}\n\n/** Helper to compare arrays using isEqual(). */ function __PRIVATE_arrayEquals(t, e, r) {\n    return t.length === e.length && t.every(((t, n) => r(t, e[n])));\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ function __PRIVATE_objectSize(t) {\n    let e = 0;\n    for (const r in t) Object.prototype.hasOwnProperty.call(t, r) && e++;\n    return e;\n}\n\nfunction forEach(t, e) {\n    for (const r in t) Object.prototype.hasOwnProperty.call(t, r) && e(r, t[r]);\n}\n\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An error encountered while decoding base64 string.\n */\nclass __PRIVATE_Base64DecodeError extends Error {\n    constructor() {\n        super(...arguments), this.name = \"Base64DecodeError\";\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Converts a Base64 encoded string to a binary string. */\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Immutable class that represents a \"proto\" byte string.\n *\n * Proto byte strings can either be Base64-encoded strings or Uint8Arrays when\n * sent on the wire. This class abstracts away this differentiation by holding\n * the proto byte string in a common class that must be converted into a string\n * before being sent as a proto.\n * @internal\n */\nclass ByteString {\n    constructor(t) {\n        this.binaryString = t;\n    }\n    static fromBase64String(t) {\n        const e = function __PRIVATE_decodeBase64(t) {\n            try {\n                return atob(t);\n            } catch (t) {\n                // Check that `DOMException` is defined before using it to avoid\n                // \"ReferenceError: Property 'DOMException' doesn't exist\" in react-native.\n                // (https://github.com/firebase/firebase-js-sdk/issues/7115)\n                throw \"undefined\" != typeof DOMException && t instanceof DOMException ? new __PRIVATE_Base64DecodeError(\"Invalid base64 string: \" + t) : t;\n            }\n        }\n        /** Converts a binary string to a Base64 encoded string. */ (t);\n        return new ByteString(e);\n    }\n    static fromUint8Array(t) {\n        // TODO(indexing); Remove the copy of the byte string here as this method\n        // is frequently called during indexing.\n        const e = \n        /**\n * Helper function to convert an Uint8array to a binary string.\n */\n        function __PRIVATE_binaryStringFromUint8Array(t) {\n            let e = \"\";\n            for (let r = 0; r < t.length; ++r) e += String.fromCharCode(t[r]);\n            return e;\n        }\n        /**\n * Helper function to convert a binary string to an Uint8Array.\n */ (t);\n        return new ByteString(e);\n    }\n    [Symbol.iterator]() {\n        let t = 0;\n        return {\n            next: () => t < this.binaryString.length ? {\n                value: this.binaryString.charCodeAt(t++),\n                done: !1\n            } : {\n                value: void 0,\n                done: !0\n            }\n        };\n    }\n    toBase64() {\n        return function __PRIVATE_encodeBase64(t) {\n            return btoa(t);\n        }(this.binaryString);\n    }\n    toUint8Array() {\n        return function __PRIVATE_uint8ArrayFromBinaryString(t) {\n            const e = new Uint8Array(t.length);\n            for (let r = 0; r < t.length; r++) e[r] = t.charCodeAt(r);\n            return e;\n        }\n        /**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n        // A RegExp matching ISO 8601 UTC timestamps with optional fraction.\n        (this.binaryString);\n    }\n    approximateByteSize() {\n        return 2 * this.binaryString.length;\n    }\n    compareTo(t) {\n        return __PRIVATE_primitiveComparator(this.binaryString, t.binaryString);\n    }\n    isEqual(t) {\n        return this.binaryString === t.binaryString;\n    }\n}\n\nByteString.EMPTY_BYTE_STRING = new ByteString(\"\");\n\nconst $ = new RegExp(/^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(?:\\.(\\d+))?Z$/);\n\n/**\n * Converts the possible Proto values for a timestamp value into a \"seconds and\n * nanos\" representation.\n */ function __PRIVATE_normalizeTimestamp(t) {\n    // The json interface (for the browser) will return an iso timestamp string,\n    // while the proto js library (for node) will return a\n    // google.protobuf.Timestamp instance.\n    if (__PRIVATE_hardAssert(!!t), \"string\" == typeof t) {\n        // The date string can have higher precision (nanos) than the Date class\n        // (millis), so we do some custom parsing here.\n        // Parse the nanos right out of the string.\n        let e = 0;\n        const r = $.exec(t);\n        if (__PRIVATE_hardAssert(!!r), r[1]) {\n            // Pad the fraction out to 9 digits (nanos).\n            let t = r[1];\n            t = (t + \"000000000\").substr(0, 9), e = Number(t);\n        }\n        // Parse the date to get the seconds.\n                const n = new Date(t);\n        return {\n            seconds: Math.floor(n.getTime() / 1e3),\n            nanos: e\n        };\n    }\n    return {\n        seconds: __PRIVATE_normalizeNumber(t.seconds),\n        nanos: __PRIVATE_normalizeNumber(t.nanos)\n    };\n}\n\n/**\n * Converts the possible Proto types for numbers into a JavaScript number.\n * Returns 0 if the value is not numeric.\n */ function __PRIVATE_normalizeNumber(t) {\n    // TODO(bjornick): Handle int64 greater than 53 bits.\n    return \"number\" == typeof t ? t : \"string\" == typeof t ? Number(t) : 0;\n}\n\n/** Converts the possible Proto types for Blobs into a ByteString. */ function __PRIVATE_normalizeByteString(t) {\n    return \"string\" == typeof t ? ByteString.fromBase64String(t) : ByteString.fromUint8Array(t);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// The earliest date supported by Firestore timestamps (0001-01-01T00:00:00Z).\n/**\n * A `Timestamp` represents a point in time independent of any time zone or\n * calendar, represented as seconds and fractions of seconds at nanosecond\n * resolution in UTC Epoch time.\n *\n * It is encoded using the Proleptic Gregorian Calendar which extends the\n * Gregorian calendar backwards to year one. It is encoded assuming all minutes\n * are 60 seconds long, i.e. leap seconds are \"smeared\" so that no leap second\n * table is needed for interpretation. Range is from 0001-01-01T00:00:00Z to\n * 9999-12-31T23:59:59.999999999Z.\n *\n * For examples and further specifications, refer to the\n * {@link https://github.com/google/protobuf/blob/master/src/google/protobuf/timestamp.proto | Timestamp definition}.\n */\nclass Timestamp {\n    /**\n     * Creates a new timestamp.\n     *\n     * @param seconds - The number of seconds of UTC time since Unix epoch\n     *     1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n     *     9999-12-31T23:59:59Z inclusive.\n     * @param nanoseconds - The non-negative fractions of a second at nanosecond\n     *     resolution. Negative second values with fractions must still have\n     *     non-negative nanoseconds values that count forward in time. Must be\n     *     from 0 to 999,999,999 inclusive.\n     */\n    constructor(\n    /**\n     * The number of seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z.\n     */\n    t, \n    /**\n     * The fractions of a second at nanosecond resolution.*\n     */\n    e) {\n        if (this.seconds = t, this.nanoseconds = e, e < 0) throw new FirestoreError(T, \"Timestamp nanoseconds out of range: \" + e);\n        if (e >= 1e9) throw new FirestoreError(T, \"Timestamp nanoseconds out of range: \" + e);\n        if (t < -62135596800) throw new FirestoreError(T, \"Timestamp seconds out of range: \" + t);\n        // This will break in the year 10,000.\n                if (t >= 253402300800) throw new FirestoreError(T, \"Timestamp seconds out of range: \" + t);\n    }\n    /**\n     * Creates a new timestamp with the current date, with millisecond precision.\n     *\n     * @returns a new timestamp representing the current date.\n     */    static now() {\n        return Timestamp.fromMillis(Date.now());\n    }\n    /**\n     * Creates a new timestamp from the given date.\n     *\n     * @param date - The date to initialize the `Timestamp` from.\n     * @returns A new `Timestamp` representing the same point in time as the given\n     *     date.\n     */    static fromDate(t) {\n        return Timestamp.fromMillis(t.getTime());\n    }\n    /**\n     * Creates a new timestamp from the given number of milliseconds.\n     *\n     * @param milliseconds - Number of milliseconds since Unix epoch\n     *     1970-01-01T00:00:00Z.\n     * @returns A new `Timestamp` representing the same point in time as the given\n     *     number of milliseconds.\n     */    static fromMillis(t) {\n        const e = Math.floor(t / 1e3), r = Math.floor(1e6 * (t - 1e3 * e));\n        return new Timestamp(e, r);\n    }\n    /**\n     * Converts a `Timestamp` to a JavaScript `Date` object. This conversion\n     * causes a loss of precision since `Date` objects only support millisecond\n     * precision.\n     *\n     * @returns JavaScript `Date` object representing the same point in time as\n     *     this `Timestamp`, with millisecond precision.\n     */    toDate() {\n        return new Date(this.toMillis());\n    }\n    /**\n     * Converts a `Timestamp` to a numeric timestamp (in milliseconds since\n     * epoch). This operation causes a loss of precision.\n     *\n     * @returns The point in time corresponding to this timestamp, represented as\n     *     the number of milliseconds since Unix epoch 1970-01-01T00:00:00Z.\n     */    toMillis() {\n        return 1e3 * this.seconds + this.nanoseconds / 1e6;\n    }\n    _compareTo(t) {\n        return this.seconds === t.seconds ? __PRIVATE_primitiveComparator(this.nanoseconds, t.nanoseconds) : __PRIVATE_primitiveComparator(this.seconds, t.seconds);\n    }\n    /**\n     * Returns true if this `Timestamp` is equal to the provided one.\n     *\n     * @param other - The `Timestamp` to compare against.\n     * @returns true if this `Timestamp` is equal to the provided one.\n     */    isEqual(t) {\n        return t.seconds === this.seconds && t.nanoseconds === this.nanoseconds;\n    }\n    /** Returns a textual representation of this `Timestamp`. */    toString() {\n        return \"Timestamp(seconds=\" + this.seconds + \", nanoseconds=\" + this.nanoseconds + \")\";\n    }\n    /** Returns a JSON-serializable representation of this `Timestamp`. */    toJSON() {\n        return {\n            seconds: this.seconds,\n            nanoseconds: this.nanoseconds\n        };\n    }\n    /**\n     * Converts this object to a primitive string, which allows `Timestamp` objects\n     * to be compared using the `>`, `<=`, `>=` and `>` operators.\n     */    valueOf() {\n        // This method returns a string of the form <seconds>.<nanoseconds> where\n        // <seconds> is translated to have a non-negative value and both <seconds>\n        // and <nanoseconds> are left-padded with zeroes to be a consistent length.\n        // Strings with this format then have a lexiographical ordering that matches\n        // the expected ordering. The <seconds> translation is done to avoid having\n        // a leading negative sign (i.e. a leading '-' character) in its string\n        // representation, which would affect its lexiographical ordering.\n        const t = this.seconds - -62135596800;\n        // Note: Up to 12 decimal digits are required to represent all valid\n        // 'seconds' values.\n                return String(t).padStart(12, \"0\") + \".\" + String(this.nanoseconds).padStart(9, \"0\");\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Represents a locally-applied ServerTimestamp.\n *\n * Server Timestamps are backed by MapValues that contain an internal field\n * `__type__` with a value of `server_timestamp`. The previous value and local\n * write time are stored in its `__previous_value__` and `__local_write_time__`\n * fields respectively.\n *\n * Notes:\n * - ServerTimestampValue instances are created as the result of applying a\n *   transform. They can only exist in the local view of a document. Therefore\n *   they do not need to be parsed or serialized.\n * - When evaluated locally (e.g. for snapshot.data()), they by default\n *   evaluate to `null`. This behavior can be configured by passing custom\n *   FieldValueOptions to value().\n * - With respect to other ServerTimestampValues, they sort by their\n *   localWriteTime.\n */ function __PRIVATE_isServerTimestamp(t) {\n    var e, r;\n    return \"server_timestamp\" === (null === (r = ((null === (e = null == t ? void 0 : t.mapValue) || void 0 === e ? void 0 : e.fields) || {}).__type__) || void 0 === r ? void 0 : r.stringValue);\n}\n\n/**\n * Returns the value of the field before this ServerTimestamp was set.\n *\n * Preserving the previous values allows the user to display the last resoled\n * value until the backend responds with the timestamp.\n */ function __PRIVATE_getPreviousValue(t) {\n    const e = t.mapValue.fields.__previous_value__;\n    return __PRIVATE_isServerTimestamp(e) ? __PRIVATE_getPreviousValue(e) : e;\n}\n\n/**\n * Returns the local time at which this timestamp was first set.\n */ function __PRIVATE_getLocalWriteTime(t) {\n    const e = __PRIVATE_normalizeTimestamp(t.mapValue.fields.__local_write_time__.timestampValue);\n    return new Timestamp(e.seconds, e.nanos);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ const Q = {\n    fields: {\n        __type__: {\n            stringValue: \"__max__\"\n        }\n    }\n};\n\n/** Extracts the backend's type order for the provided value. */\nfunction __PRIVATE_typeOrder(t) {\n    return \"nullValue\" in t ? 0 /* TypeOrder.NullValue */ : \"booleanValue\" in t ? 1 /* TypeOrder.BooleanValue */ : \"integerValue\" in t || \"doubleValue\" in t ? 2 /* TypeOrder.NumberValue */ : \"timestampValue\" in t ? 3 /* TypeOrder.TimestampValue */ : \"stringValue\" in t ? 5 /* TypeOrder.StringValue */ : \"bytesValue\" in t ? 6 /* TypeOrder.BlobValue */ : \"referenceValue\" in t ? 7 /* TypeOrder.RefValue */ : \"geoPointValue\" in t ? 8 /* TypeOrder.GeoPointValue */ : \"arrayValue\" in t ? 9 /* TypeOrder.ArrayValue */ : \"mapValue\" in t ? __PRIVATE_isServerTimestamp(t) ? 4 /* TypeOrder.ServerTimestampValue */ : \n    /** Returns true if the Value represents the canonical {@link #MAX_VALUE} . */\n    function __PRIVATE_isMaxValue(t) {\n        return \"__max__\" === (((t.mapValue || {}).fields || {}).__type__ || {}).stringValue;\n    }\n    /**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n    /**\n * Represents a bound of a query.\n *\n * The bound is specified with the given components representing a position and\n * whether it's just before or just after the position (relative to whatever the\n * query order is).\n *\n * The position represents a logical index position for a query. It's a prefix\n * of values for the (potentially implicit) order by clauses of a query.\n *\n * Bound provides a function to determine whether a document comes before or\n * after a bound. This is influenced by whether the position is just before or\n * just after the provided values.\n */ (t) ? 9007199254740991 /* TypeOrder.MaxValue */ : 10 /* TypeOrder.ObjectValue */ : fail();\n}\n\n/** Tests `left` and `right` for equality based on the backend semantics. */ function __PRIVATE_valueEquals(t, e) {\n    if (t === e) return !0;\n    const r = __PRIVATE_typeOrder(t);\n    if (r !== __PRIVATE_typeOrder(e)) return !1;\n    switch (r) {\n      case 0 /* TypeOrder.NullValue */ :\n      case 9007199254740991 /* TypeOrder.MaxValue */ :\n        return !0;\n\n      case 1 /* TypeOrder.BooleanValue */ :\n        return t.booleanValue === e.booleanValue;\n\n      case 4 /* TypeOrder.ServerTimestampValue */ :\n        return __PRIVATE_getLocalWriteTime(t).isEqual(__PRIVATE_getLocalWriteTime(e));\n\n      case 3 /* TypeOrder.TimestampValue */ :\n        return function __PRIVATE_timestampEquals(t, e) {\n            if (\"string\" == typeof t.timestampValue && \"string\" == typeof e.timestampValue && t.timestampValue.length === e.timestampValue.length) \n            // Use string equality for ISO 8601 timestamps\n            return t.timestampValue === e.timestampValue;\n            const r = __PRIVATE_normalizeTimestamp(t.timestampValue), n = __PRIVATE_normalizeTimestamp(e.timestampValue);\n            return r.seconds === n.seconds && r.nanos === n.nanos;\n        }(t, e);\n\n      case 5 /* TypeOrder.StringValue */ :\n        return t.stringValue === e.stringValue;\n\n      case 6 /* TypeOrder.BlobValue */ :\n        return function __PRIVATE_blobEquals(t, e) {\n            return __PRIVATE_normalizeByteString(t.bytesValue).isEqual(__PRIVATE_normalizeByteString(e.bytesValue));\n        }(t, e);\n\n      case 7 /* TypeOrder.RefValue */ :\n        return t.referenceValue === e.referenceValue;\n\n      case 8 /* TypeOrder.GeoPointValue */ :\n        return function __PRIVATE_geoPointEquals(t, e) {\n            return __PRIVATE_normalizeNumber(t.geoPointValue.latitude) === __PRIVATE_normalizeNumber(e.geoPointValue.latitude) && __PRIVATE_normalizeNumber(t.geoPointValue.longitude) === __PRIVATE_normalizeNumber(e.geoPointValue.longitude);\n        }(t, e);\n\n      case 2 /* TypeOrder.NumberValue */ :\n        return function __PRIVATE_numberEquals(t, e) {\n            if (\"integerValue\" in t && \"integerValue\" in e) return __PRIVATE_normalizeNumber(t.integerValue) === __PRIVATE_normalizeNumber(e.integerValue);\n            if (\"doubleValue\" in t && \"doubleValue\" in e) {\n                const r = __PRIVATE_normalizeNumber(t.doubleValue), n = __PRIVATE_normalizeNumber(e.doubleValue);\n                return r === n ? __PRIVATE_isNegativeZero(r) === __PRIVATE_isNegativeZero(n) : isNaN(r) && isNaN(n);\n            }\n            return !1;\n        }(t, e);\n\n      case 9 /* TypeOrder.ArrayValue */ :\n        return __PRIVATE_arrayEquals(t.arrayValue.values || [], e.arrayValue.values || [], __PRIVATE_valueEquals);\n\n      case 10 /* TypeOrder.ObjectValue */ :\n        return function __PRIVATE_objectEquals(t, e) {\n            const r = t.mapValue.fields || {}, n = e.mapValue.fields || {};\n            if (__PRIVATE_objectSize(r) !== __PRIVATE_objectSize(n)) return !1;\n            for (const t in r) if (r.hasOwnProperty(t) && (void 0 === n[t] || !__PRIVATE_valueEquals(r[t], n[t]))) return !1;\n            return !0;\n        }\n        /** Returns true if the ArrayValue contains the specified element. */ (t, e);\n\n      default:\n        return fail();\n    }\n}\n\nfunction __PRIVATE_arrayValueContains(t, e) {\n    return void 0 !== (t.values || []).find((t => __PRIVATE_valueEquals(t, e)));\n}\n\nfunction __PRIVATE_valueCompare(t, e) {\n    if (t === e) return 0;\n    const r = __PRIVATE_typeOrder(t), n = __PRIVATE_typeOrder(e);\n    if (r !== n) return __PRIVATE_primitiveComparator(r, n);\n    switch (r) {\n      case 0 /* TypeOrder.NullValue */ :\n      case 9007199254740991 /* TypeOrder.MaxValue */ :\n        return 0;\n\n      case 1 /* TypeOrder.BooleanValue */ :\n        return __PRIVATE_primitiveComparator(t.booleanValue, e.booleanValue);\n\n      case 2 /* TypeOrder.NumberValue */ :\n        return function __PRIVATE_compareNumbers(t, e) {\n            const r = __PRIVATE_normalizeNumber(t.integerValue || t.doubleValue), n = __PRIVATE_normalizeNumber(e.integerValue || e.doubleValue);\n            return r < n ? -1 : r > n ? 1 : r === n ? 0 : \n            // one or both are NaN.\n            isNaN(r) ? isNaN(n) ? 0 : -1 : 1;\n        }(t, e);\n\n      case 3 /* TypeOrder.TimestampValue */ :\n        return __PRIVATE_compareTimestamps(t.timestampValue, e.timestampValue);\n\n      case 4 /* TypeOrder.ServerTimestampValue */ :\n        return __PRIVATE_compareTimestamps(__PRIVATE_getLocalWriteTime(t), __PRIVATE_getLocalWriteTime(e));\n\n      case 5 /* TypeOrder.StringValue */ :\n        return __PRIVATE_primitiveComparator(t.stringValue, e.stringValue);\n\n      case 6 /* TypeOrder.BlobValue */ :\n        return function __PRIVATE_compareBlobs(t, e) {\n            const r = __PRIVATE_normalizeByteString(t), n = __PRIVATE_normalizeByteString(e);\n            return r.compareTo(n);\n        }(t.bytesValue, e.bytesValue);\n\n      case 7 /* TypeOrder.RefValue */ :\n        return function __PRIVATE_compareReferences(t, e) {\n            const r = t.split(\"/\"), n = e.split(\"/\");\n            for (let t = 0; t < r.length && t < n.length; t++) {\n                const e = __PRIVATE_primitiveComparator(r[t], n[t]);\n                if (0 !== e) return e;\n            }\n            return __PRIVATE_primitiveComparator(r.length, n.length);\n        }(t.referenceValue, e.referenceValue);\n\n      case 8 /* TypeOrder.GeoPointValue */ :\n        return function __PRIVATE_compareGeoPoints(t, e) {\n            const r = __PRIVATE_primitiveComparator(__PRIVATE_normalizeNumber(t.latitude), __PRIVATE_normalizeNumber(e.latitude));\n            if (0 !== r) return r;\n            return __PRIVATE_primitiveComparator(__PRIVATE_normalizeNumber(t.longitude), __PRIVATE_normalizeNumber(e.longitude));\n        }(t.geoPointValue, e.geoPointValue);\n\n      case 9 /* TypeOrder.ArrayValue */ :\n        return function __PRIVATE_compareArrays(t, e) {\n            const r = t.values || [], n = e.values || [];\n            for (let t = 0; t < r.length && t < n.length; ++t) {\n                const e = __PRIVATE_valueCompare(r[t], n[t]);\n                if (e) return e;\n            }\n            return __PRIVATE_primitiveComparator(r.length, n.length);\n        }(t.arrayValue, e.arrayValue);\n\n      case 10 /* TypeOrder.ObjectValue */ :\n        return function __PRIVATE_compareMaps(t, e) {\n            if (t === Q && e === Q) return 0;\n            if (t === Q) return 1;\n            if (e === Q) return -1;\n            const r = t.fields || {}, n = Object.keys(r), i = e.fields || {}, s = Object.keys(i);\n            // Even though MapValues are likely sorted correctly based on their insertion\n            // order (e.g. when received from the backend), local modifications can bring\n            // elements out of order. We need to re-sort the elements to ensure that\n            // canonical IDs are independent of insertion order.\n            n.sort(), s.sort();\n            for (let t = 0; t < n.length && t < s.length; ++t) {\n                const e = __PRIVATE_primitiveComparator(n[t], s[t]);\n                if (0 !== e) return e;\n                const o = __PRIVATE_valueCompare(r[n[t]], i[s[t]]);\n                if (0 !== o) return o;\n            }\n            return __PRIVATE_primitiveComparator(n.length, s.length);\n        }\n        /** Returns a reference value for the provided database and key. */ (t.mapValue, e.mapValue);\n\n      default:\n        throw fail();\n    }\n}\n\nfunction __PRIVATE_compareTimestamps(t, e) {\n    if (\"string\" == typeof t && \"string\" == typeof e && t.length === e.length) return __PRIVATE_primitiveComparator(t, e);\n    const r = __PRIVATE_normalizeTimestamp(t), n = __PRIVATE_normalizeTimestamp(e), i = __PRIVATE_primitiveComparator(r.seconds, n.seconds);\n    return 0 !== i ? i : __PRIVATE_primitiveComparator(r.nanos, n.nanos);\n}\n\nfunction __PRIVATE_refValue(t, e) {\n    return {\n        referenceValue: `projects/${t.projectId}/databases/${t.database}/documents/${e.path.canonicalString()}`\n    };\n}\n\n/** Returns true if `value` is an ArrayValue. */ function isArray(t) {\n    return !!t && \"arrayValue\" in t;\n}\n\n/** Returns true if `value` is a NullValue. */ function __PRIVATE_isNullValue(t) {\n    return !!t && \"nullValue\" in t;\n}\n\n/** Returns true if `value` is NaN. */ function __PRIVATE_isNanValue(t) {\n    return !!t && \"doubleValue\" in t && isNaN(Number(t.doubleValue));\n}\n\n/** Returns true if `value` is a MapValue. */ function __PRIVATE_isMapValue(t) {\n    return !!t && \"mapValue\" in t;\n}\n\n/** Creates a deep copy of `source`. */ function __PRIVATE_deepClone(t) {\n    if (t.geoPointValue) return {\n        geoPointValue: Object.assign({}, t.geoPointValue)\n    };\n    if (t.timestampValue && \"object\" == typeof t.timestampValue) return {\n        timestampValue: Object.assign({}, t.timestampValue)\n    };\n    if (t.mapValue) {\n        const e = {\n            mapValue: {\n                fields: {}\n            }\n        };\n        return forEach(t.mapValue.fields, ((t, r) => e.mapValue.fields[t] = __PRIVATE_deepClone(r))), \n        e;\n    }\n    if (t.arrayValue) {\n        const e = {\n            arrayValue: {\n                values: []\n            }\n        };\n        for (let r = 0; r < (t.arrayValue.values || []).length; ++r) e.arrayValue.values[r] = __PRIVATE_deepClone(t.arrayValue.values[r]);\n        return e;\n    }\n    return Object.assign({}, t);\n}\n\nclass Bound {\n    constructor(t, e) {\n        this.position = t, this.inclusive = e;\n    }\n}\n\nfunction __PRIVATE_boundEquals(t, e) {\n    if (null === t) return null === e;\n    if (null === e) return !1;\n    if (t.inclusive !== e.inclusive || t.position.length !== e.position.length) return !1;\n    for (let r = 0; r < t.position.length; r++) {\n        if (!__PRIVATE_valueEquals(t.position[r], e.position[r])) return !1;\n    }\n    return !0;\n}\n\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ class Filter {}\n\nclass FieldFilter extends Filter {\n    constructor(t, e, r) {\n        super(), this.field = t, this.op = e, this.value = r;\n    }\n    /**\n     * Creates a filter based on the provided arguments.\n     */    static create(t, e, r) {\n        return t.isKeyField() ? \"in\" /* Operator.IN */ === e || \"not-in\" /* Operator.NOT_IN */ === e ? this.createKeyFieldInFilter(t, e, r) : new __PRIVATE_KeyFieldFilter(t, e, r) : \"array-contains\" /* Operator.ARRAY_CONTAINS */ === e ? new __PRIVATE_ArrayContainsFilter(t, r) : \"in\" /* Operator.IN */ === e ? new __PRIVATE_InFilter(t, r) : \"not-in\" /* Operator.NOT_IN */ === e ? new __PRIVATE_NotInFilter(t, r) : \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */ === e ? new __PRIVATE_ArrayContainsAnyFilter(t, r) : new FieldFilter(t, e, r);\n    }\n    static createKeyFieldInFilter(t, e, r) {\n        return \"in\" /* Operator.IN */ === e ? new __PRIVATE_KeyFieldInFilter(t, r) : new __PRIVATE_KeyFieldNotInFilter(t, r);\n    }\n    matches(t) {\n        const e = t.data.field(this.field);\n        // Types do not have to match in NOT_EQUAL filters.\n                return \"!=\" /* Operator.NOT_EQUAL */ === this.op ? null !== e && this.matchesComparison(__PRIVATE_valueCompare(e, this.value)) : null !== e && __PRIVATE_typeOrder(this.value) === __PRIVATE_typeOrder(e) && this.matchesComparison(__PRIVATE_valueCompare(e, this.value));\n        // Only compare types with matching backend order (such as double and int).\n        }\n    matchesComparison(t) {\n        switch (this.op) {\n          case \"<\" /* Operator.LESS_THAN */ :\n            return t < 0;\n\n          case \"<=\" /* Operator.LESS_THAN_OR_EQUAL */ :\n            return t <= 0;\n\n          case \"==\" /* Operator.EQUAL */ :\n            return 0 === t;\n\n          case \"!=\" /* Operator.NOT_EQUAL */ :\n            return 0 !== t;\n\n          case \">\" /* Operator.GREATER_THAN */ :\n            return t > 0;\n\n          case \">=\" /* Operator.GREATER_THAN_OR_EQUAL */ :\n            return t >= 0;\n\n          default:\n            return fail();\n        }\n    }\n    isInequality() {\n        return [ \"<\" /* Operator.LESS_THAN */ , \"<=\" /* Operator.LESS_THAN_OR_EQUAL */ , \">\" /* Operator.GREATER_THAN */ , \">=\" /* Operator.GREATER_THAN_OR_EQUAL */ , \"!=\" /* Operator.NOT_EQUAL */ , \"not-in\" /* Operator.NOT_IN */ ].indexOf(this.op) >= 0;\n    }\n    getFlattenedFilters() {\n        return [ this ];\n    }\n    getFilters() {\n        return [ this ];\n    }\n    getFirstInequalityField() {\n        return this.isInequality() ? this.field : null;\n    }\n}\n\nclass CompositeFilter extends Filter {\n    constructor(t, e) {\n        super(), this.filters = t, this.op = e, this.S = null;\n    }\n    /**\n     * Creates a filter based on the provided arguments.\n     */    static create(t, e) {\n        return new CompositeFilter(t, e);\n    }\n    matches(t) {\n        return function __PRIVATE_compositeFilterIsConjunction(t) {\n            return \"and\" /* CompositeOperator.AND */ === t.op;\n        }(this) ? void 0 === this.filters.find((e => !e.matches(t))) : void 0 !== this.filters.find((e => e.matches(t)));\n    }\n    getFlattenedFilters() {\n        return null !== this.S || (this.S = this.filters.reduce(((t, e) => t.concat(e.getFlattenedFilters())), [])), \n        this.S;\n    }\n    // Returns a mutable copy of `this.filters`\n    getFilters() {\n        return Object.assign([], this.filters);\n    }\n    getFirstInequalityField() {\n        const t = this.N((t => t.isInequality()));\n        return null !== t ? t.field : null;\n    }\n    // Performs a depth-first search to find and return the first FieldFilter in the composite filter\n    // that satisfies the predicate. Returns `null` if none of the FieldFilters satisfy the\n    // predicate.\n    N(t) {\n        for (const e of this.getFlattenedFilters()) if (t(e)) return e;\n        return null;\n    }\n}\n\nfunction __PRIVATE_filterEquals(t, e) {\n    return t instanceof FieldFilter ? function __PRIVATE_fieldFilterEquals(t, e) {\n        return e instanceof FieldFilter && t.op === e.op && t.field.isEqual(e.field) && __PRIVATE_valueEquals(t.value, e.value);\n    }(t, e) : t instanceof CompositeFilter ? function __PRIVATE_compositeFilterEquals(t, e) {\n        if (e instanceof CompositeFilter && t.op === e.op && t.filters.length === e.filters.length) {\n            return t.filters.reduce(((t, r, n) => t && __PRIVATE_filterEquals(r, e.filters[n])), !0);\n        }\n        return !1;\n    }\n    /** Filter that matches on key fields (i.e. '__name__'). */ (t, e) : void fail();\n}\n\nclass __PRIVATE_KeyFieldFilter extends FieldFilter {\n    constructor(t, e, r) {\n        super(t, e, r), this.key = DocumentKey.fromName(r.referenceValue);\n    }\n    matches(t) {\n        const e = DocumentKey.comparator(t.key, this.key);\n        return this.matchesComparison(e);\n    }\n}\n\n/** Filter that matches on key fields within an array. */ class __PRIVATE_KeyFieldInFilter extends FieldFilter {\n    constructor(t, e) {\n        super(t, \"in\" /* Operator.IN */ , e), this.keys = __PRIVATE_extractDocumentKeysFromArrayValue(\"in\" /* Operator.IN */ , e);\n    }\n    matches(t) {\n        return this.keys.some((e => e.isEqual(t.key)));\n    }\n}\n\n/** Filter that matches on key fields not present within an array. */ class __PRIVATE_KeyFieldNotInFilter extends FieldFilter {\n    constructor(t, e) {\n        super(t, \"not-in\" /* Operator.NOT_IN */ , e), this.keys = __PRIVATE_extractDocumentKeysFromArrayValue(\"not-in\" /* Operator.NOT_IN */ , e);\n    }\n    matches(t) {\n        return !this.keys.some((e => e.isEqual(t.key)));\n    }\n}\n\nfunction __PRIVATE_extractDocumentKeysFromArrayValue(t, e) {\n    var r;\n    return ((null === (r = e.arrayValue) || void 0 === r ? void 0 : r.values) || []).map((t => DocumentKey.fromName(t.referenceValue)));\n}\n\n/** A Filter that implements the array-contains operator. */ class __PRIVATE_ArrayContainsFilter extends FieldFilter {\n    constructor(t, e) {\n        super(t, \"array-contains\" /* Operator.ARRAY_CONTAINS */ , e);\n    }\n    matches(t) {\n        const e = t.data.field(this.field);\n        return isArray(e) && __PRIVATE_arrayValueContains(e.arrayValue, this.value);\n    }\n}\n\n/** A Filter that implements the IN operator. */ class __PRIVATE_InFilter extends FieldFilter {\n    constructor(t, e) {\n        super(t, \"in\" /* Operator.IN */ , e);\n    }\n    matches(t) {\n        const e = t.data.field(this.field);\n        return null !== e && __PRIVATE_arrayValueContains(this.value.arrayValue, e);\n    }\n}\n\n/** A Filter that implements the not-in operator. */ class __PRIVATE_NotInFilter extends FieldFilter {\n    constructor(t, e) {\n        super(t, \"not-in\" /* Operator.NOT_IN */ , e);\n    }\n    matches(t) {\n        if (__PRIVATE_arrayValueContains(this.value.arrayValue, {\n            nullValue: \"NULL_VALUE\"\n        })) return !1;\n        const e = t.data.field(this.field);\n        return null !== e && !__PRIVATE_arrayValueContains(this.value.arrayValue, e);\n    }\n}\n\n/** A Filter that implements the array-contains-any operator. */ class __PRIVATE_ArrayContainsAnyFilter extends FieldFilter {\n    constructor(t, e) {\n        super(t, \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */ , e);\n    }\n    matches(t) {\n        const e = t.data.field(this.field);\n        return !(!isArray(e) || !e.arrayValue.values) && e.arrayValue.values.some((t => __PRIVATE_arrayValueContains(this.value.arrayValue, t)));\n    }\n}\n\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An ordering on a field, in some Direction. Direction defaults to ASCENDING.\n */ class OrderBy {\n    constructor(t, e = \"asc\" /* Direction.ASCENDING */) {\n        this.field = t, this.dir = e;\n    }\n}\n\nfunction __PRIVATE_orderByEquals(t, e) {\n    return t.dir === e.dir && t.field.isEqual(e.field);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A version of a document in Firestore. This corresponds to the version\n * timestamp, such as update_time or read_time.\n */ class SnapshotVersion {\n    constructor(t) {\n        this.timestamp = t;\n    }\n    static fromTimestamp(t) {\n        return new SnapshotVersion(t);\n    }\n    static min() {\n        return new SnapshotVersion(new Timestamp(0, 0));\n    }\n    static max() {\n        return new SnapshotVersion(new Timestamp(253402300799, 999999999));\n    }\n    compareTo(t) {\n        return this.timestamp._compareTo(t.timestamp);\n    }\n    isEqual(t) {\n        return this.timestamp.isEqual(t.timestamp);\n    }\n    /** Returns a number representation of the version for use in spec tests. */    toMicroseconds() {\n        // Convert to microseconds.\n        return 1e6 * this.timestamp.seconds + this.timestamp.nanoseconds / 1e3;\n    }\n    toString() {\n        return \"SnapshotVersion(\" + this.timestamp.toString() + \")\";\n    }\n    toTimestamp() {\n        return this.timestamp;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// An immutable sorted map implementation, based on a Left-leaning Red-Black\n// tree.\nclass SortedMap {\n    constructor(t, e) {\n        this.comparator = t, this.root = e || LLRBNode.EMPTY;\n    }\n    // Returns a copy of the map, with the specified key/value added or replaced.\n    insert(t, e) {\n        return new SortedMap(this.comparator, this.root.insert(t, e, this.comparator).copy(null, null, LLRBNode.BLACK, null, null));\n    }\n    // Returns a copy of the map, with the specified key removed.\n    remove(t) {\n        return new SortedMap(this.comparator, this.root.remove(t, this.comparator).copy(null, null, LLRBNode.BLACK, null, null));\n    }\n    // Returns the value of the node with the given key, or null.\n    get(t) {\n        let e = this.root;\n        for (;!e.isEmpty(); ) {\n            const r = this.comparator(t, e.key);\n            if (0 === r) return e.value;\n            r < 0 ? e = e.left : r > 0 && (e = e.right);\n        }\n        return null;\n    }\n    // Returns the index of the element in this sorted map, or -1 if it doesn't\n    // exist.\n    indexOf(t) {\n        // Number of nodes that were pruned when descending right\n        let e = 0, r = this.root;\n        for (;!r.isEmpty(); ) {\n            const n = this.comparator(t, r.key);\n            if (0 === n) return e + r.left.size;\n            n < 0 ? r = r.left : (\n            // Count all nodes left of the node plus the node itself\n            e += r.left.size + 1, r = r.right);\n        }\n        // Node not found\n                return -1;\n    }\n    isEmpty() {\n        return this.root.isEmpty();\n    }\n    // Returns the total number of nodes in the map.\n    get size() {\n        return this.root.size;\n    }\n    // Returns the minimum key in the map.\n    minKey() {\n        return this.root.minKey();\n    }\n    // Returns the maximum key in the map.\n    maxKey() {\n        return this.root.maxKey();\n    }\n    // Traverses the map in key order and calls the specified action function\n    // for each key/value pair. If action returns true, traversal is aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    inorderTraversal(t) {\n        return this.root.inorderTraversal(t);\n    }\n    forEach(t) {\n        this.inorderTraversal(((e, r) => (t(e, r), !1)));\n    }\n    toString() {\n        const t = [];\n        return this.inorderTraversal(((e, r) => (t.push(`${e}:${r}`), !1))), `{${t.join(\", \")}}`;\n    }\n    // Traverses the map in reverse key order and calls the specified action\n    // function for each key/value pair. If action returns true, traversal is\n    // aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    reverseTraversal(t) {\n        return this.root.reverseTraversal(t);\n    }\n    // Returns an iterator over the SortedMap.\n    getIterator() {\n        return new SortedMapIterator(this.root, null, this.comparator, !1);\n    }\n    getIteratorFrom(t) {\n        return new SortedMapIterator(this.root, t, this.comparator, !1);\n    }\n    getReverseIterator() {\n        return new SortedMapIterator(this.root, null, this.comparator, !0);\n    }\n    getReverseIteratorFrom(t) {\n        return new SortedMapIterator(this.root, t, this.comparator, !0);\n    }\n}\n\n // end SortedMap\n// An iterator over an LLRBNode.\nclass SortedMapIterator {\n    constructor(t, e, r, n) {\n        this.isReverse = n, this.nodeStack = [];\n        let i = 1;\n        for (;!t.isEmpty(); ) if (i = e ? r(t.key, e) : 1, \n        // flip the comparison if we're going in reverse\n        e && n && (i *= -1), i < 0) \n        // This node is less than our start key. ignore it\n        t = this.isReverse ? t.left : t.right; else {\n            if (0 === i) {\n                // This node is exactly equal to our start key. Push it on the stack,\n                // but stop iterating;\n                this.nodeStack.push(t);\n                break;\n            }\n            // This node is greater than our start key, add it to the stack and move\n            // to the next one\n            this.nodeStack.push(t), t = this.isReverse ? t.right : t.left;\n        }\n    }\n    getNext() {\n        let t = this.nodeStack.pop();\n        const e = {\n            key: t.key,\n            value: t.value\n        };\n        if (this.isReverse) for (t = t.left; !t.isEmpty(); ) this.nodeStack.push(t), t = t.right; else for (t = t.right; !t.isEmpty(); ) this.nodeStack.push(t), \n        t = t.left;\n        return e;\n    }\n    hasNext() {\n        return this.nodeStack.length > 0;\n    }\n    peek() {\n        if (0 === this.nodeStack.length) return null;\n        const t = this.nodeStack[this.nodeStack.length - 1];\n        return {\n            key: t.key,\n            value: t.value\n        };\n    }\n}\n\n // end SortedMapIterator\n// Represents a node in a Left-leaning Red-Black tree.\nclass LLRBNode {\n    constructor(t, e, r, n, i) {\n        this.key = t, this.value = e, this.color = null != r ? r : LLRBNode.RED, this.left = null != n ? n : LLRBNode.EMPTY, \n        this.right = null != i ? i : LLRBNode.EMPTY, this.size = this.left.size + 1 + this.right.size;\n    }\n    // Returns a copy of the current node, optionally replacing pieces of it.\n    copy(t, e, r, n, i) {\n        return new LLRBNode(null != t ? t : this.key, null != e ? e : this.value, null != r ? r : this.color, null != n ? n : this.left, null != i ? i : this.right);\n    }\n    isEmpty() {\n        return !1;\n    }\n    // Traverses the tree in key order and calls the specified action function\n    // for each node. If action returns true, traversal is aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    inorderTraversal(t) {\n        return this.left.inorderTraversal(t) || t(this.key, this.value) || this.right.inorderTraversal(t);\n    }\n    // Traverses the tree in reverse key order and calls the specified action\n    // function for each node. If action returns true, traversal is aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    reverseTraversal(t) {\n        return this.right.reverseTraversal(t) || t(this.key, this.value) || this.left.reverseTraversal(t);\n    }\n    // Returns the minimum node in the tree.\n    min() {\n        return this.left.isEmpty() ? this : this.left.min();\n    }\n    // Returns the maximum key in the tree.\n    minKey() {\n        return this.min().key;\n    }\n    // Returns the maximum key in the tree.\n    maxKey() {\n        return this.right.isEmpty() ? this.key : this.right.maxKey();\n    }\n    // Returns new tree, with the key/value added.\n    insert(t, e, r) {\n        let n = this;\n        const i = r(t, n.key);\n        return n = i < 0 ? n.copy(null, null, null, n.left.insert(t, e, r), null) : 0 === i ? n.copy(null, e, null, null, null) : n.copy(null, null, null, null, n.right.insert(t, e, r)), \n        n.fixUp();\n    }\n    removeMin() {\n        if (this.left.isEmpty()) return LLRBNode.EMPTY;\n        let t = this;\n        return t.left.isRed() || t.left.left.isRed() || (t = t.moveRedLeft()), t = t.copy(null, null, null, t.left.removeMin(), null), \n        t.fixUp();\n    }\n    // Returns new tree, with the specified item removed.\n    remove(t, e) {\n        let r, n = this;\n        if (e(t, n.key) < 0) n.left.isEmpty() || n.left.isRed() || n.left.left.isRed() || (n = n.moveRedLeft()), \n        n = n.copy(null, null, null, n.left.remove(t, e), null); else {\n            if (n.left.isRed() && (n = n.rotateRight()), n.right.isEmpty() || n.right.isRed() || n.right.left.isRed() || (n = n.moveRedRight()), \n            0 === e(t, n.key)) {\n                if (n.right.isEmpty()) return LLRBNode.EMPTY;\n                r = n.right.min(), n = n.copy(r.key, r.value, null, null, n.right.removeMin());\n            }\n            n = n.copy(null, null, null, null, n.right.remove(t, e));\n        }\n        return n.fixUp();\n    }\n    isRed() {\n        return this.color;\n    }\n    // Returns new tree after performing any needed rotations.\n    fixUp() {\n        let t = this;\n        return t.right.isRed() && !t.left.isRed() && (t = t.rotateLeft()), t.left.isRed() && t.left.left.isRed() && (t = t.rotateRight()), \n        t.left.isRed() && t.right.isRed() && (t = t.colorFlip()), t;\n    }\n    moveRedLeft() {\n        let t = this.colorFlip();\n        return t.right.left.isRed() && (t = t.copy(null, null, null, null, t.right.rotateRight()), \n        t = t.rotateLeft(), t = t.colorFlip()), t;\n    }\n    moveRedRight() {\n        let t = this.colorFlip();\n        return t.left.left.isRed() && (t = t.rotateRight(), t = t.colorFlip()), t;\n    }\n    rotateLeft() {\n        const t = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n        return this.right.copy(null, null, this.color, t, null);\n    }\n    rotateRight() {\n        const t = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n        return this.left.copy(null, null, this.color, null, t);\n    }\n    colorFlip() {\n        const t = this.left.copy(null, null, !this.left.color, null, null), e = this.right.copy(null, null, !this.right.color, null, null);\n        return this.copy(null, null, !this.color, t, e);\n    }\n    // For testing.\n    checkMaxDepth() {\n        const t = this.check();\n        return Math.pow(2, t) <= this.size + 1;\n    }\n    // In a balanced RB tree, the black-depth (number of black nodes) from root to\n    // leaves is equal on both sides.  This function verifies that or asserts.\n    check() {\n        if (this.isRed() && this.left.isRed()) throw fail();\n        if (this.right.isRed()) throw fail();\n        const t = this.left.check();\n        if (t !== this.right.check()) throw fail();\n        return t + (this.isRed() ? 0 : 1);\n    }\n}\n\n // end LLRBNode\n// Empty node is shared between all LLRB trees.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nLLRBNode.EMPTY = null, LLRBNode.RED = !0, LLRBNode.BLACK = !1;\n\n// end LLRBEmptyNode\nLLRBNode.EMPTY = new \n// Represents an empty node (a leaf node in the Red-Black Tree).\nclass LLRBEmptyNode {\n    constructor() {\n        this.size = 0;\n    }\n    get key() {\n        throw fail();\n    }\n    get value() {\n        throw fail();\n    }\n    get color() {\n        throw fail();\n    }\n    get left() {\n        throw fail();\n    }\n    get right() {\n        throw fail();\n    }\n    // Returns a copy of the current node.\n    copy(t, e, r, n, i) {\n        return this;\n    }\n    // Returns a copy of the tree, with the specified key/value added.\n    insert(t, e, r) {\n        return new LLRBNode(t, e);\n    }\n    // Returns a copy of the tree, with the specified key removed.\n    remove(t, e) {\n        return this;\n    }\n    isEmpty() {\n        return !0;\n    }\n    inorderTraversal(t) {\n        return !1;\n    }\n    reverseTraversal(t) {\n        return !1;\n    }\n    minKey() {\n        return null;\n    }\n    maxKey() {\n        return null;\n    }\n    isRed() {\n        return !1;\n    }\n    // For testing.\n    checkMaxDepth() {\n        return !0;\n    }\n    check() {\n        return 0;\n    }\n};\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * SortedSet is an immutable (copy-on-write) collection that holds elements\n * in order specified by the provided comparator.\n *\n * NOTE: if provided comparator returns 0 for two elements, we consider them to\n * be equal!\n */\nclass SortedSet {\n    constructor(t) {\n        this.comparator = t, this.data = new SortedMap(this.comparator);\n    }\n    has(t) {\n        return null !== this.data.get(t);\n    }\n    first() {\n        return this.data.minKey();\n    }\n    last() {\n        return this.data.maxKey();\n    }\n    get size() {\n        return this.data.size;\n    }\n    indexOf(t) {\n        return this.data.indexOf(t);\n    }\n    /** Iterates elements in order defined by \"comparator\" */    forEach(t) {\n        this.data.inorderTraversal(((e, r) => (t(e), !1)));\n    }\n    /** Iterates over `elem`s such that: range[0] &lt;= elem &lt; range[1]. */    forEachInRange(t, e) {\n        const r = this.data.getIteratorFrom(t[0]);\n        for (;r.hasNext(); ) {\n            const n = r.getNext();\n            if (this.comparator(n.key, t[1]) >= 0) return;\n            e(n.key);\n        }\n    }\n    /**\n     * Iterates over `elem`s such that: start &lt;= elem until false is returned.\n     */    forEachWhile(t, e) {\n        let r;\n        for (r = void 0 !== e ? this.data.getIteratorFrom(e) : this.data.getIterator(); r.hasNext(); ) {\n            if (!t(r.getNext().key)) return;\n        }\n    }\n    /** Finds the least element greater than or equal to `elem`. */    firstAfterOrEqual(t) {\n        const e = this.data.getIteratorFrom(t);\n        return e.hasNext() ? e.getNext().key : null;\n    }\n    getIterator() {\n        return new SortedSetIterator(this.data.getIterator());\n    }\n    getIteratorFrom(t) {\n        return new SortedSetIterator(this.data.getIteratorFrom(t));\n    }\n    /** Inserts or updates an element */    add(t) {\n        return this.copy(this.data.remove(t).insert(t, !0));\n    }\n    /** Deletes an element */    delete(t) {\n        return this.has(t) ? this.copy(this.data.remove(t)) : this;\n    }\n    isEmpty() {\n        return this.data.isEmpty();\n    }\n    unionWith(t) {\n        let e = this;\n        // Make sure `result` always refers to the larger one of the two sets.\n                return e.size < t.size && (e = t, t = this), t.forEach((t => {\n            e = e.add(t);\n        })), e;\n    }\n    isEqual(t) {\n        if (!(t instanceof SortedSet)) return !1;\n        if (this.size !== t.size) return !1;\n        const e = this.data.getIterator(), r = t.data.getIterator();\n        for (;e.hasNext(); ) {\n            const t = e.getNext().key, n = r.getNext().key;\n            if (0 !== this.comparator(t, n)) return !1;\n        }\n        return !0;\n    }\n    toArray() {\n        const t = [];\n        return this.forEach((e => {\n            t.push(e);\n        })), t;\n    }\n    toString() {\n        const t = [];\n        return this.forEach((e => t.push(e))), \"SortedSet(\" + t.toString() + \")\";\n    }\n    copy(t) {\n        const e = new SortedSet(this.comparator);\n        return e.data = t, e;\n    }\n}\n\nclass SortedSetIterator {\n    constructor(t) {\n        this.iter = t;\n    }\n    getNext() {\n        return this.iter.getNext().key;\n    }\n    hasNext() {\n        return this.iter.hasNext();\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Provides a set of fields that can be used to partially patch a document.\n * FieldMask is used in conjunction with ObjectValue.\n * Examples:\n *   foo - Overwrites foo entirely with the provided value. If foo is not\n *         present in the companion ObjectValue, the field is deleted.\n *   foo.bar - Overwrites only the field bar of the object foo.\n *             If foo is not an object, foo is replaced with an object\n *             containing foo\n */ class FieldMask {\n    constructor(t) {\n        this.fields = t, \n        // TODO(dimond): validation of FieldMask\n        // Sort the field mask to support `FieldMask.isEqual()` and assert below.\n        t.sort(FieldPath$1.comparator);\n    }\n    static empty() {\n        return new FieldMask([]);\n    }\n    /**\n     * Returns a new FieldMask object that is the result of adding all the given\n     * fields paths to this field mask.\n     */    unionWith(t) {\n        let e = new SortedSet(FieldPath$1.comparator);\n        for (const t of this.fields) e = e.add(t);\n        for (const r of t) e = e.add(r);\n        return new FieldMask(e.toArray());\n    }\n    /**\n     * Verifies that `fieldPath` is included by at least one field in this field\n     * mask.\n     *\n     * This is an O(n) operation, where `n` is the size of the field mask.\n     */    covers(t) {\n        for (const e of this.fields) if (e.isPrefixOf(t)) return !0;\n        return !1;\n    }\n    isEqual(t) {\n        return __PRIVATE_arrayEquals(this.fields, t.fields, ((t, e) => t.isEqual(e)));\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An ObjectValue represents a MapValue in the Firestore Proto and offers the\n * ability to add and remove fields (via the ObjectValueBuilder).\n */ class ObjectValue {\n    constructor(t) {\n        this.value = t;\n    }\n    static empty() {\n        return new ObjectValue({\n            mapValue: {}\n        });\n    }\n    /**\n     * Returns the value at the given path or null.\n     *\n     * @param path - the path to search\n     * @returns The value at the path or null if the path is not set.\n     */    field(t) {\n        if (t.isEmpty()) return this.value;\n        {\n            let e = this.value;\n            for (let r = 0; r < t.length - 1; ++r) if (e = (e.mapValue.fields || {})[t.get(r)], \n            !__PRIVATE_isMapValue(e)) return null;\n            return e = (e.mapValue.fields || {})[t.lastSegment()], e || null;\n        }\n    }\n    /**\n     * Sets the field to the provided value.\n     *\n     * @param path - The field path to set.\n     * @param value - The value to set.\n     */    set(t, e) {\n        this.getFieldsMap(t.popLast())[t.lastSegment()] = __PRIVATE_deepClone(e);\n    }\n    /**\n     * Sets the provided fields to the provided values.\n     *\n     * @param data - A map of fields to values (or null for deletes).\n     */    setAll(t) {\n        let e = FieldPath$1.emptyPath(), r = {}, n = [];\n        t.forEach(((t, i) => {\n            if (!e.isImmediateParentOf(i)) {\n                // Insert the accumulated changes at this parent location\n                const t = this.getFieldsMap(e);\n                this.applyChanges(t, r, n), r = {}, n = [], e = i.popLast();\n            }\n            t ? r[i.lastSegment()] = __PRIVATE_deepClone(t) : n.push(i.lastSegment());\n        }));\n        const i = this.getFieldsMap(e);\n        this.applyChanges(i, r, n);\n    }\n    /**\n     * Removes the field at the specified path. If there is no field at the\n     * specified path, nothing is changed.\n     *\n     * @param path - The field path to remove.\n     */    delete(t) {\n        const e = this.field(t.popLast());\n        __PRIVATE_isMapValue(e) && e.mapValue.fields && delete e.mapValue.fields[t.lastSegment()];\n    }\n    isEqual(t) {\n        return __PRIVATE_valueEquals(this.value, t.value);\n    }\n    /**\n     * Returns the map that contains the leaf element of `path`. If the parent\n     * entry does not yet exist, or if it is not a map, a new map will be created.\n     */    getFieldsMap(t) {\n        let e = this.value;\n        e.mapValue.fields || (e.mapValue = {\n            fields: {}\n        });\n        for (let r = 0; r < t.length; ++r) {\n            let n = e.mapValue.fields[t.get(r)];\n            __PRIVATE_isMapValue(n) && n.mapValue.fields || (n = {\n                mapValue: {\n                    fields: {}\n                }\n            }, e.mapValue.fields[t.get(r)] = n), e = n;\n        }\n        return e.mapValue.fields;\n    }\n    /**\n     * Modifies `fieldsMap` by adding, replacing or deleting the specified\n     * entries.\n     */    applyChanges(t, e, r) {\n        forEach(e, ((e, r) => t[e] = r));\n        for (const e of r) delete t[e];\n    }\n    clone() {\n        return new ObjectValue(__PRIVATE_deepClone(this.value));\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Represents a document in Firestore with a key, version, data and whether it\n * has local mutations applied to it.\n *\n * Documents can transition between states via `convertToFoundDocument()`,\n * `convertToNoDocument()` and `convertToUnknownDocument()`. If a document does\n * not transition to one of these states even after all mutations have been\n * applied, `isValidDocument()` returns false and the document should be removed\n * from all views.\n */ class MutableDocument {\n    constructor(t, e, r, n, i, s, o) {\n        this.key = t, this.documentType = e, this.version = r, this.readTime = n, this.createTime = i, \n        this.data = s, this.documentState = o;\n    }\n    /**\n     * Creates a document with no known version or data, but which can serve as\n     * base document for mutations.\n     */    static newInvalidDocument(t) {\n        return new MutableDocument(t, 0 /* DocumentType.INVALID */ , \n        /* version */ SnapshotVersion.min(), \n        /* readTime */ SnapshotVersion.min(), \n        /* createTime */ SnapshotVersion.min(), ObjectValue.empty(), 0 /* DocumentState.SYNCED */);\n    }\n    /**\n     * Creates a new document that is known to exist with the given data at the\n     * given version.\n     */    static newFoundDocument(t, e, r, n) {\n        return new MutableDocument(t, 1 /* DocumentType.FOUND_DOCUMENT */ , \n        /* version */ e, \n        /* readTime */ SnapshotVersion.min(), \n        /* createTime */ r, n, 0 /* DocumentState.SYNCED */);\n    }\n    /** Creates a new document that is known to not exist at the given version. */    static newNoDocument(t, e) {\n        return new MutableDocument(t, 2 /* DocumentType.NO_DOCUMENT */ , \n        /* version */ e, \n        /* readTime */ SnapshotVersion.min(), \n        /* createTime */ SnapshotVersion.min(), ObjectValue.empty(), 0 /* DocumentState.SYNCED */);\n    }\n    /**\n     * Creates a new document that is known to exist at the given version but\n     * whose data is not known (e.g. a document that was updated without a known\n     * base document).\n     */    static newUnknownDocument(t, e) {\n        return new MutableDocument(t, 3 /* DocumentType.UNKNOWN_DOCUMENT */ , \n        /* version */ e, \n        /* readTime */ SnapshotVersion.min(), \n        /* createTime */ SnapshotVersion.min(), ObjectValue.empty(), 2 /* DocumentState.HAS_COMMITTED_MUTATIONS */);\n    }\n    /**\n     * Changes the document type to indicate that it exists and that its version\n     * and data are known.\n     */    convertToFoundDocument(t, e) {\n        // If a document is switching state from being an invalid or deleted\n        // document to a valid (FOUND_DOCUMENT) document, either due to receiving an\n        // update from Watch or due to applying a local set mutation on top\n        // of a deleted document, our best guess about its createTime would be the\n        // version at which the document transitioned to a FOUND_DOCUMENT.\n        return !this.createTime.isEqual(SnapshotVersion.min()) || 2 /* DocumentType.NO_DOCUMENT */ !== this.documentType && 0 /* DocumentType.INVALID */ !== this.documentType || (this.createTime = t), \n        this.version = t, this.documentType = 1 /* DocumentType.FOUND_DOCUMENT */ , this.data = e, \n        this.documentState = 0 /* DocumentState.SYNCED */ , this;\n    }\n    /**\n     * Changes the document type to indicate that it doesn't exist at the given\n     * version.\n     */    convertToNoDocument(t) {\n        return this.version = t, this.documentType = 2 /* DocumentType.NO_DOCUMENT */ , \n        this.data = ObjectValue.empty(), this.documentState = 0 /* DocumentState.SYNCED */ , \n        this;\n    }\n    /**\n     * Changes the document type to indicate that it exists at a given version but\n     * that its data is not known (e.g. a document that was updated without a known\n     * base document).\n     */    convertToUnknownDocument(t) {\n        return this.version = t, this.documentType = 3 /* DocumentType.UNKNOWN_DOCUMENT */ , \n        this.data = ObjectValue.empty(), this.documentState = 2 /* DocumentState.HAS_COMMITTED_MUTATIONS */ , \n        this;\n    }\n    setHasCommittedMutations() {\n        return this.documentState = 2 /* DocumentState.HAS_COMMITTED_MUTATIONS */ , this;\n    }\n    setHasLocalMutations() {\n        return this.documentState = 1 /* DocumentState.HAS_LOCAL_MUTATIONS */ , this.version = SnapshotVersion.min(), \n        this;\n    }\n    setReadTime(t) {\n        return this.readTime = t, this;\n    }\n    get hasLocalMutations() {\n        return 1 /* DocumentState.HAS_LOCAL_MUTATIONS */ === this.documentState;\n    }\n    get hasCommittedMutations() {\n        return 2 /* DocumentState.HAS_COMMITTED_MUTATIONS */ === this.documentState;\n    }\n    get hasPendingWrites() {\n        return this.hasLocalMutations || this.hasCommittedMutations;\n    }\n    isValidDocument() {\n        return 0 /* DocumentType.INVALID */ !== this.documentType;\n    }\n    isFoundDocument() {\n        return 1 /* DocumentType.FOUND_DOCUMENT */ === this.documentType;\n    }\n    isNoDocument() {\n        return 2 /* DocumentType.NO_DOCUMENT */ === this.documentType;\n    }\n    isUnknownDocument() {\n        return 3 /* DocumentType.UNKNOWN_DOCUMENT */ === this.documentType;\n    }\n    isEqual(t) {\n        return t instanceof MutableDocument && this.key.isEqual(t.key) && this.version.isEqual(t.version) && this.documentType === t.documentType && this.documentState === t.documentState && this.data.isEqual(t.data);\n    }\n    mutableCopy() {\n        return new MutableDocument(this.key, this.documentType, this.version, this.readTime, this.createTime, this.data.clone(), this.documentState);\n    }\n    toString() {\n        return `Document(${this.key}, ${this.version}, ${JSON.stringify(this.data.value)}, {createTime: ${this.createTime}}), {documentType: ${this.documentType}}), {documentState: ${this.documentState}})`;\n    }\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Visible for testing\nclass __PRIVATE_TargetImpl {\n    constructor(t, e = null, r = [], n = [], i = null, s = null, o = null) {\n        this.path = t, this.collectionGroup = e, this.orderBy = r, this.filters = n, this.limit = i, \n        this.startAt = s, this.endAt = o, this.O = null;\n    }\n}\n\n/**\n * Initializes a Target with a path and optional additional query constraints.\n * Path must currently be empty if this is a collection group query.\n *\n * NOTE: you should always construct `Target` from `Query.toTarget` instead of\n * using this factory method, because `Query` provides an implicit `orderBy`\n * property.\n */ function __PRIVATE_newTarget(t, e = null, r = [], n = [], i = null, s = null, o = null) {\n    return new __PRIVATE_TargetImpl(t, e, r, n, i, s, o);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Query encapsulates all the query attributes we support in the SDK. It can\n * be run against the LocalStore, as well as be converted to a `Target` to\n * query the RemoteStore results.\n *\n * Visible for testing.\n */\nclass __PRIVATE_QueryImpl {\n    /**\n     * Initializes a Query with a path and optional additional query constraints.\n     * Path must currently be empty if this is a collection group query.\n     */\n    constructor(t, e = null, r = [], n = [], i = null, s = \"F\" /* LimitType.First */ , o = null, a = null) {\n        this.path = t, this.collectionGroup = e, this.explicitOrderBy = r, this.filters = n, \n        this.limit = i, this.limitType = s, this.startAt = o, this.endAt = a, this.q = null, \n        // The corresponding `Target` of this `Query` instance, for use with\n        // non-aggregate queries.\n        this.B = null, \n        // The corresponding `Target` of this `Query` instance, for use with\n        // aggregate queries. Unlike targets for non-aggregate queries,\n        // aggregate query targets do not contain normalized order-bys, they only\n        // contain explicit order-bys.\n        this.$ = null, this.startAt, this.endAt;\n    }\n}\n\n/** Creates a new Query for a query that matches all documents at `path` */ function __PRIVATE_getFirstOrderByField(t) {\n    return t.explicitOrderBy.length > 0 ? t.explicitOrderBy[0].field : null;\n}\n\nfunction __PRIVATE_getInequalityFilterField(t) {\n    for (const e of t.filters) {\n        const t = e.getFirstInequalityField();\n        if (null !== t) return t;\n    }\n    return null;\n}\n\n/**\n * Creates a new Query for a collection group query that matches all documents\n * within the provided collection group.\n */\n/**\n * Returns whether the query matches a collection group rather than a specific\n * collection.\n */\nfunction __PRIVATE_isCollectionGroupQuery(t) {\n    return null !== t.collectionGroup;\n}\n\n/**\n * Returns the normalized order-by constraint that is used to execute the Query,\n * which can be different from the order-by constraints the user provided (e.g.\n * the SDK and backend always orders by `__name__`). The normalized order-by\n * includes implicit order-bys in addition to the explicit user provided\n * order-bys.\n */ function __PRIVATE_queryNormalizedOrderBy(t) {\n    const e = __PRIVATE_debugCast(t);\n    if (null === e.q) {\n        e.q = [];\n        const t = __PRIVATE_getInequalityFilterField(e), r = __PRIVATE_getFirstOrderByField(e);\n        if (null !== t && null === r) \n        // In order to implicitly add key ordering, we must also add the\n        // inequality filter field for it to be a valid query.\n        // Note that the default inequality field and key ordering is ascending.\n        t.isKeyField() || e.q.push(new OrderBy(t)), e.q.push(new OrderBy(FieldPath$1.keyField(), \"asc\" /* Direction.ASCENDING */)); else {\n            let t = !1;\n            for (const r of e.explicitOrderBy) e.q.push(r), r.field.isKeyField() && (t = !0);\n            if (!t) {\n                // The order of the implicit key ordering always matches the last\n                // explicit order-by\n                const t = e.explicitOrderBy.length > 0 ? e.explicitOrderBy[e.explicitOrderBy.length - 1].dir : \"asc\" /* Direction.ASCENDING */;\n                e.q.push(new OrderBy(FieldPath$1.keyField(), t));\n            }\n        }\n    }\n    return e.q;\n}\n\n/**\n * Converts this `Query` instance to its corresponding `Target` representation.\n */ function __PRIVATE_queryToTarget(t) {\n    const e = __PRIVATE_debugCast(t);\n    return e.B || (e.B = __PRIVATE__queryToTarget(e, __PRIVATE_queryNormalizedOrderBy(t))), \n    e.B;\n}\n\n/**\n * Converts this `Query` instance to its corresponding `Target` representation,\n * for use within an aggregate query. Unlike targets for non-aggregate queries,\n * aggregate query targets do not contain normalized order-bys, they only\n * contain explicit order-bys.\n */ function __PRIVATE__queryToTarget(t, e) {\n    if (\"F\" /* LimitType.First */ === t.limitType) return __PRIVATE_newTarget(t.path, t.collectionGroup, e, t.filters, t.limit, t.startAt, t.endAt);\n    {\n        // Flip the orderBy directions since we want the last results\n        e = e.map((t => {\n            const e = \"desc\" /* Direction.DESCENDING */ === t.dir ? \"asc\" /* Direction.ASCENDING */ : \"desc\" /* Direction.DESCENDING */;\n            return new OrderBy(t.field, e);\n        }));\n        // We need to swap the cursors to match the now-flipped query ordering.\n        const r = t.endAt ? new Bound(t.endAt.position, t.endAt.inclusive) : null, n = t.startAt ? new Bound(t.startAt.position, t.startAt.inclusive) : null;\n        // Now return as a LimitType.First query.\n        return __PRIVATE_newTarget(t.path, t.collectionGroup, e, t.filters, t.limit, r, n);\n    }\n}\n\nfunction __PRIVATE_queryWithAddedFilter(t, e) {\n    e.getFirstInequalityField(), __PRIVATE_getInequalityFilterField(t);\n    const r = t.filters.concat([ e ]);\n    return new __PRIVATE_QueryImpl(t.path, t.collectionGroup, t.explicitOrderBy.slice(), r, t.limit, t.limitType, t.startAt, t.endAt);\n}\n\nfunction __PRIVATE_queryEquals(t, e) {\n    return function __PRIVATE_targetEquals(t, e) {\n        if (t.limit !== e.limit) return !1;\n        if (t.orderBy.length !== e.orderBy.length) return !1;\n        for (let r = 0; r < t.orderBy.length; r++) if (!__PRIVATE_orderByEquals(t.orderBy[r], e.orderBy[r])) return !1;\n        if (t.filters.length !== e.filters.length) return !1;\n        for (let r = 0; r < t.filters.length; r++) if (!__PRIVATE_filterEquals(t.filters[r], e.filters[r])) return !1;\n        return t.collectionGroup === e.collectionGroup && !!t.path.isEqual(e.path) && !!__PRIVATE_boundEquals(t.startAt, e.startAt) && __PRIVATE_boundEquals(t.endAt, e.endAt);\n    }(__PRIVATE_queryToTarget(t), __PRIVATE_queryToTarget(e)) && t.limitType === e.limitType;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns an DoubleValue for `value` that is encoded based the serializer's\n * `useProto3Json` setting.\n */\n/**\n * Returns a value for a number that's appropriate to put into a proto.\n * The return value is an IntegerValue if it can safely represent the value,\n * otherwise a DoubleValue is returned.\n */\nfunction toNumber(t, e) {\n    return function isSafeInteger(t) {\n        return \"number\" == typeof t && Number.isInteger(t) && !__PRIVATE_isNegativeZero(t) && t <= Number.MAX_SAFE_INTEGER && t >= Number.MIN_SAFE_INTEGER;\n    }(e) ? \n    /**\n * Returns an IntegerValue for `value`.\n */\n    function __PRIVATE_toInteger(t) {\n        return {\n            integerValue: \"\" + t\n        };\n    }(e) : function __PRIVATE_toDouble(t, e) {\n        if (t.useProto3Json) {\n            if (isNaN(e)) return {\n                doubleValue: \"NaN\"\n            };\n            if (e === 1 / 0) return {\n                doubleValue: \"Infinity\"\n            };\n            if (e === -1 / 0) return {\n                doubleValue: \"-Infinity\"\n            };\n        }\n        return {\n            doubleValue: __PRIVATE_isNegativeZero(e) ? \"-0\" : e\n        };\n    }(t, e);\n}\n\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Used to represent a field transform on a mutation. */ class TransformOperation {\n    constructor() {\n        // Make sure that the structural type of `TransformOperation` is unique.\n        // See https://github.com/microsoft/TypeScript/issues/5451\n        this._ = void 0;\n    }\n}\n\n/** Transforms a value into a server-generated timestamp. */ class __PRIVATE_ServerTimestampTransform extends TransformOperation {}\n\n/** Transforms an array value via a union operation. */ class __PRIVATE_ArrayUnionTransformOperation extends TransformOperation {\n    constructor(t) {\n        super(), this.elements = t;\n    }\n}\n\n/** Transforms an array value via a remove operation. */ class __PRIVATE_ArrayRemoveTransformOperation extends TransformOperation {\n    constructor(t) {\n        super(), this.elements = t;\n    }\n}\n\n/**\n * Implements the backend semantics for locally computed NUMERIC_ADD (increment)\n * transforms. Converts all field values to integers or doubles, but unlike the\n * backend does not cap integer values at 2^63. Instead, JavaScript number\n * arithmetic is used and precision loss can occur for values greater than 2^53.\n */ class __PRIVATE_NumericIncrementTransformOperation extends TransformOperation {\n    constructor(t, e) {\n        super(), this.serializer = t, this.L = e;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** A field path and the TransformOperation to perform upon it. */ class FieldTransform {\n    constructor(t, e) {\n        this.field = t, this.transform = e;\n    }\n}\n\n/**\n * Encodes a precondition for a mutation. This follows the model that the\n * backend accepts with the special case of an explicit \"empty\" precondition\n * (meaning no precondition).\n */ class Precondition {\n    constructor(t, e) {\n        this.updateTime = t, this.exists = e;\n    }\n    /** Creates a new empty Precondition. */    static none() {\n        return new Precondition;\n    }\n    /** Creates a new Precondition with an exists flag. */    static exists(t) {\n        return new Precondition(void 0, t);\n    }\n    /** Creates a new Precondition based on a version a document exists at. */    static updateTime(t) {\n        return new Precondition(t);\n    }\n    /** Returns whether this Precondition is empty. */    get isNone() {\n        return void 0 === this.updateTime && void 0 === this.exists;\n    }\n    isEqual(t) {\n        return this.exists === t.exists && (this.updateTime ? !!t.updateTime && this.updateTime.isEqual(t.updateTime) : !t.updateTime);\n    }\n}\n\n/**\n * A mutation describes a self-contained change to a document. Mutations can\n * create, replace, delete, and update subsets of documents.\n *\n * Mutations not only act on the value of the document but also its version.\n *\n * For local mutations (mutations that haven't been committed yet), we preserve\n * the existing version for Set and Patch mutations. For Delete mutations, we\n * reset the version to 0.\n *\n * Here's the expected transition table.\n *\n * MUTATION           APPLIED TO            RESULTS IN\n *\n * SetMutation        Document(v3)          Document(v3)\n * SetMutation        NoDocument(v3)        Document(v0)\n * SetMutation        InvalidDocument(v0)   Document(v0)\n * PatchMutation      Document(v3)          Document(v3)\n * PatchMutation      NoDocument(v3)        NoDocument(v3)\n * PatchMutation      InvalidDocument(v0)   UnknownDocument(v3)\n * DeleteMutation     Document(v3)          NoDocument(v0)\n * DeleteMutation     NoDocument(v3)        NoDocument(v0)\n * DeleteMutation     InvalidDocument(v0)   NoDocument(v0)\n *\n * For acknowledged mutations, we use the updateTime of the WriteResponse as\n * the resulting version for Set and Patch mutations. As deletes have no\n * explicit update time, we use the commitTime of the WriteResponse for\n * Delete mutations.\n *\n * If a mutation is acknowledged by the backend but fails the precondition check\n * locally, we transition to an `UnknownDocument` and rely on Watch to send us\n * the updated version.\n *\n * Field transforms are used only with Patch and Set Mutations. We use the\n * `updateTransforms` message to store transforms, rather than the `transforms`s\n * messages.\n *\n * ## Subclassing Notes\n *\n * Every type of mutation needs to implement its own applyToRemoteDocument() and\n * applyToLocalView() to implement the actual behavior of applying the mutation\n * to some source document (see `setMutationApplyToRemoteDocument()` for an\n * example).\n */ class Mutation {}\n\n/**\n * A mutation that creates or replaces the document at the given key with the\n * object value contents.\n */ class __PRIVATE_SetMutation extends Mutation {\n    constructor(t, e, r, n = []) {\n        super(), this.key = t, this.value = e, this.precondition = r, this.fieldTransforms = n, \n        this.type = 0 /* MutationType.Set */;\n    }\n    getFieldMask() {\n        return null;\n    }\n}\n\n/**\n * A mutation that modifies fields of the document at the given key with the\n * given values. The values are applied through a field mask:\n *\n *  * When a field is in both the mask and the values, the corresponding field\n *    is updated.\n *  * When a field is in neither the mask nor the values, the corresponding\n *    field is unmodified.\n *  * When a field is in the mask but not in the values, the corresponding field\n *    is deleted.\n *  * When a field is not in the mask but is in the values, the values map is\n *    ignored.\n */ class __PRIVATE_PatchMutation extends Mutation {\n    constructor(t, e, r, n, i = []) {\n        super(), this.key = t, this.data = e, this.fieldMask = r, this.precondition = n, \n        this.fieldTransforms = i, this.type = 1 /* MutationType.Patch */;\n    }\n    getFieldMask() {\n        return this.fieldMask;\n    }\n}\n\n/** A mutation that deletes the document at the given key. */ class __PRIVATE_DeleteMutation extends Mutation {\n    constructor(t, e) {\n        super(), this.key = t, this.precondition = e, this.type = 2 /* MutationType.Delete */ , \n        this.fieldTransforms = [];\n    }\n    getFieldMask() {\n        return null;\n    }\n}\n\n/**\n * A mutation that verifies the existence of the document at the given key with\n * the provided precondition.\n *\n * The `verify` operation is only used in Transactions, and this class serves\n * primarily to facilitate serialization into protos.\n */ class __PRIVATE_VerifyMutation extends Mutation {\n    constructor(t, e) {\n        super(), this.key = t, this.precondition = e, this.type = 3 /* MutationType.Verify */ , \n        this.fieldTransforms = [];\n    }\n    getFieldMask() {\n        return null;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ const L = (() => {\n    const t = {\n        asc: \"ASCENDING\",\n        desc: \"DESCENDING\"\n    };\n    return t;\n})(), M = (() => {\n    const t = {\n        \"<\": \"LESS_THAN\",\n        \"<=\": \"LESS_THAN_OR_EQUAL\",\n        \">\": \"GREATER_THAN\",\n        \">=\": \"GREATER_THAN_OR_EQUAL\",\n        \"==\": \"EQUAL\",\n        \"!=\": \"NOT_EQUAL\",\n        \"array-contains\": \"ARRAY_CONTAINS\",\n        in: \"IN\",\n        \"not-in\": \"NOT_IN\",\n        \"array-contains-any\": \"ARRAY_CONTAINS_ANY\"\n    };\n    return t;\n})(), x = (() => {\n    const t = {\n        and: \"AND\",\n        or: \"OR\"\n    };\n    return t;\n})();\n\n/**\n * This class generates JsonObject values for the Datastore API suitable for\n * sending to either GRPC stub methods or via the JSON/HTTP REST API.\n *\n * The serializer supports both Protobuf.js and Proto3 JSON formats. By\n * setting `useProto3Json` to true, the serializer will use the Proto3 JSON\n * format.\n *\n * For a description of the Proto3 JSON format check\n * https://developers.google.com/protocol-buffers/docs/proto3#json\n *\n * TODO(klimt): We can remove the databaseId argument if we keep the full\n * resource name in documents.\n */\nclass JsonProtoSerializer {\n    constructor(t, e) {\n        this.databaseId = t, this.useProto3Json = e;\n    }\n}\n\n/**\n * Returns a value for a number (or null) that's appropriate to put into\n * a google.protobuf.Int32Value proto.\n * DO NOT USE THIS FOR ANYTHING ELSE.\n * This method cheats. It's typed as returning \"number\" because that's what\n * our generated proto interfaces say Int32Value must be. But GRPC actually\n * expects a { value: <number> } struct.\n */\n/**\n * Returns a value for a Date that's appropriate to put into a proto.\n */\nfunction toTimestamp(t, e) {\n    if (t.useProto3Json) {\n        return `${new Date(1e3 * e.seconds).toISOString().replace(/\\.\\d*/, \"\").replace(\"Z\", \"\")}.${(\"000000000\" + e.nanoseconds).slice(-9)}Z`;\n    }\n    return {\n        seconds: \"\" + e.seconds,\n        nanos: e.nanoseconds\n    };\n}\n\n/**\n * Returns a value for bytes that's appropriate to put in a proto.\n *\n * Visible for testing.\n */\nfunction __PRIVATE_toBytes(t, e) {\n    return t.useProto3Json ? e.toBase64() : e.toUint8Array();\n}\n\nfunction __PRIVATE_toVersion(t, e) {\n    return toTimestamp(t, e.toTimestamp());\n}\n\nfunction __PRIVATE_fromVersion(t) {\n    return __PRIVATE_hardAssert(!!t), SnapshotVersion.fromTimestamp(function fromTimestamp(t) {\n        const e = __PRIVATE_normalizeTimestamp(t);\n        return new Timestamp(e.seconds, e.nanos);\n    }(t));\n}\n\nfunction __PRIVATE_toResourceName(t, e) {\n    return function __PRIVATE_fullyQualifiedPrefixPath(t) {\n        return new ResourcePath([ \"projects\", t.projectId, \"databases\", t.database ]);\n    }(t).child(\"documents\").child(e).canonicalString();\n}\n\nfunction __PRIVATE_toName(t, e) {\n    return __PRIVATE_toResourceName(t.databaseId, e.path);\n}\n\nfunction fromName(t, e) {\n    const r = function __PRIVATE_fromResourceName(t) {\n        const e = ResourcePath.fromString(t);\n        return __PRIVATE_hardAssert(__PRIVATE_isValidResourceName(e)), e;\n    }(e);\n    if (r.get(1) !== t.databaseId.projectId) throw new FirestoreError(T, \"Tried to deserialize key from different project: \" + r.get(1) + \" vs \" + t.databaseId.projectId);\n    if (r.get(3) !== t.databaseId.database) throw new FirestoreError(T, \"Tried to deserialize key from different database: \" + r.get(3) + \" vs \" + t.databaseId.database);\n    return new DocumentKey(function __PRIVATE_extractLocalPathFromResourceName(t) {\n        return __PRIVATE_hardAssert(t.length > 4 && \"documents\" === t.get(4)), t.popFirst(5);\n    }\n    /** Creates a Document proto from key and fields (but no create/update time) */ (r));\n}\n\nfunction __PRIVATE_toQueryPath(t, e) {\n    return __PRIVATE_toResourceName(t.databaseId, e);\n}\n\nfunction __PRIVATE_getEncodedDatabaseId(t) {\n    return new ResourcePath([ \"projects\", t.databaseId.projectId, \"databases\", t.databaseId.database ]).canonicalString();\n}\n\nfunction __PRIVATE_toMutationDocument(t, e, r) {\n    return {\n        name: __PRIVATE_toName(t, e),\n        fields: r.value.mapValue.fields\n    };\n}\n\nfunction __PRIVATE_fromBatchGetDocumentsResponse(t, e) {\n    return \"found\" in e ? function __PRIVATE_fromFound(t, e) {\n        __PRIVATE_hardAssert(!!e.found), e.found.name, e.found.updateTime;\n        const r = fromName(t, e.found.name), n = __PRIVATE_fromVersion(e.found.updateTime), i = e.found.createTime ? __PRIVATE_fromVersion(e.found.createTime) : SnapshotVersion.min(), s = new ObjectValue({\n            mapValue: {\n                fields: e.found.fields\n            }\n        });\n        return MutableDocument.newFoundDocument(r, n, i, s);\n    }(t, e) : \"missing\" in e ? function __PRIVATE_fromMissing(t, e) {\n        __PRIVATE_hardAssert(!!e.missing), __PRIVATE_hardAssert(!!e.readTime);\n        const r = fromName(t, e.missing), n = __PRIVATE_fromVersion(e.readTime);\n        return MutableDocument.newNoDocument(r, n);\n    }(t, e) : fail();\n}\n\nfunction toMutation(t, e) {\n    let r;\n    if (e instanceof __PRIVATE_SetMutation) r = {\n        update: __PRIVATE_toMutationDocument(t, e.key, e.value)\n    }; else if (e instanceof __PRIVATE_DeleteMutation) r = {\n        delete: __PRIVATE_toName(t, e.key)\n    }; else if (e instanceof __PRIVATE_PatchMutation) r = {\n        update: __PRIVATE_toMutationDocument(t, e.key, e.data),\n        updateMask: __PRIVATE_toDocumentMask(e.fieldMask)\n    }; else {\n        if (!(e instanceof __PRIVATE_VerifyMutation)) return fail();\n        r = {\n            verify: __PRIVATE_toName(t, e.key)\n        };\n    }\n    return e.fieldTransforms.length > 0 && (r.updateTransforms = e.fieldTransforms.map((t => function __PRIVATE_toFieldTransform(t, e) {\n        const r = e.transform;\n        if (r instanceof __PRIVATE_ServerTimestampTransform) return {\n            fieldPath: e.field.canonicalString(),\n            setToServerValue: \"REQUEST_TIME\"\n        };\n        if (r instanceof __PRIVATE_ArrayUnionTransformOperation) return {\n            fieldPath: e.field.canonicalString(),\n            appendMissingElements: {\n                values: r.elements\n            }\n        };\n        if (r instanceof __PRIVATE_ArrayRemoveTransformOperation) return {\n            fieldPath: e.field.canonicalString(),\n            removeAllFromArray: {\n                values: r.elements\n            }\n        };\n        if (r instanceof __PRIVATE_NumericIncrementTransformOperation) return {\n            fieldPath: e.field.canonicalString(),\n            increment: r.L\n        };\n        throw fail();\n    }(0, t)))), e.precondition.isNone || (r.currentDocument = function __PRIVATE_toPrecondition(t, e) {\n        return void 0 !== e.updateTime ? {\n            updateTime: __PRIVATE_toVersion(t, e.updateTime)\n        } : void 0 !== e.exists ? {\n            exists: e.exists\n        } : fail();\n    }(t, e.precondition)), r;\n}\n\nfunction __PRIVATE_toQueryTarget(t, e) {\n    // Dissect the path into parent, collectionId, and optional key filter.\n    const r = {\n        structuredQuery: {}\n    }, n = e.path;\n    null !== e.collectionGroup ? (r.parent = __PRIVATE_toQueryPath(t, n), r.structuredQuery.from = [ {\n        collectionId: e.collectionGroup,\n        allDescendants: !0\n    } ]) : (r.parent = __PRIVATE_toQueryPath(t, n.popLast()), r.structuredQuery.from = [ {\n        collectionId: n.lastSegment()\n    } ]);\n    const i = function __PRIVATE_toFilters(t) {\n        if (0 === t.length) return;\n        return __PRIVATE_toFilter(CompositeFilter.create(t, \"and\" /* CompositeOperator.AND */));\n    }(e.filters);\n    i && (r.structuredQuery.where = i);\n    const s = function __PRIVATE_toOrder(t) {\n        if (0 === t.length) return;\n        return t.map((t => \n        // visible for testing\n        function __PRIVATE_toPropertyOrder(t) {\n            return {\n                field: __PRIVATE_toFieldPathReference(t.field),\n                direction: __PRIVATE_toDirection(t.dir)\n            };\n        }\n        // visible for testing\n        (t)));\n    }(e.orderBy);\n    s && (r.structuredQuery.orderBy = s);\n    const o = function __PRIVATE_toInt32Proto(t, e) {\n        return t.useProto3Json || __PRIVATE_isNullOrUndefined(e) ? e : {\n            value: e\n        };\n    }(t, e.limit);\n    return null !== o && (r.structuredQuery.limit = o), e.startAt && (r.structuredQuery.startAt = function __PRIVATE_toStartAtCursor(t) {\n        return {\n            before: t.inclusive,\n            values: t.position\n        };\n    }(e.startAt)), e.endAt && (r.structuredQuery.endAt = function __PRIVATE_toEndAtCursor(t) {\n        return {\n            before: !t.inclusive,\n            values: t.position\n        };\n    }\n    // visible for testing\n    (e.endAt)), r;\n}\n\nfunction __PRIVATE_toDirection(t) {\n    return L[t];\n}\n\n// visible for testing\nfunction __PRIVATE_toOperatorName(t) {\n    return M[t];\n}\n\nfunction __PRIVATE_toCompositeOperatorName(t) {\n    return x[t];\n}\n\nfunction __PRIVATE_toFieldPathReference(t) {\n    return {\n        fieldPath: t.canonicalString()\n    };\n}\n\nfunction __PRIVATE_toFilter(t) {\n    return t instanceof FieldFilter ? function __PRIVATE_toUnaryOrFieldFilter(t) {\n        if (\"==\" /* Operator.EQUAL */ === t.op) {\n            if (__PRIVATE_isNanValue(t.value)) return {\n                unaryFilter: {\n                    field: __PRIVATE_toFieldPathReference(t.field),\n                    op: \"IS_NAN\"\n                }\n            };\n            if (__PRIVATE_isNullValue(t.value)) return {\n                unaryFilter: {\n                    field: __PRIVATE_toFieldPathReference(t.field),\n                    op: \"IS_NULL\"\n                }\n            };\n        } else if (\"!=\" /* Operator.NOT_EQUAL */ === t.op) {\n            if (__PRIVATE_isNanValue(t.value)) return {\n                unaryFilter: {\n                    field: __PRIVATE_toFieldPathReference(t.field),\n                    op: \"IS_NOT_NAN\"\n                }\n            };\n            if (__PRIVATE_isNullValue(t.value)) return {\n                unaryFilter: {\n                    field: __PRIVATE_toFieldPathReference(t.field),\n                    op: \"IS_NOT_NULL\"\n                }\n            };\n        }\n        return {\n            fieldFilter: {\n                field: __PRIVATE_toFieldPathReference(t.field),\n                op: __PRIVATE_toOperatorName(t.op),\n                value: t.value\n            }\n        };\n    }(t) : t instanceof CompositeFilter ? function __PRIVATE_toCompositeFilter(t) {\n        const e = t.getFilters().map((t => __PRIVATE_toFilter(t)));\n        if (1 === e.length) return e[0];\n        return {\n            compositeFilter: {\n                op: __PRIVATE_toCompositeOperatorName(t.op),\n                filters: e\n            }\n        };\n    }(t) : fail();\n}\n\nfunction __PRIVATE_toDocumentMask(t) {\n    const e = [];\n    return t.fields.forEach((t => e.push(t.canonicalString()))), {\n        fieldPaths: e\n    };\n}\n\nfunction __PRIVATE_isValidResourceName(t) {\n    // Resource names have at least 4 components (project ID, database ID)\n    return t.length >= 4 && \"projects\" === t.get(0) && \"databases\" === t.get(2);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ function __PRIVATE_newSerializer(t) {\n    return new JsonProtoSerializer(t, /* useProto3Json= */ !0);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A helper for running delayed tasks following an exponential backoff curve\n * between attempts.\n *\n * Each delay is made up of a \"base\" delay which follows the exponential\n * backoff curve, and a +/- 50% \"jitter\" that is calculated and added to the\n * base delay. This prevents clients from accidentally synchronizing their\n * delays causing spikes of load to the backend.\n */\nclass __PRIVATE_ExponentialBackoff {\n    constructor(\n    /**\n     * The AsyncQueue to run backoff operations on.\n     */\n    t, \n    /**\n     * The ID to use when scheduling backoff operations on the AsyncQueue.\n     */\n    e, \n    /**\n     * The initial delay (used as the base delay on the first retry attempt).\n     * Note that jitter will still be applied, so the actual delay could be as\n     * little as 0.5*initialDelayMs.\n     */\n    r = 1e3\n    /**\n     * The multiplier to use to determine the extended base delay after each\n     * attempt.\n     */ , n = 1.5\n    /**\n     * The maximum base delay after which no further backoff is performed.\n     * Note that jitter will still be applied, so the actual delay could be as\n     * much as 1.5*maxDelayMs.\n     */ , i = 6e4) {\n        this.M = t, this.timerId = e, this.k = r, this.U = n, this.j = i, this.W = 0, this.K = null, \n        /** The last backoff attempt, as epoch milliseconds. */\n        this.G = Date.now(), this.reset();\n    }\n    /**\n     * Resets the backoff delay.\n     *\n     * The very next backoffAndWait() will have no delay. If it is called again\n     * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and\n     * subsequent ones will increase according to the backoffFactor.\n     */    reset() {\n        this.W = 0;\n    }\n    /**\n     * Resets the backoff delay to the maximum delay (e.g. for use after a\n     * RESOURCE_EXHAUSTED error).\n     */    H() {\n        this.W = this.j;\n    }\n    /**\n     * Returns a promise that resolves after currentDelayMs, and increases the\n     * delay for any subsequent attempts. If there was a pending backoff operation\n     * already, it will be canceled.\n     */    J(t) {\n        // Cancel any pending backoff operation.\n        this.cancel();\n        // First schedule using the current base (which may be 0 and should be\n        // honored as such).\n        const e = Math.floor(this.W + this.Y()), r = Math.max(0, Date.now() - this.G), n = Math.max(0, e - r);\n        // Guard against lastAttemptTime being in the future due to a clock change.\n                n > 0 && __PRIVATE_logDebug(\"ExponentialBackoff\", `Backing off for ${n} ms (base delay: ${this.W} ms, delay with jitter: ${e} ms, last attempt: ${r} ms ago)`), \n        this.K = this.M.enqueueAfterDelay(this.timerId, n, (() => (this.G = Date.now(), \n        t()))), \n        // Apply backoff factor to determine next delay and ensure it is within\n        // bounds.\n        this.W *= this.U, this.W < this.k && (this.W = this.k), this.W > this.j && (this.W = this.j);\n    }\n    Z() {\n        null !== this.K && (this.K.skipDelay(), this.K = null);\n    }\n    cancel() {\n        null !== this.K && (this.K.cancel(), this.K = null);\n    }\n    /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */    Y() {\n        return (Math.random() - .5) * this.W;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Datastore and its related methods are a wrapper around the external Google\n * Cloud Datastore grpc API, which provides an interface that is more convenient\n * for the rest of the client SDK architecture to consume.\n */\n/**\n * An implementation of Datastore that exposes additional state for internal\n * consumption.\n */\nclass __PRIVATE_DatastoreImpl extends class Datastore {} {\n    constructor(t, e, r, n) {\n        super(), this.authCredentials = t, this.appCheckCredentials = e, this.connection = r, \n        this.serializer = n, this.X = !1;\n    }\n    tt() {\n        if (this.X) throw new FirestoreError(w, \"The client has already been terminated.\");\n    }\n    /** Invokes the provided RPC with auth and AppCheck tokens. */    R(t, e, r) {\n        return this.tt(), Promise.all([ this.authCredentials.getToken(), this.appCheckCredentials.getToken() ]).then((([n, i]) => this.connection.R(t, e, r, n, i))).catch((t => {\n            throw \"FirebaseError\" === t.name ? (t.code === p && (this.authCredentials.invalidateToken(), \n            this.appCheckCredentials.invalidateToken()), t) : new FirestoreError(A, t.toString());\n        }));\n    }\n    /** Invokes the provided RPC with streamed results with auth and AppCheck tokens. */    g(t, e, r, n) {\n        return this.tt(), Promise.all([ this.authCredentials.getToken(), this.appCheckCredentials.getToken() ]).then((([i, s]) => this.connection.g(t, e, r, i, s, n))).catch((t => {\n            throw \"FirebaseError\" === t.name ? (t.code === p && (this.authCredentials.invalidateToken(), \n            this.appCheckCredentials.invalidateToken()), t) : new FirestoreError(A, t.toString());\n        }));\n    }\n    terminate() {\n        this.X = !0;\n    }\n}\n\n// TODO(firestorexp): Make sure there is only one Datastore instance per\n// firestore-exp client.\nasync function __PRIVATE_invokeCommitRpc(t, e) {\n    const r = __PRIVATE_debugCast(t), n = __PRIVATE_getEncodedDatabaseId(r.serializer) + \"/documents\", i = {\n        writes: e.map((t => toMutation(r.serializer, t)))\n    };\n    await r.R(\"Commit\", n, i);\n}\n\nasync function __PRIVATE_invokeBatchGetDocumentsRpc(t, e) {\n    const r = __PRIVATE_debugCast(t), n = __PRIVATE_getEncodedDatabaseId(r.serializer) + \"/documents\", i = {\n        documents: e.map((t => __PRIVATE_toName(r.serializer, t)))\n    }, s = await r.g(\"BatchGetDocuments\", n, i, e.length), o = new Map;\n    s.forEach((t => {\n        const e = __PRIVATE_fromBatchGetDocumentsResponse(r.serializer, t);\n        o.set(e.key.toString(), e);\n    }));\n    const a = [];\n    return e.forEach((t => {\n        const e = o.get(t.toString());\n        __PRIVATE_hardAssert(!!e), a.push(e);\n    })), a;\n}\n\nasync function __PRIVATE_invokeRunQueryRpc(t, e) {\n    const r = __PRIVATE_debugCast(t), n = __PRIVATE_toQueryTarget(r.serializer, __PRIVATE_queryToTarget(e));\n    return (await r.g(\"RunQuery\", n.parent, {\n        structuredQuery: n.structuredQuery\n    })).filter((t => !!t.document)).map((t => function __PRIVATE_fromDocument(t, e, r) {\n        const n = fromName(t, e.name), i = __PRIVATE_fromVersion(e.updateTime), s = e.createTime ? __PRIVATE_fromVersion(e.createTime) : SnapshotVersion.min(), o = new ObjectValue({\n            mapValue: {\n                fields: e.fields\n            }\n        }), a = MutableDocument.newFoundDocument(n, i, s, o);\n        return r && a.setHasCommittedMutations(), r ? a.setHasCommittedMutations() : a;\n    }(r.serializer, t.document, void 0)));\n}\n\nasync function __PRIVATE_invokeRunAggregationQueryRpc(t, e, r) {\n    var n;\n    const i = __PRIVATE_debugCast(t), {request: s, et: o} = function __PRIVATE_toRunAggregationQueryRequest(t, e, r) {\n        const n = __PRIVATE_toQueryTarget(t, e), i = {}, s = [];\n        let o = 0;\n        return r.forEach((t => {\n            // Map all client-side aliases to a unique short-form\n            // alias. This avoids issues with client-side aliases that\n            // exceed the 1500-byte string size limit.\n            const e = \"aggregate_\" + o++;\n            i[e] = t.alias, \"count\" === t.D ? s.push({\n                alias: e,\n                count: {}\n            }) : \"avg\" === t.D ? s.push({\n                alias: e,\n                avg: {\n                    field: __PRIVATE_toFieldPathReference(t.fieldPath)\n                }\n            }) : \"sum\" === t.D && s.push({\n                alias: e,\n                sum: {\n                    field: __PRIVATE_toFieldPathReference(t.fieldPath)\n                }\n            });\n        })), {\n            request: {\n                structuredAggregationQuery: {\n                    aggregations: s,\n                    structuredQuery: n.structuredQuery\n                },\n                parent: n.parent\n            },\n            et: i\n        };\n    }(i.serializer, function __PRIVATE_queryToAggregateTarget(t) {\n        const e = __PRIVATE_debugCast(t);\n        return e.$ || (\n        // Do not include implicit order-bys for aggregate queries.\n        e.$ = __PRIVATE__queryToTarget(e, t.explicitOrderBy)), e.$;\n    }(e), r), a = s.parent;\n    i.connection.P || delete s.parent;\n    const u = (await i.g(\"RunAggregationQuery\", a, s, /*expectedResponseCount=*/ 1)).filter((t => !!t.result));\n    // Omit RunAggregationQueryResponse that only contain readTimes.\n        __PRIVATE_hardAssert(1 === u.length);\n    // Remap the short-form aliases that were sent to the server\n    // to the client-side aliases. Users will access the results\n    // using the client-side alias.\n    const _ = null === (n = u[0].result) || void 0 === n ? void 0 : n.aggregateFields;\n    return Object.keys(_).reduce(((t, e) => (t[o[e]] = _[e], t)), {});\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ const k = new Map;\n\n/**\n * An instance map that ensures only one Datastore exists per Firestore\n * instance.\n */\n/**\n * Returns an initialized and started Datastore for the given Firestore\n * instance. Callers must invoke removeComponents() when the Firestore\n * instance is terminated.\n */\nfunction __PRIVATE_getDatastore(t) {\n    if (t._terminated) throw new FirestoreError(w, \"The client has already been terminated.\");\n    if (!k.has(t)) {\n        __PRIVATE_logDebug(\"ComponentProvider\", \"Initializing Datastore\");\n        const e = function __PRIVATE_newConnection(t) {\n            return new __PRIVATE_FetchConnection(t, fetch.bind(null));\n        }(function __PRIVATE_makeDatabaseInfo(t, e, r, n) {\n            return new DatabaseInfo(t, e, r, n.host, n.ssl, n.experimentalForceLongPolling, n.experimentalAutoDetectLongPolling, __PRIVATE_cloneLongPollingOptions(n.experimentalLongPollingOptions), n.useFetchStreams);\n        }\n        /**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ (t._databaseId, t.app.options.appId || \"\", t._persistenceKey, t._freezeSettings())), r = __PRIVATE_newSerializer(t._databaseId), n = function __PRIVATE_newDatastore(t, e, r, n) {\n            return new __PRIVATE_DatastoreImpl(t, e, r, n);\n        }(t._authCredentials, t._appCheckCredentials, e, r);\n        k.set(t, n);\n    }\n    return k.get(t);\n}\n\n/**\n * Removes all components associated with the provided instance. Must be called\n * when the `Firestore` instance is terminated.\n */\n/**\n * A concrete type describing all the values that can be applied via a\n * user-supplied `FirestoreSettings` object. This is a separate type so that\n * defaults can be supplied and the value can be checked for equality.\n */\nclass FirestoreSettingsImpl {\n    constructor(t) {\n        var e, r;\n        if (void 0 === t.host) {\n            if (void 0 !== t.ssl) throw new FirestoreError(T, \"Can't provide ssl option if host option is not set\");\n            this.host = \"firestore.googleapis.com\", this.ssl = true;\n        } else this.host = t.host, this.ssl = null === (e = t.ssl) || void 0 === e || e;\n        if (this.credentials = t.credentials, this.ignoreUndefinedProperties = !!t.ignoreUndefinedProperties, \n        this.localCache = t.localCache, void 0 === t.cacheSizeBytes) this.cacheSizeBytes = 41943040; else {\n            if (-1 !== t.cacheSizeBytes && t.cacheSizeBytes < 1048576) throw new FirestoreError(T, \"cacheSizeBytes must be at least 1048576\");\n            this.cacheSizeBytes = t.cacheSizeBytes;\n        }\n        !function __PRIVATE_validateIsNotUsedTogether(t, e, r, n) {\n            if (!0 === e && !0 === n) throw new FirestoreError(T, `${t} and ${r} cannot be used together.`);\n        }(\"experimentalForceLongPolling\", t.experimentalForceLongPolling, \"experimentalAutoDetectLongPolling\", t.experimentalAutoDetectLongPolling), \n        this.experimentalForceLongPolling = !!t.experimentalForceLongPolling, this.experimentalForceLongPolling ? this.experimentalAutoDetectLongPolling = !1 : void 0 === t.experimentalAutoDetectLongPolling ? this.experimentalAutoDetectLongPolling = true : \n        // For backwards compatibility, coerce the value to boolean even though\n        // the TypeScript compiler has narrowed the type to boolean already.\n        // noinspection PointlessBooleanExpressionJS\n        this.experimentalAutoDetectLongPolling = !!t.experimentalAutoDetectLongPolling, \n        this.experimentalLongPollingOptions = __PRIVATE_cloneLongPollingOptions(null !== (r = t.experimentalLongPollingOptions) && void 0 !== r ? r : {}), \n        function __PRIVATE_validateLongPollingOptions(t) {\n            if (void 0 !== t.timeoutSeconds) {\n                if (isNaN(t.timeoutSeconds)) throw new FirestoreError(T, `invalid long polling timeout: ${t.timeoutSeconds} (must not be NaN)`);\n                if (t.timeoutSeconds < 5) throw new FirestoreError(T, `invalid long polling timeout: ${t.timeoutSeconds} (minimum allowed value is 5)`);\n                if (t.timeoutSeconds > 30) throw new FirestoreError(T, `invalid long polling timeout: ${t.timeoutSeconds} (maximum allowed value is 30)`);\n            }\n        }\n        /**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n        /**\n * The Cloud Firestore service interface.\n *\n * Do not call this constructor directly. Instead, use {@link (getFirestore:1)}.\n */ (this.experimentalLongPollingOptions), this.useFetchStreams = !!t.useFetchStreams;\n    }\n    isEqual(t) {\n        return this.host === t.host && this.ssl === t.ssl && this.credentials === t.credentials && this.cacheSizeBytes === t.cacheSizeBytes && this.experimentalForceLongPolling === t.experimentalForceLongPolling && this.experimentalAutoDetectLongPolling === t.experimentalAutoDetectLongPolling && function __PRIVATE_longPollingOptionsEqual(t, e) {\n            return t.timeoutSeconds === e.timeoutSeconds;\n        }(this.experimentalLongPollingOptions, t.experimentalLongPollingOptions) && this.ignoreUndefinedProperties === t.ignoreUndefinedProperties && this.useFetchStreams === t.useFetchStreams;\n    }\n}\n\nclass Firestore {\n    /** @hideconstructor */\n    constructor(t, e, r, n) {\n        this._authCredentials = t, this._appCheckCredentials = e, this._databaseId = r, \n        this._app = n, \n        /**\n         * Whether it's a Firestore or Firestore Lite instance.\n         */\n        this.type = \"firestore-lite\", this._persistenceKey = \"(lite)\", this._settings = new FirestoreSettingsImpl({}), \n        this._settingsFrozen = !1;\n    }\n    /**\n     * The {@link @firebase/app#FirebaseApp} associated with this `Firestore` service\n     * instance.\n     */    get app() {\n        if (!this._app) throw new FirestoreError(w, \"Firestore was not initialized using the Firebase SDK. 'app' is not available\");\n        return this._app;\n    }\n    get _initialized() {\n        return this._settingsFrozen;\n    }\n    get _terminated() {\n        return void 0 !== this._terminateTask;\n    }\n    _setSettings(t) {\n        if (this._settingsFrozen) throw new FirestoreError(w, \"Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.\");\n        this._settings = new FirestoreSettingsImpl(t), void 0 !== t.credentials && (this._authCredentials = function __PRIVATE_makeAuthCredentialsProvider(t) {\n            if (!t) return new __PRIVATE_EmptyAuthCredentialsProvider;\n            switch (t.type) {\n              case \"firstParty\":\n                return new __PRIVATE_FirstPartyAuthCredentialsProvider(t.sessionIndex || \"0\", t.iamToken || null, t.authTokenFactory || null);\n\n              case \"provider\":\n                return t.client;\n\n              default:\n                throw new FirestoreError(T, \"makeAuthCredentialsProvider failed due to invalid credential type\");\n            }\n        }(t.credentials));\n    }\n    _getSettings() {\n        return this._settings;\n    }\n    _freezeSettings() {\n        return this._settingsFrozen = !0, this._settings;\n    }\n    _delete() {\n        return this._terminateTask || (this._terminateTask = this._terminate()), this._terminateTask;\n    }\n    /** Returns a JSON-serializable representation of this `Firestore` instance. */    toJSON() {\n        return {\n            app: this._app,\n            databaseId: this._databaseId,\n            settings: this._settings\n        };\n    }\n    /**\n     * Terminates all components used by this client. Subclasses can override\n     * this method to clean up their own dependencies, but must also call this\n     * method.\n     *\n     * Only ever called once.\n     */    _terminate() {\n        return function __PRIVATE_removeComponents(t) {\n            const e = k.get(t);\n            e && (__PRIVATE_logDebug(\"ComponentProvider\", \"Removing Datastore\"), k.delete(t), \n            e.terminate());\n        }(this), Promise.resolve();\n    }\n}\n\nfunction initializeFirestore(t, e, r) {\n    r || (r = \"(default)\");\n    const n = _getProvider(t, \"firestore/lite\");\n    if (n.isInitialized(r)) throw new FirestoreError(w, \"Firestore can only be initialized once per app.\");\n    return n.initialize({\n        options: e,\n        instanceIdentifier: r\n    });\n}\n\nfunction getFirestore(e, r) {\n    const n = \"object\" == typeof e ? e : getApp(), i = \"string\" == typeof e ? e : r || \"(default)\", s = _getProvider(n, \"firestore/lite\").getImmediate({\n        identifier: i\n    });\n    if (!s._initialized) {\n        const t = getDefaultEmulatorHostnameAndPort(\"firestore\");\n        t && connectFirestoreEmulator(s, ...t);\n    }\n    return s;\n}\n\n/**\n * Modify this instance to communicate with the Cloud Firestore emulator.\n *\n * Note: This must be called before this instance has been used to do any\n * operations.\n *\n * @param firestore - The `Firestore` instance to configure to connect to the\n * emulator.\n * @param host - the emulator host (ex: localhost).\n * @param port - the emulator port (ex: 9000).\n * @param options.mockUserToken - the mock auth token to use for unit testing\n * Security Rules.\n */ function connectFirestoreEmulator(t, e, r, n = {}) {\n    var i;\n    const s = (t = __PRIVATE_cast(t, Firestore))._getSettings(), o = `${e}:${r}`;\n    if (\"firestore.googleapis.com\" !== s.host && s.host !== o && __PRIVATE_logWarn(\"Host has been set in both settings() and connectFirestoreEmulator(), emulator host will be used.\"), \n    t._setSettings(Object.assign(Object.assign({}, s), {\n        host: o,\n        ssl: !1\n    })), n.mockUserToken) {\n        let e, r;\n        if (\"string\" == typeof n.mockUserToken) e = n.mockUserToken, r = User.MOCK_USER; else {\n            // Let createMockUserToken validate first (catches common mistakes like\n            // invalid field \"uid\" and missing field \"sub\" / \"user_id\".)\n            e = createMockUserToken(n.mockUserToken, null === (i = t._app) || void 0 === i ? void 0 : i.options.projectId);\n            const s = n.mockUserToken.sub || n.mockUserToken.user_id;\n            if (!s) throw new FirestoreError(T, \"mockUserToken must contain 'sub' or 'user_id' field!\");\n            r = new User(s);\n        }\n        t._authCredentials = new __PRIVATE_EmulatorAuthCredentialsProvider(new __PRIVATE_OAuthToken(e, r));\n    }\n}\n\n/**\n * Terminates the provided `Firestore` instance.\n *\n * After calling `terminate()` only the `clearIndexedDbPersistence()` functions\n * may be used. Any other function will throw a `FirestoreError`. Termination\n * does not cancel any pending writes, and any promises that are awaiting a\n * response from the server will not be resolved.\n *\n * To restart after termination, create a new instance of `Firestore` with\n * {@link (getFirestore:1)}.\n *\n * Note: Under normal circumstances, calling `terminate()` is not required. This\n * function is useful only when you want to force this instance to release all of\n * its resources or in combination with {@link clearIndexedDbPersistence} to\n * ensure that all local state is destroyed between test runs.\n *\n * @param firestore - The `Firestore` instance to terminate.\n * @returns A `Promise` that is resolved when the instance has been successfully\n * terminated.\n */ function terminate(t) {\n    return t = __PRIVATE_cast(t, Firestore), _removeServiceInstance(t.app, \"firestore/lite\"), t._delete();\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Represents an aggregation that can be performed by Firestore.\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nclass AggregateField {\n    /**\n     * Create a new AggregateField<T>\n     * @param _aggregateType Specifies the type of aggregation operation to perform.\n     * @param _internalFieldPath Optionally specifies the field that is aggregated.\n     * @internal\n     */\n    constructor(\n    // TODO (sum/avg) make aggregateType public when the feature is supported\n    t = \"count\", e) {\n        this._aggregateType = t, this._internalFieldPath = e, \n        /** A type string to uniquely identify instances of this class. */\n        this.type = \"AggregateField\";\n    }\n}\n\n/**\n * The results of executing an aggregation query.\n */ class AggregateQuerySnapshot {\n    /** @hideconstructor */\n    constructor(t, e, r) {\n        this._userDataWriter = e, this._data = r, \n        /** A type string to uniquely identify instances of this class. */\n        this.type = \"AggregateQuerySnapshot\", this.query = t;\n    }\n    /**\n     * Returns the results of the aggregations performed over the underlying\n     * query.\n     *\n     * The keys of the returned object will be the same as those of the\n     * `AggregateSpec` object specified to the aggregation method, and the values\n     * will be the corresponding aggregation result.\n     *\n     * @returns The results of the aggregations performed over the underlying\n     * query.\n     */    data() {\n        return this._userDataWriter.convertObjectMap(this._data);\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A `Query` refers to a query which you can read or listen to. You can also\n * construct refined `Query` objects by adding filters and ordering.\n */ class Query {\n    // This is the lite version of the Query class in the main SDK.\n    /** @hideconstructor protected */\n    constructor(t, \n    /**\n     * If provided, the `FirestoreDataConverter` associated with this instance.\n     */\n    e, r) {\n        this.converter = e, this._query = r, \n        /** The type of this Firestore reference. */\n        this.type = \"query\", this.firestore = t;\n    }\n    withConverter(t) {\n        return new Query(this.firestore, t, this._query);\n    }\n}\n\n/**\n * A `DocumentReference` refers to a document location in a Firestore database\n * and can be used to write, read, or listen to the location. The document at\n * the referenced location may or may not exist.\n */ class DocumentReference {\n    /** @hideconstructor */\n    constructor(t, \n    /**\n     * If provided, the `FirestoreDataConverter` associated with this instance.\n     */\n    e, r) {\n        this.converter = e, this._key = r, \n        /** The type of this Firestore reference. */\n        this.type = \"document\", this.firestore = t;\n    }\n    get _path() {\n        return this._key.path;\n    }\n    /**\n     * The document's identifier within its collection.\n     */    get id() {\n        return this._key.path.lastSegment();\n    }\n    /**\n     * A string representing the path of the referenced document (relative\n     * to the root of the database).\n     */    get path() {\n        return this._key.path.canonicalString();\n    }\n    /**\n     * The collection this `DocumentReference` belongs to.\n     */    get parent() {\n        return new CollectionReference(this.firestore, this.converter, this._key.path.popLast());\n    }\n    withConverter(t) {\n        return new DocumentReference(this.firestore, t, this._key);\n    }\n}\n\n/**\n * A `CollectionReference` object can be used for adding documents, getting\n * document references, and querying for documents (using {@link (query:1)}).\n */ class CollectionReference extends Query {\n    /** @hideconstructor */\n    constructor(t, e, r) {\n        super(t, e, function __PRIVATE_newQueryForPath(t) {\n            return new __PRIVATE_QueryImpl(t);\n        }(r)), this._path = r, \n        /** The type of this Firestore reference. */\n        this.type = \"collection\";\n    }\n    /** The collection's identifier. */    get id() {\n        return this._query.path.lastSegment();\n    }\n    /**\n     * A string representing the path of the referenced collection (relative\n     * to the root of the database).\n     */    get path() {\n        return this._query.path.canonicalString();\n    }\n    /**\n     * A reference to the containing `DocumentReference` if this is a\n     * subcollection. If this isn't a subcollection, the reference is null.\n     */    get parent() {\n        const t = this._path.popLast();\n        return t.isEmpty() ? null : new DocumentReference(this.firestore, \n        /* converter= */ null, new DocumentKey(t));\n    }\n    withConverter(t) {\n        return new CollectionReference(this.firestore, t, this._path);\n    }\n}\n\nfunction collection(t, e, ...r) {\n    if (t = getModularInstance(t), __PRIVATE_validateNonEmptyArgument(\"collection\", \"path\", e), t instanceof Firestore) {\n        const n = ResourcePath.fromString(e, ...r);\n        return __PRIVATE_validateCollectionPath(n), new CollectionReference(t, /* converter= */ null, n);\n    }\n    {\n        if (!(t instanceof DocumentReference || t instanceof CollectionReference)) throw new FirestoreError(T, \"Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore\");\n        const n = t._path.child(ResourcePath.fromString(e, ...r));\n        return __PRIVATE_validateCollectionPath(n), new CollectionReference(t.firestore, \n        /* converter= */ null, n);\n    }\n}\n\n// TODO(firestorelite): Consider using ErrorFactory -\n// https://github.com/firebase/firebase-js-sdk/blob/0131e1f/packages/util/src/errors.ts#L106\n/**\n * Creates and returns a new `Query` instance that includes all documents in the\n * database that are contained in a collection or subcollection with the\n * given `collectionId`.\n *\n * @param firestore - A reference to the root `Firestore` instance.\n * @param collectionId - Identifies the collections to query over. Every\n * collection or subcollection with this ID as the last segment of its path\n * will be included. Cannot contain a slash.\n * @returns The created `Query`.\n */ function collectionGroup(t, e) {\n    if (t = __PRIVATE_cast(t, Firestore), __PRIVATE_validateNonEmptyArgument(\"collectionGroup\", \"collection id\", e), \n    e.indexOf(\"/\") >= 0) throw new FirestoreError(T, `Invalid collection ID '${e}' passed to function collectionGroup(). Collection IDs must not contain '/'.`);\n    return new Query(t, \n    /* converter= */ null, function __PRIVATE_newQueryForCollectionGroup(t) {\n        return new __PRIVATE_QueryImpl(ResourcePath.emptyPath(), t);\n    }(e));\n}\n\nfunction doc(t, e, ...r) {\n    if (t = getModularInstance(t), \n    // We allow omission of 'pathString' but explicitly prohibit passing in both\n    // 'undefined' and 'null'.\n    1 === arguments.length && (e = __PRIVATE_AutoId.C()), __PRIVATE_validateNonEmptyArgument(\"doc\", \"path\", e), \n    t instanceof Firestore) {\n        const n = ResourcePath.fromString(e, ...r);\n        return __PRIVATE_validateDocumentPath(n), new DocumentReference(t, \n        /* converter= */ null, new DocumentKey(n));\n    }\n    {\n        if (!(t instanceof DocumentReference || t instanceof CollectionReference)) throw new FirestoreError(T, \"Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore\");\n        const n = t._path.child(ResourcePath.fromString(e, ...r));\n        return __PRIVATE_validateDocumentPath(n), new DocumentReference(t.firestore, t instanceof CollectionReference ? t.converter : null, new DocumentKey(n));\n    }\n}\n\n/**\n * Returns true if the provided references are equal.\n *\n * @param left - A reference to compare.\n * @param right - A reference to compare.\n * @returns true if the references point to the same location in the same\n * Firestore database.\n */ function refEqual(t, e) {\n    return t = getModularInstance(t), e = getModularInstance(e), (t instanceof DocumentReference || t instanceof CollectionReference) && (e instanceof DocumentReference || e instanceof CollectionReference) && (t.firestore === e.firestore && t.path === e.path && t.converter === e.converter);\n}\n\n/**\n * Returns true if the provided queries point to the same collection and apply\n * the same constraints.\n *\n * @param left - A `Query` to compare.\n * @param right - A `Query` to compare.\n * @returns true if the references point to the same location in the same\n * Firestore database.\n */ function queryEqual(t, e) {\n    return t = getModularInstance(t), e = getModularInstance(e), t instanceof Query && e instanceof Query && (t.firestore === e.firestore && __PRIVATE_queryEquals(t._query, e._query) && t.converter === e.converter);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An immutable object representing an array of bytes.\n */ class Bytes {\n    /** @hideconstructor */\n    constructor(t) {\n        this._byteString = t;\n    }\n    /**\n     * Creates a new `Bytes` object from the given Base64 string, converting it to\n     * bytes.\n     *\n     * @param base64 - The Base64 string used to create the `Bytes` object.\n     */    static fromBase64String(t) {\n        try {\n            return new Bytes(ByteString.fromBase64String(t));\n        } catch (t) {\n            throw new FirestoreError(T, \"Failed to construct data from Base64 string: \" + t);\n        }\n    }\n    /**\n     * Creates a new `Bytes` object from the given Uint8Array.\n     *\n     * @param array - The Uint8Array used to create the `Bytes` object.\n     */    static fromUint8Array(t) {\n        return new Bytes(ByteString.fromUint8Array(t));\n    }\n    /**\n     * Returns the underlying bytes as a Base64-encoded string.\n     *\n     * @returns The Base64-encoded string created from the `Bytes` object.\n     */    toBase64() {\n        return this._byteString.toBase64();\n    }\n    /**\n     * Returns the underlying bytes in a new `Uint8Array`.\n     *\n     * @returns The Uint8Array created from the `Bytes` object.\n     */    toUint8Array() {\n        return this._byteString.toUint8Array();\n    }\n    /**\n     * Returns a string representation of the `Bytes` object.\n     *\n     * @returns A string representation of the `Bytes` object.\n     */    toString() {\n        return \"Bytes(base64: \" + this.toBase64() + \")\";\n    }\n    /**\n     * Returns true if this `Bytes` object is equal to the provided one.\n     *\n     * @param other - The `Bytes` object to compare against.\n     * @returns true if this `Bytes` object is equal to the provided one.\n     */    isEqual(t) {\n        return this._byteString.isEqual(t._byteString);\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A `FieldPath` refers to a field in a document. The path may consist of a\n * single field name (referring to a top-level field in the document), or a\n * list of field names (referring to a nested field in the document).\n *\n * Create a `FieldPath` by providing field names. If more than one field\n * name is provided, the path will point to a nested field in a document.\n */ class FieldPath {\n    /**\n     * Creates a `FieldPath` from the provided field names. If more than one field\n     * name is provided, the path will point to a nested field in a document.\n     *\n     * @param fieldNames - A list of field names.\n     */\n    constructor(...t) {\n        for (let e = 0; e < t.length; ++e) if (0 === t[e].length) throw new FirestoreError(T, \"Invalid field name at argument $(i + 1). Field names must not be empty.\");\n        this._internalPath = new FieldPath$1(t);\n    }\n    /**\n     * Returns true if this `FieldPath` is equal to the provided one.\n     *\n     * @param other - The `FieldPath` to compare against.\n     * @returns true if this `FieldPath` is equal to the provided one.\n     */    isEqual(t) {\n        return this._internalPath.isEqual(t._internalPath);\n    }\n}\n\n/**\n * Returns a special sentinel `FieldPath` to refer to the ID of a document.\n * It can be used in queries to sort or filter by the document ID.\n */ function documentId() {\n    return new FieldPath(\"__name__\");\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Sentinel values that can be used when writing document fields with `set()`\n * or `update()`.\n */ class FieldValue {\n    /**\n     * @param _methodName - The public API endpoint that returns this class.\n     * @hideconstructor\n     */\n    constructor(t) {\n        this._methodName = t;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An immutable object representing a geographic location in Firestore. The\n * location is represented as latitude/longitude pair.\n *\n * Latitude values are in the range of [-90, 90].\n * Longitude values are in the range of [-180, 180].\n */ class GeoPoint {\n    /**\n     * Creates a new immutable `GeoPoint` object with the provided latitude and\n     * longitude values.\n     * @param latitude - The latitude as number between -90 and 90.\n     * @param longitude - The longitude as number between -180 and 180.\n     */\n    constructor(t, e) {\n        if (!isFinite(t) || t < -90 || t > 90) throw new FirestoreError(T, \"Latitude must be a number between -90 and 90, but was: \" + t);\n        if (!isFinite(e) || e < -180 || e > 180) throw new FirestoreError(T, \"Longitude must be a number between -180 and 180, but was: \" + e);\n        this._lat = t, this._long = e;\n    }\n    /**\n     * The latitude of this `GeoPoint` instance.\n     */    get latitude() {\n        return this._lat;\n    }\n    /**\n     * The longitude of this `GeoPoint` instance.\n     */    get longitude() {\n        return this._long;\n    }\n    /**\n     * Returns true if this `GeoPoint` is equal to the provided one.\n     *\n     * @param other - The `GeoPoint` to compare against.\n     * @returns true if this `GeoPoint` is equal to the provided one.\n     */    isEqual(t) {\n        return this._lat === t._lat && this._long === t._long;\n    }\n    /** Returns a JSON-serializable representation of this GeoPoint. */    toJSON() {\n        return {\n            latitude: this._lat,\n            longitude: this._long\n        };\n    }\n    /**\n     * Actually private to JS consumers of our API, so this function is prefixed\n     * with an underscore.\n     */    _compareTo(t) {\n        return __PRIVATE_primitiveComparator(this._lat, t._lat) || __PRIVATE_primitiveComparator(this._long, t._long);\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ const U = /^__.*__$/;\n\n/** The result of parsing document data (e.g. for a setData call). */ class ParsedSetData {\n    constructor(t, e, r) {\n        this.data = t, this.fieldMask = e, this.fieldTransforms = r;\n    }\n    toMutation(t, e) {\n        return null !== this.fieldMask ? new __PRIVATE_PatchMutation(t, this.data, this.fieldMask, e, this.fieldTransforms) : new __PRIVATE_SetMutation(t, this.data, e, this.fieldTransforms);\n    }\n}\n\n/** The result of parsing \"update\" data (i.e. for an updateData call). */ class ParsedUpdateData {\n    constructor(t, \n    // The fieldMask does not include document transforms.\n    e, r) {\n        this.data = t, this.fieldMask = e, this.fieldTransforms = r;\n    }\n    toMutation(t, e) {\n        return new __PRIVATE_PatchMutation(t, this.data, this.fieldMask, e, this.fieldTransforms);\n    }\n}\n\nfunction __PRIVATE_isWrite(t) {\n    switch (t) {\n      case 0 /* UserDataSource.Set */ :\n // fall through\n              case 2 /* UserDataSource.MergeSet */ :\n // fall through\n              case 1 /* UserDataSource.Update */ :\n        return !0;\n\n      case 3 /* UserDataSource.Argument */ :\n      case 4 /* UserDataSource.ArrayArgument */ :\n        return !1;\n\n      default:\n        throw fail();\n    }\n}\n\n/** A \"context\" object passed around while parsing user data. */ class __PRIVATE_ParseContextImpl {\n    /**\n     * Initializes a ParseContext with the given source and path.\n     *\n     * @param settings - The settings for the parser.\n     * @param databaseId - The database ID of the Firestore instance.\n     * @param serializer - The serializer to use to generate the Value proto.\n     * @param ignoreUndefinedProperties - Whether to ignore undefined properties\n     * rather than throw.\n     * @param fieldTransforms - A mutable list of field transforms encountered\n     * while parsing the data.\n     * @param fieldMask - A mutable list of field paths encountered while parsing\n     * the data.\n     *\n     * TODO(b/34871131): We don't support array paths right now, so path can be\n     * null to indicate the context represents any location within an array (in\n     * which case certain features will not work and errors will be somewhat\n     * compromised).\n     */\n    constructor(t, e, r, n, i, s) {\n        this.settings = t, this.databaseId = e, this.serializer = r, this.ignoreUndefinedProperties = n, \n        // Minor hack: If fieldTransforms is undefined, we assume this is an\n        // external call and we need to validate the entire path.\n        void 0 === i && this.rt(), this.fieldTransforms = i || [], this.fieldMask = s || [];\n    }\n    get path() {\n        return this.settings.path;\n    }\n    get nt() {\n        return this.settings.nt;\n    }\n    /** Returns a new context with the specified settings overwritten. */    it(t) {\n        return new __PRIVATE_ParseContextImpl(Object.assign(Object.assign({}, this.settings), t), this.databaseId, this.serializer, this.ignoreUndefinedProperties, this.fieldTransforms, this.fieldMask);\n    }\n    st(t) {\n        var e;\n        const r = null === (e = this.path) || void 0 === e ? void 0 : e.child(t), n = this.it({\n            path: r,\n            ot: !1\n        });\n        return n.ut(t), n;\n    }\n    _t(t) {\n        var e;\n        const r = null === (e = this.path) || void 0 === e ? void 0 : e.child(t), n = this.it({\n            path: r,\n            ot: !1\n        });\n        return n.rt(), n;\n    }\n    lt(t) {\n        // TODO(b/34871131): We don't support array paths right now; so make path\n        // undefined.\n        return this.it({\n            path: void 0,\n            ot: !0\n        });\n    }\n    ct(t) {\n        return __PRIVATE_createError(t, this.settings.methodName, this.settings.ht || !1, this.path, this.settings.dt);\n    }\n    /** Returns 'true' if 'fieldPath' was traversed when creating this context. */    contains(t) {\n        return void 0 !== this.fieldMask.find((e => t.isPrefixOf(e))) || void 0 !== this.fieldTransforms.find((e => t.isPrefixOf(e.field)));\n    }\n    rt() {\n        // TODO(b/34871131): Remove null check once we have proper paths for fields\n        // within arrays.\n        if (this.path) for (let t = 0; t < this.path.length; t++) this.ut(this.path.get(t));\n    }\n    ut(t) {\n        if (0 === t.length) throw this.ct(\"Document fields must not be empty\");\n        if (__PRIVATE_isWrite(this.nt) && U.test(t)) throw this.ct('Document fields cannot begin and end with \"__\"');\n    }\n}\n\n/**\n * Helper for parsing raw user input (provided via the API) into internal model\n * classes.\n */ class __PRIVATE_UserDataReader {\n    constructor(t, e, r) {\n        this.databaseId = t, this.ignoreUndefinedProperties = e, this.serializer = r || __PRIVATE_newSerializer(t);\n    }\n    /** Creates a new top-level parse context. */    ft(t, e, r, n = !1) {\n        return new __PRIVATE_ParseContextImpl({\n            nt: t,\n            methodName: e,\n            dt: r,\n            path: FieldPath$1.emptyPath(),\n            ot: !1,\n            ht: n\n        }, this.databaseId, this.serializer, this.ignoreUndefinedProperties);\n    }\n}\n\nfunction __PRIVATE_newUserDataReader(t) {\n    const e = t._freezeSettings(), r = __PRIVATE_newSerializer(t._databaseId);\n    return new __PRIVATE_UserDataReader(t._databaseId, !!e.ignoreUndefinedProperties, r);\n}\n\n/** Parse document data from a set() call. */ function __PRIVATE_parseSetData(t, e, r, n, i, s = {}) {\n    const o = t.ft(s.merge || s.mergeFields ? 2 /* UserDataSource.MergeSet */ : 0 /* UserDataSource.Set */ , e, r, i);\n    __PRIVATE_validatePlainObject(\"Data must be an object, but it was:\", o, n);\n    const a = __PRIVATE_parseObject(n, o);\n    let u, _;\n    if (s.merge) u = new FieldMask(o.fieldMask), _ = o.fieldTransforms; else if (s.mergeFields) {\n        const t = [];\n        for (const n of s.mergeFields) {\n            const i = __PRIVATE_fieldPathFromArgument$1(e, n, r);\n            if (!o.contains(i)) throw new FirestoreError(T, `Field '${i}' is specified in your field mask but missing from your input data.`);\n            __PRIVATE_fieldMaskContains(t, i) || t.push(i);\n        }\n        u = new FieldMask(t), _ = o.fieldTransforms.filter((t => u.covers(t.field)));\n    } else u = null, _ = o.fieldTransforms;\n    return new ParsedSetData(new ObjectValue(a), u, _);\n}\n\nclass __PRIVATE_DeleteFieldValueImpl extends FieldValue {\n    _toFieldTransform(t) {\n        if (2 /* UserDataSource.MergeSet */ !== t.nt) throw 1 /* UserDataSource.Update */ === t.nt ? t.ct(`${this._methodName}() can only appear at the top level of your update data`) : t.ct(`${this._methodName}() cannot be used with set() unless you pass {merge:true}`);\n        // No transform to add for a delete, but we need to add it to our\n        // fieldMask so it gets deleted.\n        return t.fieldMask.push(t.path), null;\n    }\n    isEqual(t) {\n        return t instanceof __PRIVATE_DeleteFieldValueImpl;\n    }\n}\n\n/**\n * Creates a child context for parsing SerializableFieldValues.\n *\n * This is different than calling `ParseContext.contextWith` because it keeps\n * the fieldTransforms and fieldMask separate.\n *\n * The created context has its `dataSource` set to `UserDataSource.Argument`.\n * Although these values are used with writes, any elements in these FieldValues\n * are not considered writes since they cannot contain any FieldValue sentinels,\n * etc.\n *\n * @param fieldValue - The sentinel FieldValue for which to create a child\n *     context.\n * @param context - The parent context.\n * @param arrayElement - Whether or not the FieldValue has an array.\n */ function __PRIVATE_createSentinelChildContext(t, e, r) {\n    return new __PRIVATE_ParseContextImpl({\n        nt: 3 /* UserDataSource.Argument */ ,\n        dt: e.settings.dt,\n        methodName: t._methodName,\n        ot: r\n    }, e.databaseId, e.serializer, e.ignoreUndefinedProperties);\n}\n\nclass __PRIVATE_ServerTimestampFieldValueImpl extends FieldValue {\n    _toFieldTransform(t) {\n        return new FieldTransform(t.path, new __PRIVATE_ServerTimestampTransform);\n    }\n    isEqual(t) {\n        return t instanceof __PRIVATE_ServerTimestampFieldValueImpl;\n    }\n}\n\nclass __PRIVATE_ArrayUnionFieldValueImpl extends FieldValue {\n    constructor(t, e) {\n        super(t), this.Et = e;\n    }\n    _toFieldTransform(t) {\n        const e = __PRIVATE_createSentinelChildContext(this, t, \n        /*array=*/ !0), r = this.Et.map((t => __PRIVATE_parseData(t, e))), n = new __PRIVATE_ArrayUnionTransformOperation(r);\n        return new FieldTransform(t.path, n);\n    }\n    isEqual(t) {\n        // TODO(mrschmidt): Implement isEquals\n        return this === t;\n    }\n}\n\nclass __PRIVATE_ArrayRemoveFieldValueImpl extends FieldValue {\n    constructor(t, e) {\n        super(t), this.Et = e;\n    }\n    _toFieldTransform(t) {\n        const e = __PRIVATE_createSentinelChildContext(this, t, \n        /*array=*/ !0), r = this.Et.map((t => __PRIVATE_parseData(t, e))), n = new __PRIVATE_ArrayRemoveTransformOperation(r);\n        return new FieldTransform(t.path, n);\n    }\n    isEqual(t) {\n        // TODO(mrschmidt): Implement isEquals\n        return this === t;\n    }\n}\n\nclass __PRIVATE_NumericIncrementFieldValueImpl extends FieldValue {\n    constructor(t, e) {\n        super(t), this.At = e;\n    }\n    _toFieldTransform(t) {\n        const e = new __PRIVATE_NumericIncrementTransformOperation(t.serializer, toNumber(t.serializer, this.At));\n        return new FieldTransform(t.path, e);\n    }\n    isEqual(t) {\n        // TODO(mrschmidt): Implement isEquals\n        return this === t;\n    }\n}\n\n/** Parse update data from an update() call. */ function __PRIVATE_parseUpdateData(t, e, r, n) {\n    const i = t.ft(1 /* UserDataSource.Update */ , e, r);\n    __PRIVATE_validatePlainObject(\"Data must be an object, but it was:\", i, n);\n    const s = [], o = ObjectValue.empty();\n    forEach(n, ((t, n) => {\n        const a = __PRIVATE_fieldPathFromDotSeparatedString(e, t, r);\n        // For Compat types, we have to \"extract\" the underlying types before\n        // performing validation.\n                n = getModularInstance(n);\n        const u = i._t(a);\n        if (n instanceof __PRIVATE_DeleteFieldValueImpl) \n        // Add it to the field mask, but don't add anything to updateData.\n        s.push(a); else {\n            const t = __PRIVATE_parseData(n, u);\n            null != t && (s.push(a), o.set(a, t));\n        }\n    }));\n    const a = new FieldMask(s);\n    return new ParsedUpdateData(o, a, i.fieldTransforms);\n}\n\n/** Parse update data from a list of field/value arguments. */ function __PRIVATE_parseUpdateVarargs(t, e, r, n, i, s) {\n    const o = t.ft(1 /* UserDataSource.Update */ , e, r), a = [ __PRIVATE_fieldPathFromArgument$1(e, n, r) ], u = [ i ];\n    if (s.length % 2 != 0) throw new FirestoreError(T, `Function ${e}() needs to be called with an even number of arguments that alternate between field names and values.`);\n    for (let t = 0; t < s.length; t += 2) a.push(__PRIVATE_fieldPathFromArgument$1(e, s[t])), \n    u.push(s[t + 1]);\n    const _ = [], l = ObjectValue.empty();\n    // We iterate in reverse order to pick the last value for a field if the\n    // user specified the field multiple times.\n    for (let t = a.length - 1; t >= 0; --t) if (!__PRIVATE_fieldMaskContains(_, a[t])) {\n        const e = a[t];\n        let r = u[t];\n        // For Compat types, we have to \"extract\" the underlying types before\n        // performing validation.\n                r = getModularInstance(r);\n        const n = o._t(e);\n        if (r instanceof __PRIVATE_DeleteFieldValueImpl) \n        // Add it to the field mask, but don't add anything to updateData.\n        _.push(e); else {\n            const t = __PRIVATE_parseData(r, n);\n            null != t && (_.push(e), l.set(e, t));\n        }\n    }\n    const h = new FieldMask(_);\n    return new ParsedUpdateData(l, h, o.fieldTransforms);\n}\n\n/**\n * Parse a \"query value\" (e.g. value in a where filter or a value in a cursor\n * bound).\n *\n * @param allowArrays - Whether the query value is an array that may directly\n * contain additional arrays (e.g. the operand of an `in` query).\n */ function __PRIVATE_parseQueryValue(t, e, r, n = !1) {\n    return __PRIVATE_parseData(r, t.ft(n ? 4 /* UserDataSource.ArrayArgument */ : 3 /* UserDataSource.Argument */ , e));\n}\n\n/**\n * Parses user data to Protobuf Values.\n *\n * @param input - Data to be parsed.\n * @param context - A context object representing the current path being parsed,\n * the source of the data being parsed, etc.\n * @returns The parsed value, or null if the value was a FieldValue sentinel\n * that should not be included in the resulting parsed data.\n */ function __PRIVATE_parseData(t, e) {\n    if (__PRIVATE_looksLikeJsonObject(\n    // Unwrap the API type from the Compat SDK. This will return the API type\n    // from firestore-exp.\n    t = getModularInstance(t))) return __PRIVATE_validatePlainObject(\"Unsupported field value:\", e, t), \n    __PRIVATE_parseObject(t, e);\n    if (t instanceof FieldValue) \n    // FieldValues usually parse into transforms (except deleteField())\n    // in which case we do not want to include this field in our parsed data\n    // (as doing so will overwrite the field directly prior to the transform\n    // trying to transform it). So we don't add this location to\n    // context.fieldMask and we return null as our parsing result.\n    /**\n * \"Parses\" the provided FieldValueImpl, adding any necessary transforms to\n * context.fieldTransforms.\n */\n    return function __PRIVATE_parseSentinelFieldValue(t, e) {\n        // Sentinels are only supported with writes, and not within arrays.\n        if (!__PRIVATE_isWrite(e.nt)) throw e.ct(`${t._methodName}() can only be used with update() and set()`);\n        if (!e.path) throw e.ct(`${t._methodName}() is not currently supported inside arrays`);\n        const r = t._toFieldTransform(e);\n        r && e.fieldTransforms.push(r);\n    }\n    /**\n * Helper to parse a scalar value (i.e. not an Object, Array, or FieldValue)\n *\n * @returns The parsed value\n */ (t, e), null;\n    if (void 0 === t && e.ignoreUndefinedProperties) \n    // If the input is undefined it can never participate in the fieldMask, so\n    // don't handle this below. If `ignoreUndefinedProperties` is false,\n    // `parseScalarValue` will reject an undefined value.\n    return null;\n    if (\n    // If context.path is null we are inside an array and we don't support\n    // field mask paths more granular than the top-level array.\n    e.path && e.fieldMask.push(e.path), t instanceof Array) {\n        // TODO(b/34871131): Include the path containing the array in the error\n        // message.\n        // In the case of IN queries, the parsed data is an array (representing\n        // the set of values to be included for the IN query) that may directly\n        // contain additional arrays (each representing an individual field\n        // value), so we disable this validation.\n        if (e.settings.ot && 4 /* UserDataSource.ArrayArgument */ !== e.nt) throw e.ct(\"Nested arrays are not supported\");\n        return function __PRIVATE_parseArray(t, e) {\n            const r = [];\n            let n = 0;\n            for (const i of t) {\n                let t = __PRIVATE_parseData(i, e.lt(n));\n                null == t && (\n                // Just include nulls in the array for fields being replaced with a\n                // sentinel.\n                t = {\n                    nullValue: \"NULL_VALUE\"\n                }), r.push(t), n++;\n            }\n            return {\n                arrayValue: {\n                    values: r\n                }\n            };\n        }(t, e);\n    }\n    return function __PRIVATE_parseScalarValue(t, e) {\n        if (null === (t = getModularInstance(t))) return {\n            nullValue: \"NULL_VALUE\"\n        };\n        if (\"number\" == typeof t) return toNumber(e.serializer, t);\n        if (\"boolean\" == typeof t) return {\n            booleanValue: t\n        };\n        if (\"string\" == typeof t) return {\n            stringValue: t\n        };\n        if (t instanceof Date) {\n            const r = Timestamp.fromDate(t);\n            return {\n                timestampValue: toTimestamp(e.serializer, r)\n            };\n        }\n        if (t instanceof Timestamp) {\n            // Firestore backend truncates precision down to microseconds. To ensure\n            // offline mode works the same with regards to truncation, perform the\n            // truncation immediately without waiting for the backend to do that.\n            const r = new Timestamp(t.seconds, 1e3 * Math.floor(t.nanoseconds / 1e3));\n            return {\n                timestampValue: toTimestamp(e.serializer, r)\n            };\n        }\n        if (t instanceof GeoPoint) return {\n            geoPointValue: {\n                latitude: t.latitude,\n                longitude: t.longitude\n            }\n        };\n        if (t instanceof Bytes) return {\n            bytesValue: __PRIVATE_toBytes(e.serializer, t._byteString)\n        };\n        if (t instanceof DocumentReference) {\n            const r = e.databaseId, n = t.firestore._databaseId;\n            if (!n.isEqual(r)) throw e.ct(`Document reference is for database ${n.projectId}/${n.database} but should be for database ${r.projectId}/${r.database}`);\n            return {\n                referenceValue: __PRIVATE_toResourceName(t.firestore._databaseId || e.databaseId, t._key.path)\n            };\n        }\n        throw e.ct(`Unsupported field value: ${__PRIVATE_valueDescription(t)}`);\n    }\n    /**\n * Checks whether an object looks like a JSON object that should be converted\n * into a struct. Normal class/prototype instances are considered to look like\n * JSON objects since they should be converted to a struct value. Arrays, Dates,\n * GeoPoints, etc. are not considered to look like JSON objects since they map\n * to specific FieldValue types other than ObjectValue.\n */ (t, e);\n}\n\nfunction __PRIVATE_parseObject(t, e) {\n    const r = {};\n    return !function isEmpty(t) {\n        for (const e in t) if (Object.prototype.hasOwnProperty.call(t, e)) return !1;\n        return !0;\n    }(t) ? forEach(t, ((t, n) => {\n        const i = __PRIVATE_parseData(n, e.st(t));\n        null != i && (r[t] = i);\n    })) : \n    // If we encounter an empty object, we explicitly add it to the update\n    // mask to ensure that the server creates a map entry.\n    e.path && e.path.length > 0 && e.fieldMask.push(e.path), {\n        mapValue: {\n            fields: r\n        }\n    };\n}\n\nfunction __PRIVATE_looksLikeJsonObject(t) {\n    return !(\"object\" != typeof t || null === t || t instanceof Array || t instanceof Date || t instanceof Timestamp || t instanceof GeoPoint || t instanceof Bytes || t instanceof DocumentReference || t instanceof FieldValue);\n}\n\nfunction __PRIVATE_validatePlainObject(t, e, r) {\n    if (!__PRIVATE_looksLikeJsonObject(r) || !function __PRIVATE_isPlainObject(t) {\n        return \"object\" == typeof t && null !== t && (Object.getPrototypeOf(t) === Object.prototype || null === Object.getPrototypeOf(t));\n    }(r)) {\n        const n = __PRIVATE_valueDescription(r);\n        throw \"an object\" === n ? e.ct(t + \" a custom object\") : e.ct(t + \" \" + n);\n    }\n}\n\n/**\n * Helper that calls fromDotSeparatedString() but wraps any error thrown.\n */ function __PRIVATE_fieldPathFromArgument$1(t, e, r) {\n    if ((\n    // If required, replace the FieldPath Compat class with with the firestore-exp\n    // FieldPath.\n    e = getModularInstance(e)) instanceof FieldPath) return e._internalPath;\n    if (\"string\" == typeof e) return __PRIVATE_fieldPathFromDotSeparatedString(t, e);\n    throw __PRIVATE_createError(\"Field path arguments must be of type string or \", t, \n    /* hasConverter= */ !1, \n    /* path= */ void 0, r);\n}\n\n/**\n * Matches any characters in a field path string that are reserved.\n */ const j = new RegExp(\"[~\\\\*/\\\\[\\\\]]\");\n\n/**\n * Wraps fromDotSeparatedString with an error message about the method that\n * was thrown.\n * @param methodName - The publicly visible method name\n * @param path - The dot-separated string form of a field path which will be\n * split on dots.\n * @param targetDoc - The document against which the field path will be\n * evaluated.\n */ function __PRIVATE_fieldPathFromDotSeparatedString(t, e, r) {\n    if (e.search(j) >= 0) throw __PRIVATE_createError(`Invalid field path (${e}). Paths must not contain '~', '*', '/', '[', or ']'`, t, \n    /* hasConverter= */ !1, \n    /* path= */ void 0, r);\n    try {\n        return new FieldPath(...e.split(\".\"))._internalPath;\n    } catch (n) {\n        throw __PRIVATE_createError(`Invalid field path (${e}). Paths must not be empty, begin with '.', end with '.', or contain '..'`, t, \n        /* hasConverter= */ !1, \n        /* path= */ void 0, r);\n    }\n}\n\nfunction __PRIVATE_createError(t, e, r, n, i) {\n    const s = n && !n.isEmpty(), o = void 0 !== i;\n    let a = `Function ${e}() called with invalid data`;\n    r && (a += \" (via `toFirestore()`)\"), a += \". \";\n    let u = \"\";\n    return (s || o) && (u += \" (found\", s && (u += ` in field ${n}`), o && (u += ` in document ${i}`), \n    u += \")\"), new FirestoreError(T, a + t + u);\n}\n\n/** Checks `haystack` if FieldPath `needle` is present. Runs in O(n). */ function __PRIVATE_fieldMaskContains(t, e) {\n    return t.some((t => t.isEqual(e)));\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A `DocumentSnapshot` contains data read from a document in your Firestore\n * database. The data can be extracted with `.data()` or `.get(<field>)` to\n * get a specific field.\n *\n * For a `DocumentSnapshot` that points to a non-existing document, any data\n * access will return 'undefined'. You can use the `exists()` method to\n * explicitly verify a document's existence.\n */ class DocumentSnapshot {\n    // Note: This class is stripped down version of the DocumentSnapshot in\n    // the legacy SDK. The changes are:\n    // - No support for SnapshotMetadata.\n    // - No support for SnapshotOptions.\n    /** @hideconstructor protected */\n    constructor(t, e, r, n, i) {\n        this._firestore = t, this._userDataWriter = e, this._key = r, this._document = n, \n        this._converter = i;\n    }\n    /** Property of the `DocumentSnapshot` that provides the document's ID. */    get id() {\n        return this._key.path.lastSegment();\n    }\n    /**\n     * The `DocumentReference` for the document included in the `DocumentSnapshot`.\n     */    get ref() {\n        return new DocumentReference(this._firestore, this._converter, this._key);\n    }\n    /**\n     * Signals whether or not the document at the snapshot's location exists.\n     *\n     * @returns true if the document exists.\n     */    exists() {\n        return null !== this._document;\n    }\n    /**\n     * Retrieves all fields in the document as an `Object`. Returns `undefined` if\n     * the document doesn't exist.\n     *\n     * @returns An `Object` containing all fields in the document or `undefined`\n     * if the document doesn't exist.\n     */    data() {\n        if (this._document) {\n            if (this._converter) {\n                // We only want to use the converter and create a new DocumentSnapshot\n                // if a converter has been provided.\n                const t = new QueryDocumentSnapshot(this._firestore, this._userDataWriter, this._key, this._document, \n                /* converter= */ null);\n                return this._converter.fromFirestore(t);\n            }\n            return this._userDataWriter.convertValue(this._document.data.value);\n        }\n    }\n    /**\n     * Retrieves the field specified by `fieldPath`. Returns `undefined` if the\n     * document or field doesn't exist.\n     *\n     * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific\n     * field.\n     * @returns The data at the specified field location or undefined if no such\n     * field exists in the document.\n     */\n    // We are using `any` here to avoid an explicit cast by our users.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    get(t) {\n        if (this._document) {\n            const e = this._document.data.field(__PRIVATE_fieldPathFromArgument(\"DocumentSnapshot.get\", t));\n            if (null !== e) return this._userDataWriter.convertValue(e);\n        }\n    }\n}\n\n/**\n * A `QueryDocumentSnapshot` contains data read from a document in your\n * Firestore database as part of a query. The document is guaranteed to exist\n * and its data can be extracted with `.data()` or `.get(<field>)` to get a\n * specific field.\n *\n * A `QueryDocumentSnapshot` offers the same API surface as a\n * `DocumentSnapshot`. Since query results contain only existing documents, the\n * `exists` property will always be true and `data()` will never return\n * 'undefined'.\n */ class QueryDocumentSnapshot extends DocumentSnapshot {\n    /**\n     * Retrieves all fields in the document as an `Object`.\n     *\n     * @override\n     * @returns An `Object` containing all fields in the document.\n     */\n    data() {\n        return super.data();\n    }\n}\n\n/**\n * A `QuerySnapshot` contains zero or more `DocumentSnapshot` objects\n * representing the results of a query. The documents can be accessed as an\n * array via the `docs` property or enumerated using the `forEach` method. The\n * number of documents can be determined via the `empty` and `size`\n * properties.\n */ class QuerySnapshot {\n    /** @hideconstructor */\n    constructor(t, e) {\n        this._docs = e, this.query = t;\n    }\n    /** An array of all the documents in the `QuerySnapshot`. */    get docs() {\n        return [ ...this._docs ];\n    }\n    /** The number of documents in the `QuerySnapshot`. */    get size() {\n        return this.docs.length;\n    }\n    /** True if there are no documents in the `QuerySnapshot`. */    get empty() {\n        return 0 === this.docs.length;\n    }\n    /**\n     * Enumerates all of the documents in the `QuerySnapshot`.\n     *\n     * @param callback - A callback to be called with a `QueryDocumentSnapshot` for\n     * each document in the snapshot.\n     * @param thisArg - The `this` binding for the callback.\n     */    forEach(t, e) {\n        this._docs.forEach(t, e);\n    }\n}\n\n/**\n * Returns true if the provided snapshots are equal.\n *\n * @param left - A snapshot to compare.\n * @param right - A snapshot to compare.\n * @returns true if the snapshots are equal.\n */ function snapshotEqual(t, e) {\n    return t = getModularInstance(t), e = getModularInstance(e), t instanceof DocumentSnapshot && e instanceof DocumentSnapshot ? t._firestore === e._firestore && t._key.isEqual(e._key) && (null === t._document ? null === e._document : t._document.isEqual(e._document)) && t._converter === e._converter : t instanceof QuerySnapshot && e instanceof QuerySnapshot && (queryEqual(t.query, e.query) && __PRIVATE_arrayEquals(t.docs, e.docs, snapshotEqual));\n}\n\n/**\n * Helper that calls `fromDotSeparatedString()` but wraps any error thrown.\n */ function __PRIVATE_fieldPathFromArgument(t, e) {\n    return \"string\" == typeof e ? __PRIVATE_fieldPathFromDotSeparatedString(t, e) : e instanceof FieldPath ? e._internalPath : e._delegate._internalPath;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An `AppliableConstraint` is an abstraction of a constraint that can be applied\n * to a Firestore query.\n */\nclass AppliableConstraint {}\n\n/**\n * A `QueryConstraint` is used to narrow the set of documents returned by a\n * Firestore query. `QueryConstraint`s are created by invoking {@link where},\n * {@link orderBy}, {@link (startAt:1)}, {@link (startAfter:1)}, {@link\n * (endBefore:1)}, {@link (endAt:1)}, {@link limit}, {@link limitToLast} and\n * can then be passed to {@link (query:1)} to create a new query instance that\n * also contains this `QueryConstraint`.\n */ class QueryConstraint extends AppliableConstraint {}\n\nfunction query(t, e, ...r) {\n    let n = [];\n    e instanceof AppliableConstraint && n.push(e), n = n.concat(r), function __PRIVATE_validateQueryConstraintArray(t) {\n        const e = t.filter((t => t instanceof QueryCompositeFilterConstraint)).length, r = t.filter((t => t instanceof QueryFieldFilterConstraint)).length;\n        if (e > 1 || e > 0 && r > 0) throw new FirestoreError(T, \"InvalidQuery. When using composite filters, you cannot use more than one filter at the top level. Consider nesting the multiple filters within an `and(...)` statement. For example: change `query(query, where(...), or(...))` to `query(query, and(where(...), or(...)))`.\");\n    }\n    /**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n    /**\n * Converts Firestore's internal types to the JavaScript types that we expose\n * to the user.\n *\n * @internal\n */ (n);\n    for (const e of n) t = e._apply(t);\n    return t;\n}\n\n/**\n * A `QueryFieldFilterConstraint` is used to narrow the set of documents returned by\n * a Firestore query by filtering on one or more document fields.\n * `QueryFieldFilterConstraint`s are created by invoking {@link where} and can then\n * be passed to {@link (query:1)} to create a new query instance that also contains\n * this `QueryFieldFilterConstraint`.\n */ class QueryFieldFilterConstraint extends QueryConstraint {\n    /**\n     * @internal\n     */\n    constructor(t, e, r) {\n        super(), this._field = t, this._op = e, this._value = r, \n        /** The type of this query constraint */\n        this.type = \"where\";\n    }\n    static _create(t, e, r) {\n        return new QueryFieldFilterConstraint(t, e, r);\n    }\n    _apply(t) {\n        const e = this._parse(t);\n        return __PRIVATE_validateNewFieldFilter(t._query, e), new Query(t.firestore, t.converter, __PRIVATE_queryWithAddedFilter(t._query, e));\n    }\n    _parse(t) {\n        const e = __PRIVATE_newUserDataReader(t.firestore), r = function __PRIVATE_newQueryFilter(t, e, r, n, i, s, o) {\n            let a;\n            if (i.isKeyField()) {\n                if (\"array-contains\" /* Operator.ARRAY_CONTAINS */ === s || \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */ === s) throw new FirestoreError(T, `Invalid Query. You can't perform '${s}' queries on documentId().`);\n                if (\"in\" /* Operator.IN */ === s || \"not-in\" /* Operator.NOT_IN */ === s) {\n                    __PRIVATE_validateDisjunctiveFilterElements(o, s);\n                    const e = [];\n                    for (const r of o) e.push(__PRIVATE_parseDocumentIdValue(n, t, r));\n                    a = {\n                        arrayValue: {\n                            values: e\n                        }\n                    };\n                } else a = __PRIVATE_parseDocumentIdValue(n, t, o);\n            } else \"in\" /* Operator.IN */ !== s && \"not-in\" /* Operator.NOT_IN */ !== s && \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */ !== s || __PRIVATE_validateDisjunctiveFilterElements(o, s), \n            a = __PRIVATE_parseQueryValue(r, e, o, \n            /* allowArrays= */ \"in\" /* Operator.IN */ === s || \"not-in\" /* Operator.NOT_IN */ === s);\n            return FieldFilter.create(i, s, a);\n        }(t._query, \"where\", e, t.firestore._databaseId, this._field, this._op, this._value);\n        return r;\n    }\n}\n\n/**\n * Creates a {@link QueryFieldFilterConstraint} that enforces that documents\n * must contain the specified field and that the value should satisfy the\n * relation constraint provided.\n *\n * @param fieldPath - The path to compare\n * @param opStr - The operation string (e.g \"&lt;\", \"&lt;=\", \"==\", \"&lt;\",\n *   \"&lt;=\", \"!=\").\n * @param value - The value for comparison\n * @returns The created {@link QueryFieldFilterConstraint}.\n */ function where(t, e, r) {\n    const n = e, i = __PRIVATE_fieldPathFromArgument(\"where\", t);\n    return QueryFieldFilterConstraint._create(i, n, r);\n}\n\n/**\n * A `QueryCompositeFilterConstraint` is used to narrow the set of documents\n * returned by a Firestore query by performing the logical OR or AND of multiple\n * {@link QueryFieldFilterConstraint}s or {@link QueryCompositeFilterConstraint}s.\n * `QueryCompositeFilterConstraint`s are created by invoking {@link or} or\n * {@link and} and can then be passed to {@link (query:1)} to create a new query\n * instance that also contains the `QueryCompositeFilterConstraint`.\n */ class QueryCompositeFilterConstraint extends AppliableConstraint {\n    /**\n     * @internal\n     */\n    constructor(\n    /** The type of this query constraint */\n    t, e) {\n        super(), this.type = t, this._queryConstraints = e;\n    }\n    static _create(t, e) {\n        return new QueryCompositeFilterConstraint(t, e);\n    }\n    _parse(t) {\n        const e = this._queryConstraints.map((e => e._parse(t))).filter((t => t.getFilters().length > 0));\n        return 1 === e.length ? e[0] : CompositeFilter.create(e, this._getOperator());\n    }\n    _apply(t) {\n        const e = this._parse(t);\n        return 0 === e.getFilters().length ? t : (function __PRIVATE_validateNewFilter(t, e) {\n            let r = t;\n            const n = e.getFlattenedFilters();\n            for (const t of n) __PRIVATE_validateNewFieldFilter(r, t), r = __PRIVATE_queryWithAddedFilter(r, t);\n        }\n        // Checks if any of the provided filter operators are included in the given list of filters and\n        // returns the first one that is, or null if none are.\n        (t._query, e), new Query(t.firestore, t.converter, __PRIVATE_queryWithAddedFilter(t._query, e)));\n    }\n    _getQueryConstraints() {\n        return this._queryConstraints;\n    }\n    _getOperator() {\n        return \"and\" === this.type ? \"and\" /* CompositeOperator.AND */ : \"or\" /* CompositeOperator.OR */;\n    }\n}\n\n/**\n * Creates a new {@link QueryCompositeFilterConstraint} that is a disjunction of\n * the given filter constraints. A disjunction filter includes a document if it\n * satisfies any of the given filters.\n *\n * @param queryConstraints - Optional. The list of\n * {@link QueryFilterConstraint}s to perform a disjunction for. These must be\n * created with calls to {@link where}, {@link or}, or {@link and}.\n * @returns The newly created {@link QueryCompositeFilterConstraint}.\n */ function or(...t) {\n    // Only support QueryFilterConstraints\n    return t.forEach((t => __PRIVATE_validateQueryFilterConstraint(\"or\", t))), QueryCompositeFilterConstraint._create(\"or\" /* CompositeOperator.OR */ , t);\n}\n\n/**\n * Creates a new {@link QueryCompositeFilterConstraint} that is a conjunction of\n * the given filter constraints. A conjunction filter includes a document if it\n * satisfies all of the given filters.\n *\n * @param queryConstraints - Optional. The list of\n * {@link QueryFilterConstraint}s to perform a conjunction for. These must be\n * created with calls to {@link where}, {@link or}, or {@link and}.\n * @returns The newly created {@link QueryCompositeFilterConstraint}.\n */ function and(...t) {\n    // Only support QueryFilterConstraints\n    return t.forEach((t => __PRIVATE_validateQueryFilterConstraint(\"and\", t))), QueryCompositeFilterConstraint._create(\"and\" /* CompositeOperator.AND */ , t);\n}\n\n/**\n * A `QueryOrderByConstraint` is used to sort the set of documents returned by a\n * Firestore query. `QueryOrderByConstraint`s are created by invoking\n * {@link orderBy} and can then be passed to {@link (query:1)} to create a new query\n * instance that also contains this `QueryOrderByConstraint`.\n *\n * Note: Documents that do not contain the orderBy field will not be present in\n * the query result.\n */ class QueryOrderByConstraint extends QueryConstraint {\n    /**\n     * @internal\n     */\n    constructor(t, e) {\n        super(), this._field = t, this._direction = e, \n        /** The type of this query constraint */\n        this.type = \"orderBy\";\n    }\n    static _create(t, e) {\n        return new QueryOrderByConstraint(t, e);\n    }\n    _apply(t) {\n        const e = function __PRIVATE_newQueryOrderBy(t, e, r) {\n            if (null !== t.startAt) throw new FirestoreError(T, \"Invalid query. You must not call startAt() or startAfter() before calling orderBy().\");\n            if (null !== t.endAt) throw new FirestoreError(T, \"Invalid query. You must not call endAt() or endBefore() before calling orderBy().\");\n            const n = new OrderBy(e, r);\n            return function __PRIVATE_validateNewOrderBy(t, e) {\n                if (null === __PRIVATE_getFirstOrderByField(t)) {\n                    // This is the first order by. It must match any inequality.\n                    const r = __PRIVATE_getInequalityFilterField(t);\n                    null !== r && __PRIVATE_validateOrderByAndInequalityMatch(t, r, e.field);\n                }\n            }(t, n), n;\n        }\n        /**\n * Create a `Bound` from a query and a document.\n *\n * Note that the `Bound` will always include the key of the document\n * and so only the provided document will compare equal to the returned\n * position.\n *\n * Will throw if the document does not contain all fields of the order by\n * of the query or if any of the fields in the order by are an uncommitted\n * server timestamp.\n */ (t._query, this._field, this._direction);\n        return new Query(t.firestore, t.converter, function __PRIVATE_queryWithAddedOrderBy(t, e) {\n            // TODO(dimond): validate that orderBy does not list the same key twice.\n            const r = t.explicitOrderBy.concat([ e ]);\n            return new __PRIVATE_QueryImpl(t.path, t.collectionGroup, r, t.filters.slice(), t.limit, t.limitType, t.startAt, t.endAt);\n        }(t._query, e));\n    }\n}\n\n/**\n * Creates a {@link QueryOrderByConstraint} that sorts the query result by the\n * specified field, optionally in descending order instead of ascending.\n *\n * Note: Documents that do not contain the specified field will not be present\n * in the query result.\n *\n * @param fieldPath - The field to sort by.\n * @param directionStr - Optional direction to sort by ('asc' or 'desc'). If\n * not specified, order will be ascending.\n * @returns The created {@link QueryOrderByConstraint}.\n */ function orderBy(t, e = \"asc\") {\n    const r = e, n = __PRIVATE_fieldPathFromArgument(\"orderBy\", t);\n    return QueryOrderByConstraint._create(n, r);\n}\n\n/**\n * A `QueryLimitConstraint` is used to limit the number of documents returned by\n * a Firestore query.\n * `QueryLimitConstraint`s are created by invoking {@link limit} or\n * {@link limitToLast} and can then be passed to {@link (query:1)} to create a new\n * query instance that also contains this `QueryLimitConstraint`.\n */ class QueryLimitConstraint extends QueryConstraint {\n    /**\n     * @internal\n     */\n    constructor(\n    /** The type of this query constraint */\n    t, e, r) {\n        super(), this.type = t, this._limit = e, this._limitType = r;\n    }\n    static _create(t, e, r) {\n        return new QueryLimitConstraint(t, e, r);\n    }\n    _apply(t) {\n        return new Query(t.firestore, t.converter, function __PRIVATE_queryWithLimit(t, e, r) {\n            return new __PRIVATE_QueryImpl(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), e, r, t.startAt, t.endAt);\n        }(t._query, this._limit, this._limitType));\n    }\n}\n\n/**\n * Creates a {@link QueryLimitConstraint} that only returns the first matching\n * documents.\n *\n * @param limit - The maximum number of items to return.\n * @returns The created {@link QueryLimitConstraint}.\n */ function limit(t) {\n    return __PRIVATE_validatePositiveNumber(\"limit\", t), QueryLimitConstraint._create(\"limit\", t, \"F\" /* LimitType.First */);\n}\n\n/**\n * Creates a {@link QueryLimitConstraint} that only returns the last matching\n * documents.\n *\n * You must specify at least one `orderBy` clause for `limitToLast` queries,\n * otherwise an exception will be thrown during execution.\n *\n * @param limit - The maximum number of items to return.\n * @returns The created {@link QueryLimitConstraint}.\n */ function limitToLast(t) {\n    return __PRIVATE_validatePositiveNumber(\"limitToLast\", t), QueryLimitConstraint._create(\"limitToLast\", t, \"L\" /* LimitType.Last */);\n}\n\n/**\n * A `QueryStartAtConstraint` is used to exclude documents from the start of a\n * result set returned by a Firestore query.\n * `QueryStartAtConstraint`s are created by invoking {@link (startAt:1)} or\n * {@link (startAfter:1)} and can then be passed to {@link (query:1)} to create a\n * new query instance that also contains this `QueryStartAtConstraint`.\n */ class QueryStartAtConstraint extends QueryConstraint {\n    /**\n     * @internal\n     */\n    constructor(\n    /** The type of this query constraint */\n    t, e, r) {\n        super(), this.type = t, this._docOrFields = e, this._inclusive = r;\n    }\n    static _create(t, e, r) {\n        return new QueryStartAtConstraint(t, e, r);\n    }\n    _apply(t) {\n        const e = __PRIVATE_newQueryBoundFromDocOrFields(t, this.type, this._docOrFields, this._inclusive);\n        return new Query(t.firestore, t.converter, function __PRIVATE_queryWithStartAt(t, e) {\n            return new __PRIVATE_QueryImpl(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), t.limit, t.limitType, e, t.endAt);\n        }(t._query, e));\n    }\n}\n\nfunction startAt(...t) {\n    return QueryStartAtConstraint._create(\"startAt\", t, \n    /*inclusive=*/ !0);\n}\n\nfunction startAfter(...t) {\n    return QueryStartAtConstraint._create(\"startAfter\", t, \n    /*inclusive=*/ !1);\n}\n\n/**\n * A `QueryEndAtConstraint` is used to exclude documents from the end of a\n * result set returned by a Firestore query.\n * `QueryEndAtConstraint`s are created by invoking {@link (endAt:1)} or\n * {@link (endBefore:1)} and can then be passed to {@link (query:1)} to create a new\n * query instance that also contains this `QueryEndAtConstraint`.\n */ class QueryEndAtConstraint extends QueryConstraint {\n    /**\n     * @internal\n     */\n    constructor(\n    /** The type of this query constraint */\n    t, e, r) {\n        super(), this.type = t, this._docOrFields = e, this._inclusive = r;\n    }\n    static _create(t, e, r) {\n        return new QueryEndAtConstraint(t, e, r);\n    }\n    _apply(t) {\n        const e = __PRIVATE_newQueryBoundFromDocOrFields(t, this.type, this._docOrFields, this._inclusive);\n        return new Query(t.firestore, t.converter, function __PRIVATE_queryWithEndAt(t, e) {\n            return new __PRIVATE_QueryImpl(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), t.limit, t.limitType, t.startAt, e);\n        }(t._query, e));\n    }\n}\n\nfunction endBefore(...t) {\n    return QueryEndAtConstraint._create(\"endBefore\", t, \n    /*inclusive=*/ !1);\n}\n\nfunction endAt(...t) {\n    return QueryEndAtConstraint._create(\"endAt\", t, \n    /*inclusive=*/ !0);\n}\n\n/** Helper function to create a bound from a document or fields */ function __PRIVATE_newQueryBoundFromDocOrFields(t, e, r, n) {\n    if (r[0] = getModularInstance(r[0]), r[0] instanceof DocumentSnapshot) return function __PRIVATE_newQueryBoundFromDocument(t, e, r, n, i) {\n        if (!n) throw new FirestoreError(R, `Can't use a DocumentSnapshot that doesn't exist for ${r}().`);\n        const s = [];\n        // Because people expect to continue/end a query at the exact document\n        // provided, we need to use the implicit sort order rather than the explicit\n        // sort order, because it's guaranteed to contain the document key. That way\n        // the position becomes unambiguous and the query continues/ends exactly at\n        // the provided document. Without the key (by using the explicit sort\n        // orders), multiple documents could match the position, yielding duplicate\n        // results.\n                for (const r of __PRIVATE_queryNormalizedOrderBy(t)) if (r.field.isKeyField()) s.push(__PRIVATE_refValue(e, n.key)); else {\n            const t = n.data.field(r.field);\n            if (__PRIVATE_isServerTimestamp(t)) throw new FirestoreError(T, 'Invalid query. You are trying to start or end a query using a document for which the field \"' + r.field + '\" is an uncommitted server timestamp. (Since the value of this field is unknown, you cannot start/end a query with it.)');\n            if (null === t) {\n                const t = r.field.canonicalString();\n                throw new FirestoreError(T, `Invalid query. You are trying to start or end a query using a document for which the field '${t}' (used as the orderBy) does not exist.`);\n            }\n            s.push(t);\n        }\n        return new Bound(s, i);\n    }\n    /**\n * Converts a list of field values to a `Bound` for the given query.\n */ (t._query, t.firestore._databaseId, e, r[0]._document, n);\n    {\n        const i = __PRIVATE_newUserDataReader(t.firestore);\n        return function __PRIVATE_newQueryBoundFromFields(t, e, r, n, i, s) {\n            // Use explicit order by's because it has to match the query the user made\n            const o = t.explicitOrderBy;\n            if (i.length > o.length) throw new FirestoreError(T, `Too many arguments provided to ${n}(). The number of arguments must be less than or equal to the number of orderBy() clauses`);\n            const a = [];\n            for (let s = 0; s < i.length; s++) {\n                const u = i[s];\n                if (o[s].field.isKeyField()) {\n                    if (\"string\" != typeof u) throw new FirestoreError(T, `Invalid query. Expected a string for document ID in ${n}(), but got a ${typeof u}`);\n                    if (!__PRIVATE_isCollectionGroupQuery(t) && -1 !== u.indexOf(\"/\")) throw new FirestoreError(T, `Invalid query. When querying a collection and ordering by documentId(), the value passed to ${n}() must be a plain document ID, but '${u}' contains a slash.`);\n                    const r = t.path.child(ResourcePath.fromString(u));\n                    if (!DocumentKey.isDocumentKey(r)) throw new FirestoreError(T, `Invalid query. When querying a collection group and ordering by documentId(), the value passed to ${n}() must result in a valid document path, but '${r}' is not because it contains an odd number of segments.`);\n                    const i = new DocumentKey(r);\n                    a.push(__PRIVATE_refValue(e, i));\n                } else {\n                    const t = __PRIVATE_parseQueryValue(r, n, u);\n                    a.push(t);\n                }\n            }\n            return new Bound(a, s);\n        }\n        /**\n * Parses the given `documentIdValue` into a `ReferenceValue`, throwing\n * appropriate errors if the value is anything other than a `DocumentReference`\n * or `string`, or if the string is malformed.\n */ (t._query, t.firestore._databaseId, i, e, r, n);\n    }\n}\n\nfunction __PRIVATE_parseDocumentIdValue(t, e, r) {\n    if (\"string\" == typeof (r = getModularInstance(r))) {\n        if (\"\" === r) throw new FirestoreError(T, \"Invalid query. When querying with documentId(), you must provide a valid document ID, but it was an empty string.\");\n        if (!__PRIVATE_isCollectionGroupQuery(e) && -1 !== r.indexOf(\"/\")) throw new FirestoreError(T, `Invalid query. When querying a collection by documentId(), you must provide a plain document ID, but '${r}' contains a '/' character.`);\n        const n = e.path.child(ResourcePath.fromString(r));\n        if (!DocumentKey.isDocumentKey(n)) throw new FirestoreError(T, `Invalid query. When querying a collection group by documentId(), the value provided must result in a valid document path, but '${n}' is not because it has an odd number of segments (${n.length}).`);\n        return __PRIVATE_refValue(t, new DocumentKey(n));\n    }\n    if (r instanceof DocumentReference) return __PRIVATE_refValue(t, r._key);\n    throw new FirestoreError(T, `Invalid query. When querying with documentId(), you must provide a valid string or a DocumentReference, but it was: ${__PRIVATE_valueDescription(r)}.`);\n}\n\n/**\n * Validates that the value passed into a disjunctive filter satisfies all\n * array requirements.\n */ function __PRIVATE_validateDisjunctiveFilterElements(t, e) {\n    if (!Array.isArray(t) || 0 === t.length) throw new FirestoreError(T, `Invalid Query. A non-empty array is required for '${e.toString()}' filters.`);\n}\n\n/**\n * Given an operator, returns the set of operators that cannot be used with it.\n *\n * This is not a comprehensive check, and this function should be removed in the\n * long term. Validations should occur in the Firestore backend.\n *\n * Operators in a query must adhere to the following set of rules:\n * 1. Only one inequality per query.\n * 2. `NOT_IN` cannot be used with array, disjunctive, or `NOT_EQUAL` operators.\n */ function __PRIVATE_validateNewFieldFilter(t, e) {\n    if (e.isInequality()) {\n        const r = __PRIVATE_getInequalityFilterField(t), n = e.field;\n        if (null !== r && !r.isEqual(n)) throw new FirestoreError(T, `Invalid query. All where filters with an inequality (<, <=, !=, not-in, >, or >=) must be on the same field. But you have inequality filters on '${r.toString()}' and '${n.toString()}'`);\n        const i = __PRIVATE_getFirstOrderByField(t);\n        null !== i && __PRIVATE_validateOrderByAndInequalityMatch(t, n, i);\n    }\n    const r = function __PRIVATE_findOpInsideFilters(t, e) {\n        for (const r of t) for (const t of r.getFlattenedFilters()) if (e.indexOf(t.op) >= 0) return t.op;\n        return null;\n    }(t.filters, function __PRIVATE_conflictingOps(t) {\n        switch (t) {\n          case \"!=\" /* Operator.NOT_EQUAL */ :\n            return [ \"!=\" /* Operator.NOT_EQUAL */ , \"not-in\" /* Operator.NOT_IN */ ];\n\n          case \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */ :\n          case \"in\" /* Operator.IN */ :\n            return [ \"not-in\" /* Operator.NOT_IN */ ];\n\n          case \"not-in\" /* Operator.NOT_IN */ :\n            return [ \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */ , \"in\" /* Operator.IN */ , \"not-in\" /* Operator.NOT_IN */ , \"!=\" /* Operator.NOT_EQUAL */ ];\n\n          default:\n            return [];\n        }\n    }(e.op));\n    if (null !== r) \n    // Special case when it's a duplicate op to give a slightly clearer error message.\n    throw r === e.op ? new FirestoreError(T, `Invalid query. You cannot use more than one '${e.op.toString()}' filter.`) : new FirestoreError(T, `Invalid query. You cannot use '${e.op.toString()}' filters with '${r.toString()}' filters.`);\n}\n\nfunction __PRIVATE_validateOrderByAndInequalityMatch(t, e, r) {\n    if (!r.isEqual(e)) throw new FirestoreError(T, `Invalid query. You have a where filter with an inequality (<, <=, !=, not-in, >, or >=) on field '${e.toString()}' and so you must also use '${e.toString()}' as your first argument to orderBy(), but your first orderBy() is on field '${r.toString()}' instead.`);\n}\n\nfunction __PRIVATE_validateQueryFilterConstraint(t, e) {\n    if (!(e instanceof QueryFieldFilterConstraint || e instanceof QueryCompositeFilterConstraint)) throw new FirestoreError(T, `Function ${t}() requires AppliableConstraints created with a call to 'where(...)', 'or(...)', or 'and(...)'.`);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Converts custom model object of type T into `DocumentData` by applying the\n * converter if it exists.\n *\n * This function is used when converting user objects to `DocumentData`\n * because we want to provide the user with a more specific error message if\n * their `set()` or fails due to invalid data originating from a `toFirestore()`\n * call.\n */\nfunction __PRIVATE_applyFirestoreDataConverter(t, e, r) {\n    let n;\n    // Cast to `any` in order to satisfy the union type constraint on\n    // toFirestore().\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return n = t ? r && (r.merge || r.mergeFields) ? t.toFirestore(e, r) : t.toFirestore(e) : e, \n    n;\n}\n\nclass __PRIVATE_LiteUserDataWriter extends class AbstractUserDataWriter {\n    convertValue(t, e = \"none\") {\n        switch (__PRIVATE_typeOrder(t)) {\n          case 0 /* TypeOrder.NullValue */ :\n            return null;\n\n          case 1 /* TypeOrder.BooleanValue */ :\n            return t.booleanValue;\n\n          case 2 /* TypeOrder.NumberValue */ :\n            return __PRIVATE_normalizeNumber(t.integerValue || t.doubleValue);\n\n          case 3 /* TypeOrder.TimestampValue */ :\n            return this.convertTimestamp(t.timestampValue);\n\n          case 4 /* TypeOrder.ServerTimestampValue */ :\n            return this.convertServerTimestamp(t, e);\n\n          case 5 /* TypeOrder.StringValue */ :\n            return t.stringValue;\n\n          case 6 /* TypeOrder.BlobValue */ :\n            return this.convertBytes(__PRIVATE_normalizeByteString(t.bytesValue));\n\n          case 7 /* TypeOrder.RefValue */ :\n            return this.convertReference(t.referenceValue);\n\n          case 8 /* TypeOrder.GeoPointValue */ :\n            return this.convertGeoPoint(t.geoPointValue);\n\n          case 9 /* TypeOrder.ArrayValue */ :\n            return this.convertArray(t.arrayValue, e);\n\n          case 10 /* TypeOrder.ObjectValue */ :\n            return this.convertObject(t.mapValue, e);\n\n          default:\n            throw fail();\n        }\n    }\n    convertObject(t, e) {\n        return this.convertObjectMap(t.fields, e);\n    }\n    /**\n     * @internal\n     */    convertObjectMap(t, e = \"none\") {\n        const r = {};\n        return forEach(t, ((t, n) => {\n            r[t] = this.convertValue(n, e);\n        })), r;\n    }\n    convertGeoPoint(t) {\n        return new GeoPoint(__PRIVATE_normalizeNumber(t.latitude), __PRIVATE_normalizeNumber(t.longitude));\n    }\n    convertArray(t, e) {\n        return (t.values || []).map((t => this.convertValue(t, e)));\n    }\n    convertServerTimestamp(t, e) {\n        switch (e) {\n          case \"previous\":\n            const r = __PRIVATE_getPreviousValue(t);\n            return null == r ? null : this.convertValue(r, e);\n\n          case \"estimate\":\n            return this.convertTimestamp(__PRIVATE_getLocalWriteTime(t));\n\n          default:\n            return null;\n        }\n    }\n    convertTimestamp(t) {\n        const e = __PRIVATE_normalizeTimestamp(t);\n        return new Timestamp(e.seconds, e.nanos);\n    }\n    convertDocumentKey(t, e) {\n        const r = ResourcePath.fromString(t);\n        __PRIVATE_hardAssert(__PRIVATE_isValidResourceName(r));\n        const n = new DatabaseId(r.get(1), r.get(3)), i = new DocumentKey(r.popFirst(5));\n        return n.isEqual(e) || \n        // TODO(b/64130202): Somehow support foreign references.\n        __PRIVATE_logError(`Document ${i} contains a document reference within a different database (${n.projectId}/${n.database}) which is not supported. It will be treated as a reference in the current database (${e.projectId}/${e.database}) instead.`), \n        i;\n    }\n} {\n    constructor(t) {\n        super(), this.firestore = t;\n    }\n    convertBytes(t) {\n        return new Bytes(t);\n    }\n    convertReference(t) {\n        const e = this.convertDocumentKey(t, this.firestore._databaseId);\n        return new DocumentReference(this.firestore, /* converter= */ null, e);\n    }\n}\n\n/**\n * Reads the document referred to by the specified document reference.\n *\n * All documents are directly fetched from the server, even if the document was\n * previously read or modified. Recent modifications are only reflected in the\n * retrieved `DocumentSnapshot` if they have already been applied by the\n * backend. If the client is offline, the read fails. If you like to use\n * caching or see local modifications, please use the full Firestore SDK.\n *\n * @param reference - The reference of the document to fetch.\n * @returns A Promise resolved with a `DocumentSnapshot` containing the current\n * document contents.\n */ function getDoc(t) {\n    const e = __PRIVATE_getDatastore((t = __PRIVATE_cast(t, DocumentReference)).firestore), r = new __PRIVATE_LiteUserDataWriter(t.firestore);\n    return __PRIVATE_invokeBatchGetDocumentsRpc(e, [ t._key ]).then((e => {\n        __PRIVATE_hardAssert(1 === e.length);\n        const n = e[0];\n        return new DocumentSnapshot(t.firestore, r, t._key, n.isFoundDocument() ? n : null, t.converter);\n    }));\n}\n\n/**\n * Executes the query and returns the results as a {@link QuerySnapshot}.\n *\n * All queries are executed directly by the server, even if the the query was\n * previously executed. Recent modifications are only reflected in the retrieved\n * results if they have already been applied by the backend. If the client is\n * offline, the operation fails. To see previously cached result and local\n * modifications, use the full Firestore SDK.\n *\n * @param query - The `Query` to execute.\n * @returns A Promise that will be resolved with the results of the query.\n */ function getDocs(t) {\n    (function __PRIVATE_validateHasExplicitOrderByForLimitToLast(t) {\n        if (\"L\" /* LimitType.Last */ === t.limitType && 0 === t.explicitOrderBy.length) throw new FirestoreError(v, \"limitToLast() queries require specifying at least one orderBy() clause\");\n    })((t = __PRIVATE_cast(t, Query))._query);\n    const e = __PRIVATE_getDatastore(t.firestore), r = new __PRIVATE_LiteUserDataWriter(t.firestore);\n    return __PRIVATE_invokeRunQueryRpc(e, t._query).then((e => {\n        const n = e.map((e => new QueryDocumentSnapshot(t.firestore, r, e.key, e, t.converter)));\n        return \"L\" /* LimitType.Last */ === t._query.limitType && \n        // Limit to last queries reverse the orderBy constraint that was\n        // specified by the user. As such, we need to reverse the order of the\n        // results to return the documents in the expected order.\n        n.reverse(), new QuerySnapshot(t, n);\n    }));\n}\n\nfunction setDoc(t, e, r) {\n    const n = __PRIVATE_applyFirestoreDataConverter((t = __PRIVATE_cast(t, DocumentReference)).converter, e, r), i = __PRIVATE_parseSetData(__PRIVATE_newUserDataReader(t.firestore), \"setDoc\", t._key, n, null !== t.converter, r);\n    return __PRIVATE_invokeCommitRpc(__PRIVATE_getDatastore(t.firestore), [ i.toMutation(t._key, Precondition.none()) ]);\n}\n\nfunction updateDoc(t, e, r, ...n) {\n    const i = __PRIVATE_newUserDataReader((t = __PRIVATE_cast(t, DocumentReference)).firestore);\n    // For Compat types, we have to \"extract\" the underlying types before\n    // performing validation.\n        let s;\n    s = \"string\" == typeof (e = getModularInstance(e)) || e instanceof FieldPath ? __PRIVATE_parseUpdateVarargs(i, \"updateDoc\", t._key, e, r, n) : __PRIVATE_parseUpdateData(i, \"updateDoc\", t._key, e);\n    return __PRIVATE_invokeCommitRpc(__PRIVATE_getDatastore(t.firestore), [ s.toMutation(t._key, Precondition.exists(!0)) ]);\n}\n\n/**\n * Deletes the document referred to by the specified `DocumentReference`.\n *\n * The deletion will only be reflected in document reads that occur after the\n * returned promise resolves. If the client is offline, the\n * delete fails. If you would like to see local modifications or buffer writes\n * until the client is online, use the full Firestore SDK.\n *\n * @param reference - A reference to the document to delete.\n * @returns A `Promise` resolved once the document has been successfully\n * deleted from the backend.\n */ function deleteDoc(t) {\n    return __PRIVATE_invokeCommitRpc(__PRIVATE_getDatastore((t = __PRIVATE_cast(t, DocumentReference)).firestore), [ new __PRIVATE_DeleteMutation(t._key, Precondition.none()) ]);\n}\n\n/**\n * Add a new document to specified `CollectionReference` with the given data,\n * assigning it a document ID automatically.\n *\n * The result of this write will only be reflected in document reads that occur\n * after the returned promise resolves. If the client is offline, the\n * write fails. If you would like to see local modifications or buffer writes\n * until the client is online, use the full Firestore SDK.\n *\n * @param reference - A reference to the collection to add this document to.\n * @param data - An Object containing the data for the new document.\n * @throws Error - If the provided input is not a valid Firestore document.\n * @returns A `Promise` resolved with a `DocumentReference` pointing to the\n * newly created document after it has been written to the backend.\n */ function addDoc(t, e) {\n    const r = doc(t = __PRIVATE_cast(t, CollectionReference)), n = __PRIVATE_applyFirestoreDataConverter(t.converter, e), i = __PRIVATE_parseSetData(__PRIVATE_newUserDataReader(t.firestore), \"addDoc\", r._key, n, null !== r.converter, {});\n    return __PRIVATE_invokeCommitRpc(__PRIVATE_getDatastore(t.firestore), [ i.toMutation(r._key, Precondition.exists(!1)) ]).then((() => r));\n}\n\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Calculates the number of documents in the result set of the given query,\n * without actually downloading the documents.\n *\n * Using this function to count the documents is efficient because only the\n * final count, not the documents' data, is downloaded. This function can even\n * count the documents if the result set would be prohibitively large to\n * download entirely (e.g. thousands of documents).\n *\n * @param query - The query whose result set size to calculate.\n * @returns A Promise that will be resolved with the count; the count can be\n * retrieved from `snapshot.data().count`, where `snapshot` is the\n * `AggregateQuerySnapshot` to which the returned Promise resolves.\n */ function getCount(t) {\n    return getAggregate(t, {\n        count: count()\n    });\n}\n\n/**\n * Calculates the specified aggregations over the documents in the result\n * set of the given query, without actually downloading the documents.\n *\n * Using this function to perform aggregations is efficient because only the\n * final aggregation values, not the documents' data, is downloaded. This\n * function can even perform aggregations of the documents if the result set\n * would be prohibitively large to download entirely (e.g. thousands of documents).\n *\n * @param query The query whose result set to aggregate over.\n * @param aggregateSpec An `AggregateSpec` object that specifies the aggregates\n * to perform over the result set. The AggregateSpec specifies aliases for each\n * aggregate, which can be used to retrieve the aggregate result.\n * @example\n * ```typescript\n * const aggregateSnapshot = await getAggregate(query, {\n *   countOfDocs: count(),\n *   totalHours: sum('hours'),\n *   averageScore: average('score')\n * });\n *\n * const countOfDocs: number = aggregateSnapshot.data().countOfDocs;\n * const totalHours: number = aggregateSnapshot.data().totalHours;\n * const averageScore: number | null = aggregateSnapshot.data().averageScore;\n * ```\n * @internal TODO (sum/avg) remove when public\n */ function getAggregate(t, e) {\n    const r = __PRIVATE_cast(t.firestore, Firestore), n = __PRIVATE_getDatastore(r), i = function __PRIVATE_mapToArray(t, e) {\n        const r = [];\n        for (const n in t) Object.prototype.hasOwnProperty.call(t, n) && r.push(e(t[n], n, t));\n        return r;\n    }(e, ((t, e) => new __PRIVATE_AggregateImpl(e, t._aggregateType, t._internalFieldPath)));\n    // Run the aggregation and convert the results\n    return __PRIVATE_invokeRunAggregationQueryRpc(n, t._query, i).then((e => function __PRIVATE_convertToAggregateQuerySnapshot(t, e, r) {\n        const n = new __PRIVATE_LiteUserDataWriter(t);\n        return new AggregateQuerySnapshot(e, n, r);\n    }\n    /**\n * Create an AggregateField object that can be used to compute the sum of\n * a specified field over a range of documents in the result set of a query.\n * @param field Specifies the field to sum across the result set.\n * @internal TODO (sum/avg) remove when public\n */ (r, t, e)));\n}\n\nfunction sum(t) {\n    return new AggregateField(\"sum\", __PRIVATE_fieldPathFromArgument$1(\"sum\", t));\n}\n\n/**\n * Create an AggregateField object that can be used to compute the average of\n * a specified field over a range of documents in the result set of a query.\n * @param field Specifies the field to average across the result set.\n * @internal TODO (sum/avg) remove when public\n */ function average(t) {\n    return new AggregateField(\"avg\", __PRIVATE_fieldPathFromArgument$1(\"average\", t));\n}\n\n/**\n * Create an AggregateField object that can be used to compute the count of\n * documents in the result set of a query.\n * @internal TODO (sum/avg) remove when public\n */ function count() {\n    return new AggregateField(\"count\");\n}\n\n/**\n * Compares two 'AggregateField` instances for equality.\n *\n * @param left Compare this AggregateField to the `right`.\n * @param right Compare this AggregateField to the `left`.\n * @internal TODO (sum/avg) remove when public\n */ function aggregateFieldEqual(t, e) {\n    var r, n;\n    return t instanceof AggregateField && e instanceof AggregateField && t._aggregateType === e._aggregateType && (null === (r = t._internalFieldPath) || void 0 === r ? void 0 : r.canonicalString()) === (null === (n = e._internalFieldPath) || void 0 === n ? void 0 : n.canonicalString());\n}\n\n/**\n * Compares two `AggregateQuerySnapshot` instances for equality.\n *\n * Two `AggregateQuerySnapshot` instances are considered \"equal\" if they have\n * underlying queries that compare equal, and the same data.\n *\n * @param left - The first `AggregateQuerySnapshot` to compare.\n * @param right - The second `AggregateQuerySnapshot` to compare.\n *\n * @returns `true` if the objects are \"equal\", as defined above, or `false`\n * otherwise.\n */ function aggregateQuerySnapshotEqual(t, e) {\n    return queryEqual(t.query, e.query) && deepEqual(t.data(), e.data());\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns a sentinel for use with {@link @firebase/firestore/lite#(updateDoc:1)} or\n * {@link @firebase/firestore/lite#(setDoc:1)} with `{merge: true}` to mark a field for deletion.\n */ function deleteField() {\n    return new __PRIVATE_DeleteFieldValueImpl(\"deleteField\");\n}\n\n/**\n * Returns a sentinel used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link @firebase/firestore/lite#(updateDoc:1)} to\n * include a server-generated timestamp in the written data.\n */ function serverTimestamp() {\n    return new __PRIVATE_ServerTimestampFieldValueImpl(\"serverTimestamp\");\n}\n\n/**\n * Returns a special value that can be used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link\n * @firebase/firestore/lite#(updateDoc:1)} that tells the server to union the given elements with any array\n * value that already exists on the server. Each specified element that doesn't\n * already exist in the array will be added to the end. If the field being\n * modified is not already an array it will be overwritten with an array\n * containing exactly the specified elements.\n *\n * @param elements - The elements to union into the array.\n * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or\n * `updateDoc()`.\n */ function arrayUnion(...t) {\n    // NOTE: We don't actually parse the data until it's used in set() or\n    // update() since we'd need the Firestore instance to do this.\n    return new __PRIVATE_ArrayUnionFieldValueImpl(\"arrayUnion\", t);\n}\n\n/**\n * Returns a special value that can be used with {@link (setDoc:1)} or {@link\n * updateDoc:1} that tells the server to remove the given elements from any\n * array value that already exists on the server. All instances of each element\n * specified will be removed from the array. If the field being modified is not\n * already an array it will be overwritten with an empty array.\n *\n * @param elements - The elements to remove from the array.\n * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or\n * `updateDoc()`\n */ function arrayRemove(...t) {\n    // NOTE: We don't actually parse the data until it's used in set() or\n    // update() since we'd need the Firestore instance to do this.\n    return new __PRIVATE_ArrayRemoveFieldValueImpl(\"arrayRemove\", t);\n}\n\n/**\n * Returns a special value that can be used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link\n * @firebase/firestore/lite#(updateDoc:1)} that tells the server to increment the field's current value by\n * the given value.\n *\n * If either the operand or the current field value uses floating point\n * precision, all arithmetic follows IEEE 754 semantics. If both values are\n * integers, values outside of JavaScript's safe number range\n * (`Number.MIN_SAFE_INTEGER` to `Number.MAX_SAFE_INTEGER`) are also subject to\n * precision loss. Furthermore, once processed by the Firestore backend, all\n * integer operations are capped between -2^63 and 2^63-1.\n *\n * If the current field value is not of type `number`, or if the field does not\n * yet exist, the transformation sets the field to the given value.\n *\n * @param n - The value to increment by.\n * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or\n * `updateDoc()`\n */ function increment(t) {\n    return new __PRIVATE_NumericIncrementFieldValueImpl(\"increment\", t);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A write batch, used to perform multiple writes as a single atomic unit.\n *\n * A `WriteBatch` object can be acquired by calling {@link writeBatch}. It\n * provides methods for adding writes to the write batch. None of the writes\n * will be committed (or visible locally) until {@link WriteBatch.commit} is\n * called.\n */ class WriteBatch {\n    /** @hideconstructor */\n    constructor(t, e) {\n        this._firestore = t, this._commitHandler = e, this._mutations = [], this._committed = !1, \n        this._dataReader = __PRIVATE_newUserDataReader(t);\n    }\n    set(t, e, r) {\n        this._verifyNotCommitted();\n        const n = __PRIVATE_validateReference(t, this._firestore), i = __PRIVATE_applyFirestoreDataConverter(n.converter, e, r), s = __PRIVATE_parseSetData(this._dataReader, \"WriteBatch.set\", n._key, i, null !== n.converter, r);\n        return this._mutations.push(s.toMutation(n._key, Precondition.none())), this;\n    }\n    update(t, e, r, ...n) {\n        this._verifyNotCommitted();\n        const i = __PRIVATE_validateReference(t, this._firestore);\n        // For Compat types, we have to \"extract\" the underlying types before\n        // performing validation.\n                let s;\n        return s = \"string\" == typeof (e = getModularInstance(e)) || e instanceof FieldPath ? __PRIVATE_parseUpdateVarargs(this._dataReader, \"WriteBatch.update\", i._key, e, r, n) : __PRIVATE_parseUpdateData(this._dataReader, \"WriteBatch.update\", i._key, e), \n        this._mutations.push(s.toMutation(i._key, Precondition.exists(!0))), this;\n    }\n    /**\n     * Deletes the document referred to by the provided {@link DocumentReference}.\n     *\n     * @param documentRef - A reference to the document to be deleted.\n     * @returns This `WriteBatch` instance. Used for chaining method calls.\n     */    delete(t) {\n        this._verifyNotCommitted();\n        const e = __PRIVATE_validateReference(t, this._firestore);\n        return this._mutations = this._mutations.concat(new __PRIVATE_DeleteMutation(e._key, Precondition.none())), \n        this;\n    }\n    /**\n     * Commits all of the writes in this write batch as a single atomic unit.\n     *\n     * The result of these writes will only be reflected in document reads that\n     * occur after the returned promise resolves. If the client is offline, the\n     * write fails. If you would like to see local modifications or buffer writes\n     * until the client is online, use the full Firestore SDK.\n     *\n     * @returns A `Promise` resolved once all of the writes in the batch have been\n     * successfully written to the backend as an atomic unit (note that it won't\n     * resolve while you're offline).\n     */    commit() {\n        return this._verifyNotCommitted(), this._committed = !0, this._mutations.length > 0 ? this._commitHandler(this._mutations) : Promise.resolve();\n    }\n    _verifyNotCommitted() {\n        if (this._committed) throw new FirestoreError(w, \"A write batch can no longer be used after commit() has been called.\");\n    }\n}\n\nfunction __PRIVATE_validateReference(t, e) {\n    if ((t = getModularInstance(t)).firestore !== e) throw new FirestoreError(T, \"Provided document reference is from a different Firestore instance.\");\n    return t;\n}\n\n/**\n * Creates a write batch, used for performing multiple writes as a single\n * atomic operation. The maximum number of writes allowed in a single WriteBatch\n * is 500.\n *\n * The result of these writes will only be reflected in document reads that\n * occur after the returned promise resolves. If the client is offline, the\n * write fails. If you would like to see local modifications or buffer writes\n * until the client is online, use the full Firestore SDK.\n *\n * @returns A `WriteBatch` that can be used to atomically execute multiple\n * writes.\n */ function writeBatch(t) {\n    const e = __PRIVATE_getDatastore(t = __PRIVATE_cast(t, Firestore));\n    return new WriteBatch(t, (t => __PRIVATE_invokeCommitRpc(e, t)));\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Internal transaction object responsible for accumulating the mutations to\n * perform and the base versions for any documents read.\n */ class Transaction$1 {\n    constructor(t) {\n        this.datastore = t, \n        // The version of each document that was read during this transaction.\n        this.readVersions = new Map, this.mutations = [], this.committed = !1, \n        /**\n         * A deferred usage error that occurred previously in this transaction that\n         * will cause the transaction to fail once it actually commits.\n         */\n        this.lastWriteError = null, \n        /**\n         * Set of documents that have been written in the transaction.\n         *\n         * When there's more than one write to the same key in a transaction, any\n         * writes after the first are handled differently.\n         */\n        this.writtenDocs = new Set;\n    }\n    async lookup(t) {\n        if (this.ensureCommitNotCalled(), this.mutations.length > 0) throw new FirestoreError(T, \"Firestore transactions require all reads to be executed before all writes.\");\n        const e = await __PRIVATE_invokeBatchGetDocumentsRpc(this.datastore, t);\n        return e.forEach((t => this.recordVersion(t))), e;\n    }\n    set(t, e) {\n        this.write(e.toMutation(t, this.precondition(t))), this.writtenDocs.add(t.toString());\n    }\n    update(t, e) {\n        try {\n            this.write(e.toMutation(t, this.preconditionForUpdate(t)));\n        } catch (t) {\n            this.lastWriteError = t;\n        }\n        this.writtenDocs.add(t.toString());\n    }\n    delete(t) {\n        this.write(new __PRIVATE_DeleteMutation(t, this.precondition(t))), this.writtenDocs.add(t.toString());\n    }\n    async commit() {\n        if (this.ensureCommitNotCalled(), this.lastWriteError) throw this.lastWriteError;\n        const t = this.readVersions;\n        // For each mutation, note that the doc was written.\n                this.mutations.forEach((e => {\n            t.delete(e.key.toString());\n        })), \n        // For each document that was read but not written to, we want to perform\n        // a `verify` operation.\n        t.forEach(((t, e) => {\n            const r = DocumentKey.fromPath(e);\n            this.mutations.push(new __PRIVATE_VerifyMutation(r, this.precondition(r)));\n        })), await __PRIVATE_invokeCommitRpc(this.datastore, this.mutations), this.committed = !0;\n    }\n    recordVersion(t) {\n        let e;\n        if (t.isFoundDocument()) e = t.version; else {\n            if (!t.isNoDocument()) throw fail();\n            // Represent a deleted doc using SnapshotVersion.min().\n            e = SnapshotVersion.min();\n        }\n        const r = this.readVersions.get(t.key.toString());\n        if (r) {\n            if (!e.isEqual(r)) \n            // This transaction will fail no matter what.\n            throw new FirestoreError(g, \"Document version changed between two reads.\");\n        } else this.readVersions.set(t.key.toString(), e);\n    }\n    /**\n     * Returns the version of this document when it was read in this transaction,\n     * as a precondition, or no precondition if it was not read.\n     */    precondition(t) {\n        const e = this.readVersions.get(t.toString());\n        return !this.writtenDocs.has(t.toString()) && e ? e.isEqual(SnapshotVersion.min()) ? Precondition.exists(!1) : Precondition.updateTime(e) : Precondition.none();\n    }\n    /**\n     * Returns the precondition for a document if the operation is an update.\n     */    preconditionForUpdate(t) {\n        const e = this.readVersions.get(t.toString());\n        // The first time a document is written, we want to take into account the\n        // read time and existence\n                if (!this.writtenDocs.has(t.toString()) && e) {\n            if (e.isEqual(SnapshotVersion.min())) \n            // The document doesn't exist, so fail the transaction.\n            // This has to be validated locally because you can't send a\n            // precondition that a document does not exist without changing the\n            // semantics of the backend write to be an insert. This is the reverse\n            // of what we want, since we want to assert that the document doesn't\n            // exist but then send the update and have it fail. Since we can't\n            // express that to the backend, we have to validate locally.\n            // Note: this can change once we can send separate verify writes in the\n            // transaction.\n            throw new FirestoreError(T, \"Can't update a document that doesn't exist.\");\n            // Document exists, base precondition on document update time.\n                        return Precondition.updateTime(e);\n        }\n        // Document was not read, so we just use the preconditions for a blind\n        // update.\n        return Precondition.exists(!0);\n    }\n    write(t) {\n        this.ensureCommitNotCalled(), this.mutations.push(t);\n    }\n    ensureCommitNotCalled() {}\n}\n\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ const z = {\n    maxAttempts: 5\n};\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * TransactionRunner encapsulates the logic needed to run and retry transactions\n * with backoff.\n */\nclass __PRIVATE_TransactionRunner {\n    constructor(t, e, r, n, i) {\n        this.asyncQueue = t, this.datastore = e, this.options = r, this.updateFunction = n, \n        this.deferred = i, this.Tt = r.maxAttempts, this.Pt = new __PRIVATE_ExponentialBackoff(this.asyncQueue, \"transaction_retry\" /* TimerId.TransactionRetry */);\n    }\n    /** Runs the transaction and sets the result on deferred. */    run() {\n        this.Tt -= 1, this.Rt();\n    }\n    Rt() {\n        this.Pt.J((async () => {\n            const t = new Transaction$1(this.datastore), e = this.It(t);\n            e && e.then((e => {\n                this.asyncQueue.enqueueAndForget((() => t.commit().then((() => {\n                    this.deferred.resolve(e);\n                })).catch((t => {\n                    this.Vt(t);\n                }))));\n            })).catch((t => {\n                this.Vt(t);\n            }));\n        }));\n    }\n    It(t) {\n        try {\n            const e = this.updateFunction(t);\n            return !__PRIVATE_isNullOrUndefined(e) && e.catch && e.then ? e : (this.deferred.reject(Error(\"Transaction callback must return a Promise\")), \n            null);\n        } catch (t) {\n            // Do not retry errors thrown by user provided updateFunction.\n            return this.deferred.reject(t), null;\n        }\n    }\n    Vt(t) {\n        this.Tt > 0 && this.yt(t) ? (this.Tt -= 1, this.asyncQueue.enqueueAndForget((() => (this.Rt(), \n        Promise.resolve())))) : this.deferred.reject(t);\n    }\n    yt(t) {\n        if (\"FirebaseError\" === t.name) {\n            // In transactions, the backend will fail outdated reads with FAILED_PRECONDITION and\n            // non-matching document versions with ABORTED. These errors should be retried.\n            const e = t.code;\n            return \"aborted\" === e || \"failed-precondition\" === e || \"already-exists\" === e || !\n            /**\n * Determines whether an error code represents a permanent error when received\n * in response to a non-write operation.\n *\n * See isPermanentWriteError for classifying write errors.\n */\n            function __PRIVATE_isPermanentError(t) {\n                switch (t) {\n                  default:\n                    return fail();\n\n                  case m:\n                  case A:\n                  case P:\n                  case y:\n                  case D:\n                  case b:\n // Unauthenticated means something went wrong with our token and we need\n                    // to retry with new credentials which will happen automatically.\n                                      case p:\n                    return !1;\n\n                  case T:\n                  case R:\n                  case I:\n                  case V:\n                  case w:\n // Aborted might be retried in some scenarios, but that is dependant on\n                    // the context and should handled individually by the calling code.\n                    // See https://cloud.google.com/apis/design/errors.\n                                      case g:\n                  case F:\n                  case v:\n                  case C:\n                    return !0;\n                }\n            }(e);\n        }\n        return !1;\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** The Platform's 'document' implementation or null if not available. */ function getDocument() {\n    // `document` is not always available, e.g. in ReactNative and WebWorkers.\n    // eslint-disable-next-line no-restricted-globals\n    return \"undefined\" != typeof document ? document : null;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Represents an operation scheduled to be run in the future on an AsyncQueue.\n *\n * It is created via DelayedOperation.createAndSchedule().\n *\n * Supports cancellation (via cancel()) and early execution (via skipDelay()).\n *\n * Note: We implement `PromiseLike` instead of `Promise`, as the `Promise` type\n * in newer versions of TypeScript defines `finally`, which is not available in\n * IE.\n */ class DelayedOperation {\n    constructor(t, e, r, n, i) {\n        this.asyncQueue = t, this.timerId = e, this.targetTimeMs = r, this.op = n, this.removalCallback = i, \n        this.deferred = new __PRIVATE_Deferred, this.then = this.deferred.promise.then.bind(this.deferred.promise), \n        // It's normal for the deferred promise to be canceled (due to cancellation)\n        // and so we attach a dummy catch callback to avoid\n        // 'UnhandledPromiseRejectionWarning' log spam.\n        this.deferred.promise.catch((t => {}));\n    }\n    get promise() {\n        return this.deferred.promise;\n    }\n    /**\n     * Creates and returns a DelayedOperation that has been scheduled to be\n     * executed on the provided asyncQueue after the provided delayMs.\n     *\n     * @param asyncQueue - The queue to schedule the operation on.\n     * @param id - A Timer ID identifying the type of operation this is.\n     * @param delayMs - The delay (ms) before the operation should be scheduled.\n     * @param op - The operation to run.\n     * @param removalCallback - A callback to be called synchronously once the\n     *   operation is executed or canceled, notifying the AsyncQueue to remove it\n     *   from its delayedOperations list.\n     *   PORTING NOTE: This exists to prevent making removeDelayedOperation() and\n     *   the DelayedOperation class public.\n     */    static createAndSchedule(t, e, r, n, i) {\n        const s = Date.now() + r, o = new DelayedOperation(t, e, s, n, i);\n        return o.start(r), o;\n    }\n    /**\n     * Starts the timer. This is called immediately after construction by\n     * createAndSchedule().\n     */    start(t) {\n        this.timerHandle = setTimeout((() => this.handleDelayElapsed()), t);\n    }\n    /**\n     * Queues the operation to run immediately (if it hasn't already been run or\n     * canceled).\n     */    skipDelay() {\n        return this.handleDelayElapsed();\n    }\n    /**\n     * Cancels the operation if it hasn't already been executed or canceled. The\n     * promise will be rejected.\n     *\n     * As long as the operation has not yet been run, calling cancel() provides a\n     * guarantee that the operation will not be run.\n     */    cancel(t) {\n        null !== this.timerHandle && (this.clearTimeout(), this.deferred.reject(new FirestoreError(m, \"Operation cancelled\" + (t ? \": \" + t : \"\"))));\n    }\n    handleDelayElapsed() {\n        this.asyncQueue.enqueueAndForget((() => null !== this.timerHandle ? (this.clearTimeout(), \n        this.op().then((t => this.deferred.resolve(t)))) : Promise.resolve()));\n    }\n    clearTimeout() {\n        null !== this.timerHandle && (this.removalCallback(this), clearTimeout(this.timerHandle), \n        this.timerHandle = null);\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ class __PRIVATE_AsyncQueueImpl {\n    constructor() {\n        // The last promise in the queue.\n        this.wt = Promise.resolve(), \n        // A list of retryable operations. Retryable operations are run in order and\n        // retried with backoff.\n        this.gt = [], \n        // Is this AsyncQueue being shut down? Once it is set to true, it will not\n        // be changed again.\n        this.Ft = !1, \n        // Operations scheduled to be queued in the future. Operations are\n        // automatically removed after they are run or canceled.\n        this.vt = [], \n        // visible for testing\n        this.Dt = null, \n        // Flag set while there's an outstanding AsyncQueue operation, used for\n        // assertion sanity-checks.\n        this.bt = !1, \n        // Enabled during shutdown on Safari to prevent future access to IndexedDB.\n        this.Ct = !1, \n        // List of TimerIds to fast-forward delays for.\n        this.St = [], \n        // Backoff timer used to schedule retries for retryable operations\n        this.Pt = new __PRIVATE_ExponentialBackoff(this, \"async_queue_retry\" /* TimerId.AsyncQueueRetry */), \n        // Visibility handler that triggers an immediate retry of all retryable\n        // operations. Meant to speed up recovery when we regain file system access\n        // after page comes into foreground.\n        this.Nt = () => {\n            const t = getDocument();\n            t && __PRIVATE_logDebug(\"AsyncQueue\", \"Visibility state changed to \" + t.visibilityState), \n            this.Pt.Z();\n        };\n        const t = getDocument();\n        t && \"function\" == typeof t.addEventListener && t.addEventListener(\"visibilitychange\", this.Nt);\n    }\n    get isShuttingDown() {\n        return this.Ft;\n    }\n    /**\n     * Adds a new operation to the queue without waiting for it to complete (i.e.\n     * we ignore the Promise result).\n     */    enqueueAndForget(t) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.enqueue(t);\n    }\n    enqueueAndForgetEvenWhileRestricted(t) {\n        this.Ot(), \n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.qt(t);\n    }\n    enterRestrictedMode(t) {\n        if (!this.Ft) {\n            this.Ft = !0, this.Ct = t || !1;\n            const e = getDocument();\n            e && \"function\" == typeof e.removeEventListener && e.removeEventListener(\"visibilitychange\", this.Nt);\n        }\n    }\n    enqueue(t) {\n        if (this.Ot(), this.Ft) \n        // Return a Promise which never resolves.\n        return new Promise((() => {}));\n        // Create a deferred Promise that we can return to the callee. This\n        // allows us to return a \"hanging Promise\" only to the callee and still\n        // advance the queue even when the operation is not run.\n                const e = new __PRIVATE_Deferred;\n        return this.qt((() => this.Ft && this.Ct ? Promise.resolve() : (t().then(e.resolve, e.reject), \n        e.promise))).then((() => e.promise));\n    }\n    enqueueRetryable(t) {\n        this.enqueueAndForget((() => (this.gt.push(t), this.Bt())));\n    }\n    /**\n     * Runs the next operation from the retryable queue. If the operation fails,\n     * reschedules with backoff.\n     */    async Bt() {\n        if (0 !== this.gt.length) {\n            try {\n                await this.gt[0](), this.gt.shift(), this.Pt.reset();\n            } catch (t) {\n                if (!\n                /**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n                /** Verifies whether `e` is an IndexedDbTransactionError. */\n                function __PRIVATE_isIndexedDbTransactionError(t) {\n                    // Use name equality, as instanceof checks on errors don't work with errors\n                    // that wrap other errors.\n                    return \"IndexedDbTransactionError\" === t.name;\n                }\n                /**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ (t)) throw t;\n // Failure will be handled by AsyncQueue\n                                __PRIVATE_logDebug(\"AsyncQueue\", \"Operation failed with retryable error: \" + t);\n            }\n            this.gt.length > 0 && \n            // If there are additional operations, we re-schedule `retryNextOp()`.\n            // This is necessary to run retryable operations that failed during\n            // their initial attempt since we don't know whether they are already\n            // enqueued. If, for example, `op1`, `op2`, `op3` are enqueued and `op1`\n            // needs to  be re-run, we will run `op1`, `op1`, `op2` using the\n            // already enqueued calls to `retryNextOp()`. `op3()` will then run in the\n            // call scheduled here.\n            // Since `backoffAndRun()` cancels an existing backoff and schedules a\n            // new backoff on every call, there is only ever a single additional\n            // operation in the queue.\n            this.Pt.J((() => this.Bt()));\n        }\n    }\n    qt(t) {\n        const e = this.wt.then((() => (this.bt = !0, t().catch((t => {\n            this.Dt = t, this.bt = !1;\n            const e = \n            /**\n * Chrome includes Error.message in Error.stack. Other browsers do not.\n * This returns expected output of message + stack when available.\n * @param error - Error or FirestoreError\n */\n            function __PRIVATE_getMessageOrStack(t) {\n                let e = t.message || \"\";\n                t.stack && (e = t.stack.includes(t.message) ? t.stack : t.message + \"\\n\" + t.stack);\n                return e;\n            }\n            /**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n            // TODO(mrschmidt) Consider using `BaseTransaction` as the base class in the\n            // legacy SDK.\n            /**\n * A reference to a transaction.\n *\n * The `Transaction` object passed to a transaction's `updateFunction` provides\n * the methods to read and write data within the transaction context. See\n * {@link runTransaction}.\n */ (t);\n            // Re-throw the error so that this.tail becomes a rejected Promise and\n            // all further attempts to chain (via .then) will just short-circuit\n            // and return the rejected Promise.\n            throw __PRIVATE_logError(\"INTERNAL UNHANDLED ERROR: \", e), t;\n        })).then((t => (this.bt = !1, t))))));\n        return this.wt = e, e;\n    }\n    enqueueAfterDelay(t, e, r) {\n        this.Ot(), \n        // Fast-forward delays for timerIds that have been overriden.\n        this.St.indexOf(t) > -1 && (e = 0);\n        const n = DelayedOperation.createAndSchedule(this, t, e, r, (t => this.$t(t)));\n        return this.vt.push(n), n;\n    }\n    Ot() {\n        this.Dt && fail();\n    }\n    verifyOperationInProgress() {}\n    /**\n     * Waits until all currently queued tasks are finished executing. Delayed\n     * operations are not run.\n     */    async Qt() {\n        // Operations in the queue prior to draining may have enqueued additional\n        // operations. Keep draining the queue until the tail is no longer advanced,\n        // which indicates that no more new operations were enqueued and that all\n        // operations were executed.\n        let t;\n        do {\n            t = this.wt, await t;\n        } while (t !== this.wt);\n    }\n    /**\n     * For Tests: Determine if a delayed operation with a particular TimerId\n     * exists.\n     */    Lt(t) {\n        for (const e of this.vt) if (e.timerId === t) return !0;\n        return !1;\n    }\n    /**\n     * For Tests: Runs some or all delayed operations early.\n     *\n     * @param lastTimerId - Delayed operations up to and including this TimerId\n     * will be drained. Pass TimerId.All to run all delayed operations.\n     * @returns a Promise that resolves once all operations have been run.\n     */    Mt(t) {\n        // Note that draining may generate more delayed ops, so we do that first.\n        return this.Qt().then((() => {\n            // Run ops in the same order they'd run if they ran naturally.\n            this.vt.sort(((t, e) => t.targetTimeMs - e.targetTimeMs));\n            for (const e of this.vt) if (e.skipDelay(), \"all\" /* TimerId.All */ !== t && e.timerId === t) break;\n            return this.Qt();\n        }));\n    }\n    /**\n     * For Tests: Skip all subsequent delays for a timer id.\n     */    xt(t) {\n        this.St.push(t);\n    }\n    /** Called once a DelayedOperation is run or canceled. */    $t(t) {\n        // NOTE: indexOf / slice are O(n), but delayedOperations is expected to be small.\n        const e = this.vt.indexOf(t);\n        this.vt.splice(e, 1);\n    }\n}\n\nclass Transaction {\n    /** @hideconstructor */\n    constructor(t, e) {\n        this._firestore = t, this._transaction = e, this._dataReader = __PRIVATE_newUserDataReader(t);\n    }\n    /**\n     * Reads the document referenced by the provided {@link DocumentReference}.\n     *\n     * @param documentRef - A reference to the document to be read.\n     * @returns A `DocumentSnapshot` with the read data.\n     */    get(t) {\n        const e = __PRIVATE_validateReference(t, this._firestore), r = new __PRIVATE_LiteUserDataWriter(this._firestore);\n        return this._transaction.lookup([ e._key ]).then((t => {\n            if (!t || 1 !== t.length) return fail();\n            const n = t[0];\n            if (n.isFoundDocument()) return new DocumentSnapshot(this._firestore, r, n.key, n, e.converter);\n            if (n.isNoDocument()) return new DocumentSnapshot(this._firestore, r, e._key, null, e.converter);\n            throw fail();\n        }));\n    }\n    set(t, e, r) {\n        const n = __PRIVATE_validateReference(t, this._firestore), i = __PRIVATE_applyFirestoreDataConverter(n.converter, e, r), s = __PRIVATE_parseSetData(this._dataReader, \"Transaction.set\", n._key, i, null !== n.converter, r);\n        return this._transaction.set(n._key, s), this;\n    }\n    update(t, e, r, ...n) {\n        const i = __PRIVATE_validateReference(t, this._firestore);\n        // For Compat types, we have to \"extract\" the underlying types before\n        // performing validation.\n                let s;\n        return s = \"string\" == typeof (e = getModularInstance(e)) || e instanceof FieldPath ? __PRIVATE_parseUpdateVarargs(this._dataReader, \"Transaction.update\", i._key, e, r, n) : __PRIVATE_parseUpdateData(this._dataReader, \"Transaction.update\", i._key, e), \n        this._transaction.update(i._key, s), this;\n    }\n    /**\n     * Deletes the document referred to by the provided {@link DocumentReference}.\n     *\n     * @param documentRef - A reference to the document to be deleted.\n     * @returns This `Transaction` instance. Used for chaining method calls.\n     */    delete(t) {\n        const e = __PRIVATE_validateReference(t, this._firestore);\n        return this._transaction.delete(e._key), this;\n    }\n}\n\n/**\n * Executes the given `updateFunction` and then attempts to commit the changes\n * applied within the transaction. If any document read within the transaction\n * has changed, Cloud Firestore retries the `updateFunction`. If it fails to\n * commit after 5 attempts, the transaction fails.\n *\n * The maximum number of writes allowed in a single transaction is 500.\n *\n * @param firestore - A reference to the Firestore database to run this\n * transaction against.\n * @param updateFunction - The function to execute within the transaction\n * context.\n * @param options - An options object to configure maximum number of attempts to\n * commit.\n * @returns If the transaction completed successfully or was explicitly aborted\n * (the `updateFunction` returned a failed promise), the promise returned by the\n * `updateFunction `is returned here. Otherwise, if the transaction failed, a\n * rejected promise with the corresponding failure error is returned.\n */ function runTransaction(t, e, r) {\n    const n = __PRIVATE_getDatastore(t = __PRIVATE_cast(t, Firestore)), i = Object.assign(Object.assign({}, z), r);\n    !function __PRIVATE_validateTransactionOptions(t) {\n        if (t.maxAttempts < 1) throw new FirestoreError(T, \"Max attempts must be at least 1\");\n    }(i);\n    const s = new __PRIVATE_Deferred;\n    return new __PRIVATE_TransactionRunner(function __PRIVATE_newAsyncQueue() {\n        return new __PRIVATE_AsyncQueueImpl;\n    }(), n, i, (r => e(new Transaction(t, r))), s).run(), s.promise;\n}\n\n/**\n * Firestore Lite\n *\n * @remarks Firestore Lite is a small online-only SDK that allows read\n * and write access to your Firestore database. All operations connect\n * directly to the backend, and `onSnapshot()` APIs are not supported.\n * @packageDocumentation\n */ !function __PRIVATE_registerFirestore() {\n    !function __PRIVATE_setSDKVersion(t) {\n        d = t;\n    }(`${SDK_VERSION}_lite`), _registerComponent(new Component(\"firestore/lite\", ((t, {instanceIdentifier: e, options: r}) => {\n        const n = t.getProvider(\"app\").getImmediate(), i = new Firestore(new __PRIVATE_LiteAuthCredentialsProvider(t.getProvider(\"auth-internal\")), new __PRIVATE_LiteAppCheckTokenProvider(t.getProvider(\"app-check-internal\")), function __PRIVATE_databaseIdFromApp(t, e) {\n            if (!Object.prototype.hasOwnProperty.apply(t.options, [ \"projectId\" ])) throw new FirestoreError(T, '\"projectId\" not provided in firebase.initializeApp.');\n            return new DatabaseId(t.options.projectId, e);\n        }\n        /**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ (n, e), n);\n        return r && i._setSettings(r), i;\n    }), \"PUBLIC\").setMultipleInstances(!0)), \n    // RUNTIME_ENV and BUILD_TARGET are replaced by real values during the compilation\n    registerVersion(\"firestore-lite\", \"4.1.3\", \"\"), registerVersion(\"firestore-lite\", \"4.1.3\", \"esm2017\");\n}();\n\nexport { AggregateField, AggregateQuerySnapshot, Bytes, CollectionReference, DocumentReference, DocumentSnapshot, FieldPath, FieldValue, Firestore, FirestoreError, GeoPoint, Query, QueryCompositeFilterConstraint, QueryConstraint, QueryDocumentSnapshot, QueryEndAtConstraint, QueryFieldFilterConstraint, QueryLimitConstraint, QueryOrderByConstraint, QuerySnapshot, QueryStartAtConstraint, Timestamp, Transaction, WriteBatch, addDoc, aggregateFieldEqual, aggregateQuerySnapshotEqual, and, arrayRemove, arrayUnion, average, collection, collectionGroup, connectFirestoreEmulator, count, deleteDoc, deleteField, doc, documentId, endAt, endBefore, getAggregate, getCount, getDoc, getDocs, getFirestore, increment, initializeFirestore, limit, limitToLast, or, orderBy, query, queryEqual, refEqual, runTransaction, serverTimestamp, setDoc, setLogLevel, snapshotEqual, startAfter, startAt, sum, terminate, updateDoc, where, writeBatch };\n//# sourceMappingURL=index.browser.esm2017.js.map\n"],"names":["User","constructor","t","this","uid","isAuthenticated","toKey","isEqual","UNAUTHENTICATED","GOOGLE_CREDENTIALS","FIRST_PARTY","MOCK_USER","d","f","__PRIVATE_logDebug","e","logLevel","DEBUG","r","map","__PRIVATE_argToString","debug","__PRIVATE_logError","ERROR","error","__PRIVATE_logWarn","WARN","warn","JSON","stringify","fail","Error","__PRIVATE_hardAssert","__PRIVATE_debugCast","m","A","T","P","R","V","p","y","w","g","F","v","D","b","FirestoreError","super","code","message","toString","name","__PRIVATE_OAuthToken","user","type","headers","Map","set","__PRIVATE_EmptyAuthCredentialsProvider","getToken","Promise","resolve","invalidateToken","start","enqueueRetryable","shutdown","__PRIVATE_EmulatorAuthCredentialsProvider","token","changeListener","__PRIVATE_LiteAuthCredentialsProvider","auth","onInit","then","accessToken","getUid","__PRIVATE_FirstPartyToken","i","o","u","l","__PRIVATE_FirstPartyAuthCredentialsProvider","AppCheckToken","value","length","__PRIVATE_LiteAppCheckTokenProvider","h","appCheck","DatabaseInfo","n","s","a","databaseId","appId","persistenceKey","host","ssl","forceLongPolling","autoDetectLongPolling","longPollingOptions","useFetchStreams","DatabaseId","projectId","database","empty","isDefaultDatabase","BasePath","segments","offset","len","comparator","child","slice","limit","forEach","push","construct","popFirst","popLast","firstSegment","lastSegment","get","isEmpty","isPrefixOf","isImmediateParentOf","toArray","Math","min","ResourcePath","canonicalString","join","fromString","indexOf","split","filter","emptyPath","S","FieldPath$1","isValidIdentifier","test","replace","isKeyField","keyField","fromServerFormat","__PRIVATE_addCurrentSegment","DocumentKey","path","fromPath","fromName","collectionGroup","hasCollectionId","getCollectionGroup","getCollectionPath","isDocumentKey","fromSegments","__PRIVATE_validateNonEmptyArgument","__PRIVATE_validateDocumentPath","__PRIVATE_validateCollectionPath","__PRIVATE_valueDescription","substring","Array","__PRIVATE_cast","_delegate","__PRIVATE_validatePositiveNumber","__PRIVATE_cloneLongPollingOptions","timeoutSeconds","N","__PRIVATE_isNullOrUndefined","__PRIVATE_isNegativeZero","O","BatchGetDocuments","Commit","RunQuery","RunAggregationQuery","q","B","__PRIVATE_mapCodeFromHttpStatus","OK","CANCELLED","UNKNOWN","INVALID_ARGUMENT","DEADLINE_EXCEEDED","NOT_FOUND","ALREADY_EXISTS","PERMISSION_DENIED","RESOURCE_EXHAUSTED","FAILED_PRECONDITION","ABORTED","OUT_OF_RANGE","UNIMPLEMENTED","INTERNAL","UNAVAILABLE","DATA_LOSS","__PRIVATE_FetchConnection","databaseInfo","encodeURIComponent","round","random","I","method","body","status","statusText","ok","json","isArray","__PRIVATE_randomBytes","self","crypto","msCrypto","Uint8Array","getRandomValues","floor","__PRIVATE_AutoId","C","charAt","__PRIVATE_primitiveComparator","__PRIVATE_arrayEquals","every","__PRIVATE_objectSize","Object","prototype","hasOwnProperty","call","__PRIVATE_Base64DecodeError","arguments","ByteString","binaryString","fromBase64String","atob","DOMException","fromUint8Array","String","fromCharCode","Symbol","iterator","next","charCodeAt","done","toBase64","btoa","toUint8Array","approximateByteSize","compareTo","EMPTY_BYTE_STRING","$","RegExp","__PRIVATE_normalizeTimestamp","exec","substr","Number","Date","seconds","getTime","nanos","__PRIVATE_normalizeNumber","__PRIVATE_normalizeByteString","Timestamp","nanoseconds","now","fromMillis","fromDate","toDate","toMillis","_compareTo","toJSON","valueOf","padStart","__PRIVATE_isServerTimestamp","mapValue","fields","__type__","stringValue","__PRIVATE_getPreviousValue","__previous_value__","__PRIVATE_getLocalWriteTime","__local_write_time__","timestampValue","Q","__PRIVATE_typeOrder","__PRIVATE_valueEquals","booleanValue","bytesValue","referenceValue","geoPointValue","latitude","longitude","integerValue","doubleValue","isNaN","arrayValue","values","__PRIVATE_arrayValueContains","find","__PRIVATE_valueCompare","__PRIVATE_compareTimestamps","keys","sort","__PRIVATE_refValue","__PRIVATE_isNullValue","__PRIVATE_isNanValue","__PRIVATE_isMapValue","__PRIVATE_deepClone","assign","Bound","position","inclusive","Filter","FieldFilter","field","op","create","createKeyFieldInFilter","__PRIVATE_KeyFieldFilter","__PRIVATE_ArrayContainsFilter","__PRIVATE_InFilter","__PRIVATE_NotInFilter","__PRIVATE_ArrayContainsAnyFilter","__PRIVATE_KeyFieldInFilter","__PRIVATE_KeyFieldNotInFilter","matches","data","matchesComparison","isInequality","getFlattenedFilters","getFilters","getFirstInequalityField","CompositeFilter","filters","reduce","concat","key","__PRIVATE_extractDocumentKeysFromArrayValue","some","nullValue","OrderBy","dir","SnapshotVersion","timestamp","fromTimestamp","max","toMicroseconds","toTimestamp","SortedMap","root","LLRBNode","EMPTY","insert","copy","BLACK","remove","left","right","size","minKey","maxKey","inorderTraversal","reverseTraversal","getIterator","SortedMapIterator","getIteratorFrom","getReverseIterator","getReverseIteratorFrom","isReverse","nodeStack","getNext","pop","hasNext","peek","color","RED","fixUp","removeMin","isRed","moveRedLeft","rotateRight","moveRedRight","rotateLeft","colorFlip","checkMaxDepth","check","pow","SortedSet","has","first","last","forEachInRange","forEachWhile","firstAfterOrEqual","SortedSetIterator","add","unionWith","iter","FieldMask","covers","ObjectValue","getFieldsMap","setAll","applyChanges","clone","MutableDocument","documentType","version","readTime","createTime","documentState","newInvalidDocument","newFoundDocument","newNoDocument","newUnknownDocument","convertToFoundDocument","convertToNoDocument","convertToUnknownDocument","setHasCommittedMutations","setHasLocalMutations","setReadTime","hasLocalMutations","hasCommittedMutations","hasPendingWrites","isValidDocument","isFoundDocument","isNoDocument","isUnknownDocument","mutableCopy","__PRIVATE_TargetImpl","orderBy","startAt","endAt","__PRIVATE_newTarget","__PRIVATE_QueryImpl","explicitOrderBy","limitType","__PRIVATE_getFirstOrderByField","__PRIVATE_getInequalityFilterField","__PRIVATE_isCollectionGroupQuery","__PRIVATE_queryNormalizedOrderBy","__PRIVATE_queryToTarget","__PRIVATE__queryToTarget","__PRIVATE_queryWithAddedFilter","toNumber","isInteger","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","useProto3Json","TransformOperation","_","__PRIVATE_ServerTimestampTransform","__PRIVATE_ArrayUnionTransformOperation","elements","__PRIVATE_ArrayRemoveTransformOperation","__PRIVATE_NumericIncrementTransformOperation","serializer","L","FieldTransform","transform","Precondition","updateTime","exists","none","isNone","Mutation","__PRIVATE_SetMutation","precondition","fieldTransforms","getFieldMask","__PRIVATE_PatchMutation","fieldMask","__PRIVATE_DeleteMutation","__PRIVATE_VerifyMutation","asc","desc","M","in","x","and","or","JsonProtoSerializer","toISOString","__PRIVATE_toBytes","__PRIVATE_toVersion","__PRIVATE_fromVersion","__PRIVATE_toResourceName","__PRIVATE_toName","__PRIVATE_isValidResourceName","__PRIVATE_toQueryPath","__PRIVATE_getEncodedDatabaseId","__PRIVATE_toMutationDocument","__PRIVATE_toQueryTarget","structuredQuery","parent","from","collectionId","allDescendants","__PRIVATE_toFilter","where","__PRIVATE_toFieldPathReference","direction","__PRIVATE_toDirection","before","__PRIVATE_toOperatorName","__PRIVATE_toCompositeOperatorName","fieldPath","unaryFilter","fieldFilter","compositeFilter","__PRIVATE_toDocumentMask","fieldPaths","__PRIVATE_newSerializer","__PRIVATE_DatastoreImpl","authCredentials","appCheckCredentials","connection","X","tt","all","catch","terminate","async","__PRIVATE_invokeCommitRpc","writes","update","delete","updateMask","verify","updateTransforms","setToServerValue","appendMissingElements","removeAllFromArray","increment","currentDocument","toMutation","__PRIVATE_invokeBatchGetDocumentsRpc","documents","found","missing","__PRIVATE_fromBatchGetDocumentsResponse","k","__PRIVATE_getDatastore","_terminated","fetch","bind","experimentalForceLongPolling","experimentalAutoDetectLongPolling","experimentalLongPollingOptions","_databaseId","app","options","_persistenceKey","_freezeSettings","_authCredentials","_appCheckCredentials","FirestoreSettingsImpl","credentials","ignoreUndefinedProperties","localCache","cacheSizeBytes","Firestore","_app","_settings","_settingsFrozen","_initialized","_terminateTask","_setSettings","sessionIndex","iamToken","authTokenFactory","client","_getSettings","_delete","_terminate","settings","getFirestore","getImmediate","identifier","mockUserToken","sub","user_id","connectFirestoreEmulator","Query","converter","_query","firestore","withConverter","DocumentReference","_key","_path","id","CollectionReference","collection","doc","Bytes","_byteString","FieldPath","_internalPath","FieldValue","_methodName","GeoPoint","isFinite","_lat","_long","U","ParsedSetData","ParsedUpdateData","__PRIVATE_isWrite","__PRIVATE_ParseContextImpl","rt","nt","it","st","ot","ut","_t","lt","ct","__PRIVATE_createError","methodName","ht","dt","contains","__PRIVATE_UserDataReader","ft","__PRIVATE_newUserDataReader","__PRIVATE_parseSetData","merge","mergeFields","__PRIVATE_validatePlainObject","__PRIVATE_parseObject","__PRIVATE_fieldPathFromArgument$1","__PRIVATE_fieldMaskContains","__PRIVATE_DeleteFieldValueImpl","_toFieldTransform","__PRIVATE_NumericIncrementFieldValueImpl","At","__PRIVATE_parseUpdateData","__PRIVATE_fieldPathFromDotSeparatedString","__PRIVATE_parseData","__PRIVATE_parseUpdateVarargs","__PRIVATE_parseQueryValue","__PRIVATE_looksLikeJsonObject","getPrototypeOf","j","search","DocumentSnapshot","_firestore","_userDataWriter","_document","_converter","ref","QueryDocumentSnapshot","fromFirestore","convertValue","__PRIVATE_fieldPathFromArgument","QuerySnapshot","_docs","query","docs","AppliableConstraint","QueryConstraint","QueryCompositeFilterConstraint","QueryFieldFilterConstraint","_apply","_field","_op","_value","_create","_parse","__PRIVATE_validateNewFieldFilter","__PRIVATE_validateDisjunctiveFilterElements","__PRIVATE_parseDocumentIdValue","_queryConstraints","_getOperator","_getQueryConstraints","QueryOrderByConstraint","_direction","__PRIVATE_validateOrderByAndInequalityMatch","QueryLimitConstraint","_limit","_limitType","QueryStartAtConstraint","_docOrFields","_inclusive","__PRIVATE_newQueryBoundFromDocOrFields","startAfter","__PRIVATE_applyFirestoreDataConverter","toFirestore","__PRIVATE_LiteUserDataWriter","convertTimestamp","convertServerTimestamp","convertBytes","convertReference","convertGeoPoint","convertArray","convertObject","convertObjectMap","convertDocumentKey","getDoc","getDocs","document","__PRIVATE_invokeRunQueryRpc","reverse","updateDoc","addDoc","instanceIdentifier","getProvider","apply","setMultipleInstances"],"sourceRoot":""}