{"version":3,"file":"3064-d9f0bbd5a49c92c88eb0.js","mappings":"m/BAiGA,UA1FoBA,KAClB,MAAM,EAACC,EAAa,EAACC,IAAmBC,EAAAA,EAAAA,UACtCC,EAAAA,GAAgBC,KAAKC,IAAW,IAAWA,EAAaC,MAAO,QAE3D,EAACC,EAAW,EAACC,IAAiBN,EAAAA,EAAAA,WAAS,GACvCO,GAAiBC,EAAAA,EAAAA,QAAO,MAExBC,GAAgBC,EAAAA,EAAAA,cAAY,KAChCT,EAAAA,GAAgBU,SAAQ,CAACR,EAAaS,KACpC,MAAMC,EAAWC,aAAY,KAC3Bf,GAAiBgB,IACf,MAAMC,GAAmBC,EAAAA,EAAAA,GAAOF,GAC1BG,EAAqBF,EAAoBJ,GAK/C,OAHIM,EAAmBd,MAAQc,EAAmBC,eAChDD,EAAmBd,OAAS,GAEvBY,CAAmB,IAGxBlB,EAAac,GAAOR,OAASD,EAAYgB,cAC3CC,cAAcP,EAChB,GACC,GAAG,GACN,GACD,CAACf,IA0BJ,OAxBAuB,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAW,IAAIC,sBAClBC,IACCA,EAAQb,SAASc,IACXA,EAAMC,iBAAmBrB,IAC3BC,GAAc,GACdG,IACF,GACA,GAEJ,CAAEkB,UAAW,KAEf,IAAIC,EAAkBrB,EAAesB,QAKrC,OAJID,GACFN,EAASQ,QAAQF,GAGZ,KACDA,GACFN,EAASS,UAAUH,EACrB,CACD,GACA,CAACvB,EAAYI,IAGduB,EAAAA,cAACC,EAAAA,EAAS,CAACC,OAAK,EAACC,UAAU,SAASC,IAAK7B,GACvCyB,EAAAA,cAACK,EAAAA,EAAG,KACFL,EAAAA,cAACM,EAAAA,EAAG,CAACC,GAAI,IACPP,EAAAA,cAAA,OAAKG,UAAU,uBACbH,EAAAA,cAAA,OAAKG,UAAU,wBAEbH,EAAAA,cAACQ,EAAAA,EAAW,CACVC,IAAI,6DACJC,IAAI,UAASC,YAAAC,EAAA,QAEfZ,EAAAA,cAAA,QAAMG,UAAU,8BAElBH,EAAAA,cAACK,EAAAA,EAAG,CAACF,UAAU,2BACZrC,aAAY,EAAZA,EAAcI,KAAI,CAAC2C,EAAKC,IACvBd,EAAAA,cAACM,EAAAA,EAAG,CAACS,GAAI,GAAIR,GAAI,EAAGS,GAAI,EAAGC,IAAKH,GAC9Bd,EAAAA,cAAA,OAAKG,UAAU,uBACbH,EAAAA,cAAA,OAAKG,UAAU,4BAA4BU,aAAG,EAAHA,EAAKK,MAChDlB,EAAAA,cAAA,UAAK,GAAGa,aAAG,EAAHA,EAAKzC,UACb4B,EAAAA,cAAA,SAAIa,aAAG,EAAHA,EAAKM,YAKjBnB,EAAAA,cAAA,OAAKG,UAAU,yBAEbH,EAAAA,cAACQ,EAAAA,EAAW,CACVC,IAAI,8DACJC,IAAI,WAAUC,YAAAC,EAAA,QAEhBZ,EAAAA,cAAA,QAAMG,UAAU,kCAKd,C","sources":["webpack://justtry-app/./src/screens/main/main_v2/achievement.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport { achievementData } from \"@core/const\";\nimport { StaticImage } from \"gatsby-plugin-image\";\n// import acheivementLeftImg from \"@styles/assets/images/landing/acheivement-left.png\";\n// import acheivementRightImg from \"@styles/assets/images/landing/acheivement-right.png\";\n\nconst Achievement = () => {\n  const [achievements, setAchievements] = useState(\n    achievementData.map((achievement) => ({ ...achievement, count: 0 }))\n  );\n  const [hasStarted, setHasStarted] = useState(false);\n  const achievementRef = useRef(null);\n\n  const StartCounting = useCallback(() => {\n    achievementData.forEach((achievement, index) => {\n      const interval = setInterval(() => {\n        setAchievements((prevAchievements) => {\n          const updatedAchievements = [...prevAchievements];\n          const currentAchievement = updatedAchievements[index];\n          // If the count is less than the targetNumber, increment it\n          if (currentAchievement.count < currentAchievement.targetNumber) {\n            currentAchievement.count += 1;\n          }\n          return updatedAchievements;\n        });\n        // Clear interval when the count reaches the targetNumber\n        if (achievements[index].count >= achievement.targetNumber) {\n          clearInterval(interval);\n        }\n      }, 40); // Adjust speed here (50ms per increment)\n    });\n  }, [achievements]);\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      (entries) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting && !hasStarted) {\n            setHasStarted(true); // Ensure it only starts once\n            StartCounting();\n          }\n        });\n      },\n      { threshold: 0.5 } // Trigger when 50% of the section is visible\n    );\n    let achievementCurr = achievementRef.current;\n    if (achievementCurr) {\n      observer.observe(achievementCurr);\n    }\n    // Clean up the observer when the component unmounts\n    return () => {\n      if (achievementCurr) {\n        observer.unobserve(achievementCurr);\n      }\n    };\n  }, [hasStarted, StartCounting]);\n\n  return (\n    <Container fluid className=\"p-md-0\" ref={achievementRef}>\n      <Row>\n        <Col md={12}>\n          <div className=\"achievement_section\">\n            <div className=\"achieve_left_animate\">\n              {/* <img src={acheivementLeftImg} /> */}\n              <StaticImage\n                src=\"../../../styles/assets/images/landing/acheivement-left.png\"\n                alt=\"left-bg\"\n              />\n              <span className=\"achieve_left_animate_dot\"></span>\n            </div>\n            <Row className=\"achievement_section_row\">\n              {achievements?.map((ele, ind) => (\n                <Col sm={12} md={6} lg={3} key={ind}>\n                  <div className=\"achieve_content_sec\">\n                    <div className=\"achieve_content_logo_sec\">{ele?.logo}</div>\n                    <h3>{`${ele?.count}+`}</h3>\n                    <p>{ele?.label}</p>\n                  </div>\n                </Col>\n              ))}\n            </Row>\n            <div className=\"achieve_right_animate\">\n              {/* <img src={acheivementRightImg} /> */}\n              <StaticImage\n                src=\"../../../styles/assets/images/landing/acheivement-right.png\"\n                alt=\"right-bg\"\n              />\n              <span className=\"achieve_right_animate_dot\"></span>\n            </div>\n          </div>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default Achievement;\n"],"names":["Achievement","achievements","setAchievements","useState","achievementData","map","achievement","count","hasStarted","setHasStarted","achievementRef","useRef","StartCounting","useCallback","forEach","index","interval","setInterval","prevAchievements","updatedAchievements","_toConsumableArray","currentAchievement","targetNumber","clearInterval","useEffect","observer","IntersectionObserver","entries","entry","isIntersecting","threshold","achievementCurr","current","observe","unobserve","React","Container","fluid","className","ref","Row","Col","md","StaticImage","src","alt","__imageData","require","ele","ind","sm","lg","key","logo","label"],"sourceRoot":""}