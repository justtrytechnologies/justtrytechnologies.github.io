{"version":3,"file":"6991-69f8c3418bcac6607e78.js","mappings":"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","sources":["webpack://justtry-app/./src/components/common/faq.js","webpack://justtry-app/./node_modules/react-bootstrap/esm/AccordionContext.js","webpack://justtry-app/./node_modules/react-bootstrap/esm/AccordionCollapse.js","webpack://justtry-app/./node_modules/react-bootstrap/esm/AccordionItemContext.js","webpack://justtry-app/./node_modules/react-bootstrap/esm/AccordionBody.js","webpack://justtry-app/./node_modules/react-bootstrap/esm/AccordionButton.js","webpack://justtry-app/./node_modules/react-bootstrap/esm/AccordionHeader.js","webpack://justtry-app/./node_modules/react-bootstrap/esm/AccordionItem.js","webpack://justtry-app/./node_modules/react-bootstrap/esm/Accordion.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { Container, Row, Col, Accordion } from \"react-bootstrap\";\r\n\r\nconst Faq = ({ faqData }) => {\r\n  const [visibleItems, setVisibleItems] = useState(4);\r\n  const [hasMore, setHasMore] = useState(true);\r\n\r\n  const handleLoadMore = () => {\r\n    setVisibleItems(visibleItems + 4);\r\n    if (visibleItems + 4 >= faqData?.length) {\r\n      setHasMore(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"faq_outline\">\r\n      <Container>\r\n        <Row className=\"faq_row\">\r\n          <Col xxl={12} xl={12} lg={12} md={12} sm={12} className=\"p-lg-0\">\r\n            <div className=\"faq_rhs\">\r\n              <h2 className=\"faq_title\">\r\n                Resolve your unanswered queries effortlessly\r\n              </h2>\r\n              <div className=\"faq_acc_wrapper\">\r\n                <Accordion>\r\n                  {faqData?.length > 0 &&\r\n                    faqData?.slice(0, visibleItems)?.map((item, index) => (\r\n                      <Accordion.Item key={index} eventKey={index.toString()}>\r\n                        <Accordion.Header>\r\n                          <div>{index + 1}.</div>\r\n                          <div>{item.question}</div>\r\n                        </Accordion.Header>\r\n                        <Accordion.Body>{item.answer}</Accordion.Body>\r\n                      </Accordion.Item>\r\n                    ))}\r\n                  {faqData?.length > 4 && hasMore && (\r\n                    <div\r\n                      onClick={handleLoadMore}\r\n                      className=\"decenter_hero_sec_btn d-flex justify-content-center\"\r\n                    >\r\n                      <button className=\"demo_btn\">Load More</button>\r\n                    </div>\r\n                  )}\r\n                </Accordion>\r\n              </div>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Faq;\r\n","\"use client\";\n\nimport * as React from 'react';\nexport function isAccordionItemSelected(activeEventKey, eventKey) {\n  return Array.isArray(activeEventKey) ? activeEventKey.includes(eventKey) : activeEventKey === eventKey;\n}\nconst context = /*#__PURE__*/React.createContext({});\ncontext.displayName = 'AccordionContext';\nexport default context;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport Collapse from './Collapse';\nimport AccordionContext, { isAccordionItemSelected } from './AccordionContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n/**\n * This component accepts all of [`Collapse`'s props](/docs/utilities/transitions#collapse-1).\n */\nconst AccordionCollapse = /*#__PURE__*/React.forwardRef(({\n  as: Component = 'div',\n  bsPrefix,\n  className,\n  children,\n  eventKey,\n  ...props\n}, ref) => {\n  const {\n    activeEventKey\n  } = useContext(AccordionContext);\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'accordion-collapse');\n  return /*#__PURE__*/_jsx(Collapse, {\n    ref: ref,\n    in: isAccordionItemSelected(activeEventKey, eventKey),\n    ...props,\n    className: classNames(className, bsPrefix),\n    children: /*#__PURE__*/_jsx(Component, {\n      children: React.Children.only(children)\n    })\n  });\n});\nAccordionCollapse.displayName = 'AccordionCollapse';\nexport default AccordionCollapse;","\"use client\";\n\nimport * as React from 'react';\nconst context = /*#__PURE__*/React.createContext({\n  eventKey: ''\n});\ncontext.displayName = 'AccordionItemContext';\nexport default context;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport AccordionCollapse from './AccordionCollapse';\nimport AccordionItemContext from './AccordionItemContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst AccordionBody = /*#__PURE__*/React.forwardRef(({\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  bsPrefix,\n  className,\n  onEnter,\n  onEntering,\n  onEntered,\n  onExit,\n  onExiting,\n  onExited,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'accordion-body');\n  const {\n    eventKey\n  } = useContext(AccordionItemContext);\n  return /*#__PURE__*/_jsx(AccordionCollapse, {\n    eventKey: eventKey,\n    onEnter: onEnter,\n    onEntering: onEntering,\n    onEntered: onEntered,\n    onExit: onExit,\n    onExiting: onExiting,\n    onExited: onExited,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, bsPrefix)\n    })\n  });\n});\nAccordionBody.displayName = 'AccordionBody';\nexport default AccordionBody;","\"use client\";\n\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport classNames from 'classnames';\nimport AccordionContext, { isAccordionItemSelected } from './AccordionContext';\nimport AccordionItemContext from './AccordionItemContext';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function useAccordionButton(eventKey, onClick) {\n  const {\n    activeEventKey,\n    onSelect,\n    alwaysOpen\n  } = useContext(AccordionContext);\n  return e => {\n    /*\n      Compare the event key in context with the given event key.\n      If they are the same, then collapse the component.\n    */\n    let eventKeyPassed = eventKey === activeEventKey ? null : eventKey;\n    if (alwaysOpen) {\n      if (Array.isArray(activeEventKey)) {\n        if (activeEventKey.includes(eventKey)) {\n          eventKeyPassed = activeEventKey.filter(k => k !== eventKey);\n        } else {\n          eventKeyPassed = [...activeEventKey, eventKey];\n        }\n      } else {\n        // activeEventKey is undefined.\n        eventKeyPassed = [eventKey];\n      }\n    }\n    onSelect == null || onSelect(eventKeyPassed, e);\n    onClick == null || onClick(e);\n  };\n}\nconst AccordionButton = /*#__PURE__*/React.forwardRef(({\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'button',\n  bsPrefix,\n  className,\n  onClick,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'accordion-button');\n  const {\n    eventKey\n  } = useContext(AccordionItemContext);\n  const accordionOnClick = useAccordionButton(eventKey, onClick);\n  const {\n    activeEventKey\n  } = useContext(AccordionContext);\n  if (Component === 'button') {\n    props.type = 'button';\n  }\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    onClick: accordionOnClick,\n    ...props,\n    \"aria-expanded\": Array.isArray(activeEventKey) ? activeEventKey.includes(eventKey) : eventKey === activeEventKey,\n    className: classNames(className, bsPrefix, !isAccordionItemSelected(activeEventKey, eventKey) && 'collapsed')\n  });\n});\nAccordionButton.displayName = 'AccordionButton';\nexport default AccordionButton;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport AccordionButton from './AccordionButton';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst AccordionHeader = /*#__PURE__*/React.forwardRef(({\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'h2',\n  'aria-controls': ariaControls,\n  bsPrefix,\n  className,\n  children,\n  onClick,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'accordion-header');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, bsPrefix),\n    children: /*#__PURE__*/_jsx(AccordionButton, {\n      onClick: onClick,\n      \"aria-controls\": ariaControls,\n      children: children\n    })\n  });\n});\nAccordionHeader.displayName = 'AccordionHeader';\nexport default AccordionHeader;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport AccordionItemContext from './AccordionItemContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst AccordionItem = /*#__PURE__*/React.forwardRef(({\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  bsPrefix,\n  className,\n  eventKey,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'accordion-item');\n  const contextValue = useMemo(() => ({\n    eventKey\n  }), [eventKey]);\n  return /*#__PURE__*/_jsx(AccordionItemContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, bsPrefix)\n    })\n  });\n});\nAccordionItem.displayName = 'AccordionItem';\nexport default AccordionItem;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useUncontrolled } from 'uncontrollable';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport AccordionBody from './AccordionBody';\nimport AccordionButton from './AccordionButton';\nimport AccordionCollapse from './AccordionCollapse';\nimport AccordionContext from './AccordionContext';\nimport AccordionHeader from './AccordionHeader';\nimport AccordionItem from './AccordionItem';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Accordion = /*#__PURE__*/React.forwardRef((props, ref) => {\n  const {\n    // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n    as: Component = 'div',\n    activeKey,\n    bsPrefix,\n    className,\n    onSelect,\n    flush,\n    alwaysOpen,\n    ...controlledProps\n  } = useUncontrolled(props, {\n    activeKey: 'onSelect'\n  });\n  const prefix = useBootstrapPrefix(bsPrefix, 'accordion');\n  const contextValue = useMemo(() => ({\n    activeEventKey: activeKey,\n    onSelect,\n    alwaysOpen\n  }), [activeKey, onSelect, alwaysOpen]);\n  return /*#__PURE__*/_jsx(AccordionContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...controlledProps,\n      className: classNames(className, prefix, flush && `${prefix}-flush`)\n    })\n  });\n});\nAccordion.displayName = 'Accordion';\nexport default Object.assign(Accordion, {\n  Button: AccordionButton,\n  Collapse: AccordionCollapse,\n  Item: AccordionItem,\n  Header: AccordionHeader,\n  Body: AccordionBody\n});"],"names":["_ref","_faqData$slice","faqData","visibleItems","setVisibleItems","useState","hasMore","setHasMore","React","className","Container","Row","Col","xxl","xl","lg","md","sm","Accordion","length","slice","map","item","index","Item","key","eventKey","toString","Header","question","Body","answer","onClick","handleLoadMore","isAccordionItemSelected","activeEventKey","Array","isArray","includes","context","displayName","AccordionCollapse","as","Component","bsPrefix","children","props","ref","useContext","AccordionContext","Collapse","in","only","AccordionBody","onEnter","onEntering","onEntered","onExit","onExiting","onExited","AccordionItemContext","AccordionButton","accordionOnClick","onSelect","alwaysOpen","e","eventKeyPassed","filter","k","useAccordionButton","type","AccordionHeader","ariaControls","AccordionItem","contextValue","useMemo","Provider","value","activeKey","flush","controlledProps","prefix","Object","assign","Button"],"sourceRoot":""}